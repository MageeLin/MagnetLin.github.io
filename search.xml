<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>lodash源码解析：compact</title>
      <link href="/posts/a3f2035b.html"/>
      <url>/posts/a3f2035b.html</url>
      
        <content type="html"><![CDATA[<p>分析<a href="https://lodash.com/docs/4.17.15#compact" target="_blank" rel="external nofollow noopener noreferrer">lodash——compact</a>，compact 的源码非常简单，并没有引用其他的函数。但是看源码之前，首先想一个问题，lodash 源码里大量出现了 a == null 或 a != null 的判断，所以值 a 什么情况下 满足 a == null 为真？什么情况下 a == undefined 为真？</p><a id="more"></a><h2 id="宽松相等"><a href="#宽松相等" class="headerlink" title="宽松相等"></a>宽松相等</h2><p>谁与 null 宽松相等这个问题，我问了公司的资深前端们，给出了解答，答案就在 ECMAScript262 标准里：<a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-abstract-equality-comparison" target="_blank" rel="external nofollow noopener noreferrer">抽象相等比较算法</a>，如下所示：</p><blockquote><p>The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:</p><ol><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is the same as <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y), then<ol><li>Return the result of performing <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-strict-equality-comparison" target="_blank" rel="external nofollow noopener noreferrer">Strict Equality Comparison</a> x === y.</li></ol></li><li>If x is null and y is undefined, return true.</li><li>If x is undefined and y is null, return true.</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is Number and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is String, return the result of the comparison x == ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(y).</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is String and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is Number, return the result of the comparison ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(x) == y.</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is BigInt and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is String, then<ol><li>Let n be ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-stringtobigint" target="_blank" rel="external nofollow noopener noreferrer">StringToBigInt</a>(y).</li><li>If n is NaN, return false.</li><li>Return the result of the comparison x == n.</li></ol></li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is String and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is BigInt, return the result of the comparison y == x.</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is Boolean, return the result of the comparison ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(x) == y.</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is Boolean, return the result of the comparison x == ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(y).</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is either String, Number, BigInt, or Symbol and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is Object, return the result of the comparison x == <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-toprimitive" target="_blank" rel="external nofollow noopener noreferrer">ToPrimitive</a>(y).</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is Object and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is either String, Number, BigInt, or Symbol, return the result of the comparison <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-toprimitive" target="_blank" rel="external nofollow noopener noreferrer">ToPrimitive</a>(x) == y.</li><li>If <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is BigInt and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is Number, or if <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(x) is Number and <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(y) is BigInt, then<ol><li>If x or y are any of NaN, +∞, or -∞, return false.</li><li>If the <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#mathematical-value" target="_blank" rel="external nofollow noopener noreferrer">mathematical value</a> of x is equal to the <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#mathematical-value" target="_blank" rel="external nofollow noopener noreferrer">mathematical value</a> of y, return true; otherwise return false.</li></ol></li><li>Return false.</li></ol></blockquote><p>翻译一下：</p><blockquote><p>在 x == y 这种比较中，x 和 y 都是值，返回 true 或者 false。这种比较执行的步骤如下所示：</p><ol><li>如果 x 的类型与 y 的类型相同：<ol><li>返回<a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-strict-equality-comparison" target="_blank" rel="external nofollow noopener noreferrer">严格相等比较</a> x === y 的结果。</li></ol></li><li>如果 x 为 null 且 y 为 undefined，返回 true。</li><li>如果 x 为 undefined 且 y 为 null，返回 true。</li><li>如果 x 为 Number 类型且 y 为 String 类型，返回比较 x == ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(y)的结果。</li><li>如果 x 为 String 类型且 y 为 Number 类型，返回比较 ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(x) == y 的结果。</li><li>如果 x 为 BigInt 类型且 y 为 String 类型：<ol><li>let n = ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-stringtobigint" target="_blank" rel="external nofollow noopener noreferrer">StringToBigInt</a>(y)。</li><li>如果 n 为 NaN，返回 false。</li><li>返回比较 x == n 的结果。</li></ol></li><li>如果 x 为 String 类型且 y 为 BigInt 类型，返回比较 y == x 的结果。</li><li>如果 x 为 Boolean 类型，返回比较! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(x) == y 的结果。</li><li>如果 y 为 Boolean 类型，返回比较 x == ! <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-tonumber" target="_blank" rel="external nofollow noopener noreferrer">ToNumber</a>(y)的结果。</li><li>如果 x 为 String, Number, BigInt 或 Symbol 类型之一，且 y 为 Object 类型，返回比较 x == <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-toprimitive" target="_blank" rel="external nofollow noopener noreferrer">ToPrimitive</a>(y)的结果。</li><li>如果 x 为 Object 类型，且 y 为 String, Number, BigInt 或 Symbol 类型之一，返回比较 <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-toprimitive" target="_blank" rel="external nofollow noopener noreferrer">ToPrimitive</a>(x) == y 的结果。</li><li>如果 x 为 BigInt 类型且 y 为 Number 类型，或 x 为 Number 类型且 y 为 BigInt 类型：<ol><li>如果 x 或者 y 为 NaN, +∞, or -∞ 之一，返回 false。</li><li>如果 x 与 y 的数学计算结果相等，返回 true；否则返回 false。</li></ol></li><li>返回 false。</li></ol></blockquote><p>比较条件特别细致和繁琐，概括下：</p><blockquote><ol><li>类型相同，返回严格相等比较 x === y 的结果。</li><li>null == undefined，返回 true。</li><li>数字（Number 和 BigInt）类型和 String 类型比较，转换为数字再比较。</li><li>Boolean 类型转换为 Number 类型再比较</li><li>Object 类型与其他原始类型比较前，先转为原始类型再比较。</li></ol></blockquote><p>所以回到最初的问题：</p><ol><li>null 为 Null 类型的唯一值，undefined 为 Undefined 类型的唯一值，所以同类型比较时执行严格相等比较，null == null 和 undefined = undefined 为真。</li><li>第二步和第三步说明了 undefined == null 和 null == undefined 为真；</li><li>其余的牵扯到 null 和 undefined 的宽松相等比较都为假。</li></ol><h2 id="Truthy（真值）和-Falsy-（假值）"><a href="#Truthy（真值）和-Falsy-（假值）" class="headerlink" title="Truthy（真值）和 Falsy （假值）"></a>Truthy（真值）和 Falsy （假值）</h2><p>在 compact 代码中，还用到了关于真假值（Truthy、Falsy）的判断，compact 会剔除数组中的所有假值，那么什么样的值算假值？换句话说，什么样的值类型转换为 Boolean 后为假值？还是见<a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-toboolean" target="_blank" rel="external nofollow noopener noreferrer">ECMA262</a>：</p><p>直接翻译表 10: <a href="http://www.ecma-international.org/ecma-262/11.0/index.html#sec-toboolean" target="_blank" rel="external nofollow noopener noreferrer">ToBoolean</a> 转换</p><table><thead><tr><th>参数类型</th><th>结果</th></tr></thead><tbody><tr><td>Undefined</td><td>返回 false。</td></tr><tr><td>Null</td><td>返回 false。</td></tr><tr><td>Boolean</td><td>返回参数。</td></tr><tr><td>Number</td><td>如果参数为+0, -0 或 NaN，返回 false；其余情况返回 true。</td></tr><tr><td>String</td><td>如果参数是空字符串（length 属性为 0），返回 false；其余情况返回 true。</td></tr><tr><td>Symbol</td><td>返回 true。</td></tr><tr><td>BigInt</td><td>如果参数为 0n，返回 false；其余情况返回 true。</td></tr><tr><td>Object</td><td>返回 true。</td></tr></tbody></table><h2 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个新数组，包含原数组中所有的非假值元素。</span></span><br><span class="line"><span class="comment"> * 例如false, null, 0, "", undefined, 和 NaN 都是被认为是“假值”。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>0.1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Array</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>array 待处理的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Array&#125;</span> </span>返回过滤掉假值的新数组。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * compact([0, 1, false, 2, '', 3])</span></span><br><span class="line"><span class="comment"> * // =&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="comment">// 当array为undefined和null时，返回[]</span></span><br><span class="line">  <span class="keyword">if</span> (array == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="comment">// false, null, 0, "", undefined, 和 NaN在if判断里都为假</span></span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="comment">// 新数组递增赋值</span></span><br><span class="line">      result[resIndex++] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> compact;</span><br></pre></td></tr></table></figure><h2 id="原生实现"><a href="#原生实现" class="headerlink" title="原生实现"></a>原生实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lodash</span></span><br><span class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生实现</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>].filter(<span class="built_in">Boolean</span>);</span><br></pre></td></tr></table></figure><p>原生实现的代码中直接用了<code>Array.prototype.filter()</code>，在后面却直接把 Boolean 当参数传进去，冷不丁看起来难理解，但只要明白下面两点就很容易想通：</p><ol><li><p>首先，<code>Boolean</code>本身就是一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">3</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.prototype.filter(callback)</code>中，入参 callback 其实一个回调函数，只要函数能满足入参为<code>element[, index[, array]]</code>就可以，所以如下两种写法是等价的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写，Boolean本身就是一个函数</span></span><br><span class="line"><span class="comment">// 所以只要参数能对应上，也就能直接作为回调函数callback用</span></span><br><span class="line">b = a.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用function语法构造了一个回调函数，再把item传给Boolean</span></span><br><span class="line">b = a.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Boolean</span>(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 源码解析 </category>
          
          <category> lodash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lodash </tag>
            
            <tag> 源码 </tag>
            
            <tag> compact </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lodash源码解析：chunk、slice、toInteger、toFinite、toNumber、isObject、isSymbol</title>
      <link href="/posts/d9393c5e.html"/>
      <url>/posts/d9393c5e.html</url>
      
        <content type="html"><![CDATA[<p>上一阵子一直在忙着对前端界做出一点微小的贡献，再过两个多月就能揭晓。现在打算开一个天坑，把 lodash 的源码挨个解析一遍，学习下 npm 下载量最大、依赖最多的库的源码逻辑。</p><p>解析的代码为 2020 年 7 月 18 日的<a href="https://github.com/lodash/lodash" target="_blank" rel="external nofollow noopener noreferrer">lodash 源码</a>，版本是4.17.15，fork 到了<a href="https://github.com/MagnetLin/lodash" target="_blank" rel="external nofollow noopener noreferrer">自己的仓库</a>中，顺序按照官网文档的顺序，在解析时会将该方法依赖的子方法也会全部分析下。有很多自己难理解或理解错的地方，抛砖引玉。</p><a id="more"></a><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><p><a href="https://lodash.com/docs/4.17.15#chunk" target="_blank" rel="external nofollow noopener noreferrer">文档地址:https://lodash.com/docs/4.17.15#chunk</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> slice <span class="keyword">from</span> <span class="string">'./slice.js'</span>;</span><br><span class="line"><span class="keyword">import</span> toInteger <span class="keyword">from</span> <span class="string">'./toInteger.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组（array）拆分成多个 size 长度的区块，并将这些区块组成一个新数组。</span></span><br><span class="line"><span class="comment"> * 如果array 无法被分割成全部等长的区块，那么最后剩余的元素将组成一个区块。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>3.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Array</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>array 需要处理的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[size=1] 每个数组区块的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Array&#125;</span> </span>返回一个包含拆分区块的新数组（注：相当于一个二维数组）。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * chunk(['a', 'b', 'c', 'd'], 2)</span></span><br><span class="line"><span class="comment"> * // =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * chunk(['a', 'b', 'c', 'd'], 3)</span></span><br><span class="line"><span class="comment"> * // =&gt; [['a', 'b', 'c'], ['d']]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">array, size = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// size必须大于等于0</span></span><br><span class="line">  size = <span class="built_in">Math</span>.max(toInteger(size), <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// array为假时，length设为0；为真时设为数组长度</span></span><br><span class="line">  <span class="keyword">const</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length;</span><br><span class="line">  <span class="comment">// length为假或size为0时，返回空数组</span></span><br><span class="line">  <span class="keyword">if</span> (!length || size &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化一个长度为（length / size并向上取整）的数组</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> resIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>.ceil(length / size));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环取区块并赋值给result数组的对应位置</span></span><br><span class="line">  <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">    result[resIndex++] = slice(array, index, (index += size));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回result</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> chunk;</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p><a href="https://lodash.com/docs/4.17.15#slice" target="_blank" rel="external nofollow noopener noreferrer">文档地址:https://lodash.com/docs/4.17.15#slice</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个数组，来源是裁剪数组array，从 start 位置开始到 end 位置结束，但不包括 end 本身的位置。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * **注意:** 这个方法被用来代替</span></span><br><span class="line"><span class="comment"> * [`Array#slice`](https://mdn.io/Array/slice)确保返回的是个稠密数组。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>3.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Array</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>array 要裁剪的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[start=0] 开始位置。负数索引将会被看作从数组结束位置的向前偏移。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[end=array.length] 结束位置。负数索引将会被看作从数组结束位置的向前偏移。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Array&#125;</span> </span>返回剪切后的数组。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * var array = [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _.slice(array, 2)</span></span><br><span class="line"><span class="comment"> * // =&gt; [3, 4]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slice</span>(<span class="params">array, start, end</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// array是否为undefined或null，是的话则length为0</span></span><br><span class="line">  <span class="keyword">let</span> length = array == <span class="literal">null</span> ? <span class="number">0</span> : array.length;</span><br><span class="line">  <span class="comment">//  length为假（undefined或0），则返回空数组</span></span><br><span class="line">  <span class="keyword">if</span> (!length) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// start是否为undefined或null，是的话则start赋值为0</span></span><br><span class="line">  start = start == <span class="literal">null</span> ? <span class="number">0</span> : start;</span><br><span class="line">  <span class="comment">// start是否为undefined，是的话则end赋值为length</span></span><br><span class="line">  end = end === <span class="literal">undefined</span> ? length : end;</span><br><span class="line">  <span class="comment">// 如果start小于0</span></span><br><span class="line">  <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 防止真正的start变为负数</span></span><br><span class="line">    start = -start &gt; length ? <span class="number">0</span> : length + start;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止end比length还大</span></span><br><span class="line">  end = end &gt; length ? length : end;</span><br><span class="line">  <span class="comment">// 如果end小于0</span></span><br><span class="line">  <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    end += length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果start大于end时，length赋值0，否则就使用&gt;&gt;&gt;移位0确保length是个正整数</span></span><br><span class="line">  length = start &gt; end ? <span class="number">0</span> : (end - start) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 确保start是个正整数</span></span><br><span class="line">  start &gt;&gt;&gt;= <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 返回结果初始化</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(length);</span><br><span class="line">  <span class="comment">// 循环赋值</span></span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    result[index] = array[index + start];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> slice;</span><br></pre></td></tr></table></figure><h3 id="toInteger"><a href="#toInteger" class="headerlink" title="toInteger"></a>toInteger</h3><p><a href="https://lodash.com/docs/4.17.15#toInteger" target="_blank" rel="external nofollow noopener noreferrer">文档地址:https://lodash.com/docs/4.17.15#toInteger</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> toFinite <span class="keyword">from</span> <span class="string">'./toFinite.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换值为整数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * **注意:** 这个方法大致基于</span></span><br><span class="line"><span class="comment"> * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>4.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Lang</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 需要转换的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span> </span>返回转换后的整数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see </span>isInteger, isNumber, toNumber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toInteger(3.2)</span></span><br><span class="line"><span class="comment"> * // =&gt; 3</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toInteger(Number.MIN_VALUE)</span></span><br><span class="line"><span class="comment"> * // =&gt; 0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toInteger(Infinity)</span></span><br><span class="line"><span class="comment"> * // =&gt; 1.7976931348623157e+308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toInteger('3.2')</span></span><br><span class="line"><span class="comment"> * // =&gt; 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toInteger</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 转换为有限数字</span></span><br><span class="line">  <span class="keyword">const</span> result = toFinite(value);</span><br><span class="line">  <span class="comment">// 对1取余</span></span><br><span class="line">  <span class="keyword">const</span> remainder = result % <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 能取到余数就减去余数，返回了整数值</span></span><br><span class="line">  <span class="keyword">return</span> remainder ? result - remainder : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> toInteger;</span><br></pre></td></tr></table></figure><h4 id="toFinite"><a href="#toFinite" class="headerlink" title="toFinite"></a>toFinite</h4><p><a href="https://lodash.com/docs/4.17.15#toFinite" target="_blank" rel="external nofollow noopener noreferrer">文档地址:https://lodash.com/docs/4.17.15#toFinite</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> toNumber <span class="keyword">from</span> <span class="string">'./toNumber.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用作各种“数字”常量的引用。 */</span></span><br><span class="line"><span class="keyword">const</span> INFINITY = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> MAX_INTEGER = <span class="number">1.7976931348623157e308</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将值转换为有限数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>4.12.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Lang</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 需要转换的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span> </span>返回转换后的数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toFinite(3.2)</span></span><br><span class="line"><span class="comment"> * // =&gt; 3.2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toFinite(Number.MIN_VALUE)</span></span><br><span class="line"><span class="comment"> * // =&gt; 5e-324</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toFinite(Infinity)</span></span><br><span class="line"><span class="comment"> * // =&gt; 1.7976931348623157e+308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toFinite('3.2')</span></span><br><span class="line"><span class="comment"> * // =&gt; 3.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFinite</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先判断value是否假</span></span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="comment">// 假的话就判断是否为0，为0返回0，否则返回value</span></span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">0</span> ? value : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把value转换为数字</span></span><br><span class="line">  value = toNumber(value);</span><br><span class="line">  <span class="comment">// 判断是否正负无穷大</span></span><br><span class="line">  <span class="keyword">if</span> (value === INFINITY || value === -INFINITY) &#123;</span><br><span class="line">    <span class="comment">// 是正负无穷大的话，则返回对应正负1.7976931348623157e+308</span></span><br><span class="line">    <span class="keyword">const</span> sign = value &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sign * MAX_INTEGER;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// value 如果!== value的情况，就是+0 === -0，此时返回0</span></span><br><span class="line">  <span class="keyword">return</span> value === value ? value : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> toFinite;</span><br></pre></td></tr></table></figure><h4 id="toNumber"><a href="#toNumber" class="headerlink" title="toNumber"></a>toNumber</h4><p><a href="https://lodash.com/docs/4.17.15#toNumber" target="_blank" rel="external nofollow noopener noreferrer">文档地址:https://lodash.com/docs/4.17.15#toNumber</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> isObject <span class="keyword">from</span> <span class="string">'./isObject.js'</span>;</span><br><span class="line"><span class="keyword">import</span> isSymbol <span class="keyword">from</span> <span class="string">'./isSymbol.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用于各种Number类型的常量*/</span></span><br><span class="line"><span class="keyword">const</span> NAN = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用于匹配前面或者后面的空白 */</span></span><br><span class="line"><span class="keyword">const</span> reTrim = <span class="regexp">/^\s+|\s+$/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用于检测错误的有符号十六进制字符串值 */</span></span><br><span class="line"><span class="keyword">const</span> reIsBadHex = <span class="regexp">/^[-+]0x[0-9a-f]+$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用于检测二进制字符串值 */</span></span><br><span class="line"><span class="keyword">const</span> reIsBinary = <span class="regexp">/^0b[01]+$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用于检测八进制字符串值 */</span></span><br><span class="line"><span class="keyword">const</span> reIsOctal = <span class="regexp">/^0o[0-7]+$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 不依赖于root的内置方法引用 */</span></span><br><span class="line"><span class="keyword">const</span> freeParseInt = <span class="built_in">parseInt</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将目标值转换为数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>4.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Lang</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 目标值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span> </span>返回一个数字.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see </span>isInteger, toInteger, isNumber</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toNumber(3.2)</span></span><br><span class="line"><span class="comment"> * // =&gt; 3.2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toNumber(Number.MIN_VALUE)</span></span><br><span class="line"><span class="comment"> * // =&gt; 5e-324</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toNumber(Infinity)</span></span><br><span class="line"><span class="comment"> * // =&gt; Infinity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * toNumber('3.2')</span></span><br><span class="line"><span class="comment"> * // =&gt; 3.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toNumber</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果为number原始类型，则直接返回原值，否则继续</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果为symbol类型则返回NaN，否则继续</span></span><br><span class="line">  <span class="keyword">if</span> (isSymbol(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> NAN;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果为对象类型，则先判断valueof属性是否typeof结果为function</span></span><br><span class="line">  <span class="comment">// 是的话就执行后赋值给other，否的话就valueof属性直接赋值给other</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// 再判断other是否为对象，</span></span><br><span class="line">  <span class="comment">// 是对象则把toString结果赋值给value，否的话就other赋值给value。</span></span><br><span class="line">  <span class="keyword">if</span> (isObject(value)) &#123;</span><br><span class="line">    <span class="keyword">const</span> other = <span class="keyword">typeof</span> value.valueOf === <span class="string">'function'</span> ? value.valueOf() : value;</span><br><span class="line">    value = isObject(other) ? <span class="string">`<span class="subst">$&#123;other&#125;</span>`</span> : other;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果当前的value是否为string类型，</span></span><br><span class="line">  <span class="comment">// 不是string类型的话就判断是否为0，</span></span><br><span class="line">  <span class="comment">// 为0则直接返回，不为0就强制转换后返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="number">0</span> ? value : +value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 现在已经确定为string类型，掐头去尾</span></span><br><span class="line">  value = value.replace(reTrim, <span class="string">''</span>);</span><br><span class="line">  <span class="comment">// 判断是否为二进制</span></span><br><span class="line">  <span class="keyword">const</span> isBinary = reIsBinary.test(value);</span><br><span class="line">  <span class="comment">// 如果是二进制或八进制，就直接转换为数字返回</span></span><br><span class="line">  <span class="keyword">return</span> isBinary || reIsOctal.test(value)</span><br><span class="line">    ? freeParseInt(value.slice(<span class="number">2</span>), isBinary ? <span class="number">2</span> : <span class="number">8</span>)</span><br><span class="line">    : <span class="comment">// 不是的话就判断是否为有错的16进制，是的话返回Nan，否就转化为数字返回</span></span><br><span class="line">    reIsBadHex.test(value)</span><br><span class="line">    ? NAN</span><br><span class="line">    : +value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> toNumber;</span><br></pre></td></tr></table></figure><h4 id="isObject"><a href="#isObject" class="headerlink" title="isObject"></a>isObject</h4><p><a href="https://lodash.com/docs/4.17.15#isObject" target="_blank" rel="external nofollow noopener noreferrer">文档地址:https://lodash.com/docs/4.17.15#isObject</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查value是否为</span></span><br><span class="line"><span class="comment"> * [Object类型](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)</span></span><br><span class="line"><span class="comment"> * 例如 arrays, functions, objects, regexes, `new Number(0)`, and `new String('')</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>0.1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Lang</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 需要检查的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>如果对象则返回true，不是返回false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * isObject(&#123;&#125;)</span></span><br><span class="line"><span class="comment"> * // =&gt; true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * isObject([1, 2, 3])</span></span><br><span class="line"><span class="comment"> * // =&gt; true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * isObject(Function)</span></span><br><span class="line"><span class="comment"> * // =&gt; true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * isObject(null)</span></span><br><span class="line"><span class="comment"> * // =&gt; false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 本质上使用typeof判断符来判断,这是以下类型的返回值，所以需要先排除null，并把function纳入进来</span></span><br><span class="line">  <span class="comment">// typeof null                'object'</span></span><br><span class="line">  <span class="comment">// typeof function() &#123;&#125;       'function'</span></span><br><span class="line">  <span class="comment">// typeof &#123;&#125;                  'object'</span></span><br><span class="line">  <span class="comment">// typeof []                  'object'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type === <span class="string">'object'</span> || type === <span class="string">'function'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> isObject;</span><br></pre></td></tr></table></figure><h4 id="isSymbol"><a href="#isSymbol" class="headerlink" title="isSymbol"></a>isSymbol</h4><p><a href="https://lodash.com/docs/4.17.15#isSymbol" target="_blank" rel="external nofollow noopener noreferrer">文档地址:https://lodash.com/docs/4.17.15#isSymbol</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getTag <span class="keyword">from</span> <span class="string">'./.internal/getTag.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查目标值是否为Symbol原始类型或Symbol对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>4.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@category <span class="variable">Lang</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 需要检查的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span> </span>如果为symbol则返回true，否则返回false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * isSymbol(Symbol.iterator)</span></span><br><span class="line"><span class="comment"> * // =&gt; true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * isSymbol('abc')</span></span><br><span class="line"><span class="comment"> * // =&gt; false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSymbol</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// || 符号之后的判断是为了在ES2015之前的代码polyfill中检测symbol</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    type == <span class="string">'symbol'</span> ||</span><br><span class="line">    (type === <span class="string">'object'</span> &amp;&amp; value != <span class="literal">null</span> &amp;&amp; getTag(value) == <span class="string">'[object Symbol]'</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> isSymbol;</span><br></pre></td></tr></table></figure><h4 id="getTag"><a href="#getTag" class="headerlink" title="getTag"></a>getTag</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取目标值的类型标签（Symbol.toStringTag）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>value 需要查询的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;string&#125;</span> </span>返回类型标签.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTag</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果==为假，则先检查是否为undefined，</span></span><br><span class="line">  <span class="comment">// 是的话返回[object Undefined]，不是的话统统返回[object Null]</span></span><br><span class="line">  <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value === <span class="literal">undefined</span> ? <span class="string">'[object Undefined]'</span> : <span class="string">'[object Null]'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如==为真，直接借用Object原型链上的toString方法</span></span><br><span class="line">  <span class="keyword">return</span> toString.call(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getTag;</span><br></pre></td></tr></table></figure><h2 id="纯JS实现"><a href="#纯JS实现" class="headerlink" title="纯JS实现"></a>纯JS实现</h2><p>在找lodash源码的时候发现了一个很有意思的仓库叫<a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_chunk" target="_blank" rel="external nofollow noopener noreferrer">You-Dont-Need-Lodash-Underscore</a>，使用纯JS实现了Lodash/Underscore的很多方法。在能明确自己的变量类型并且不想很重的引入lodash时可以自己写这些方法，同样来解析下它。</p><h3 id="chunk-1"><a href="#chunk-1" class="headerlink" title="chunk"></a>chunk</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Underscore/Lodash使用</span></span><br><span class="line">_.chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class="line"></span><br><span class="line">_.chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chunk = <span class="function">(<span class="params">input, size</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// arr是累计器</span></span><br><span class="line">  <span class="comment">// item是当前当前值</span></span><br><span class="line">  <span class="comment">// idx是当前索引</span></span><br><span class="line">  <span class="comment">// []是初始累计器</span></span><br><span class="line">  <span class="comment">// 整体的逻辑如下：</span></span><br><span class="line">  <span class="comment">// 当索引对size取余为0时，就在当前累计器的基础上加一个子数组[item]</span></span><br><span class="line">  <span class="comment">// 当索引对size取余不为0时，就在当前累计器基础上把最后一个子数组加上子元素item</span></span><br><span class="line">  <span class="keyword">return</span> input.reduce(<span class="function">(<span class="params">arr, item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> idx % size === <span class="number">0</span></span><br><span class="line">      ? [...arr, [item]]</span><br><span class="line">      : [...arr.slice(<span class="number">0</span>, <span class="number">-1</span>), [...arr.slice(<span class="number">-1</span>)[<span class="number">0</span>], item]];<span class="comment">// 这里活用了slice不改变原数组，返回新数组的规则</span></span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b'], ['c', 'd']]</span></span><br><span class="line"></span><br><span class="line">chunk([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [['a', 'b', 'c'], ['d']]</span></span><br></pre></td></tr></table></figure><h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice"></a>slice</h3><p>slice就很尴尬了，<code>Array.prototype</code>上的原生方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lodash</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(_.slice(array, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">// output: [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// output: [2, 3]</span></span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 源码解析 </category>
          
          <category> lodash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lodash </tag>
            
            <tag> 源码 </tag>
            
            <tag> chunk </tag>
            
            <tag> slice </tag>
            
            <tag> toInteger </tag>
            
            <tag> toFinite </tag>
            
            <tag> toNumber </tag>
            
            <tag> isObject </tag>
            
            <tag> isSymbol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Protocol Buffers3语言指南（译）</title>
      <link href="/posts/d452b933.html"/>
      <url>/posts/d452b933.html</url>
      
        <content type="html"><![CDATA[<p>最近工作中需要用到 Google 家的 Protocol Buffers，抽空把官网的 <a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="external nofollow noopener noreferrer">proto3 指南</a>翻译下学习一波。</p><a id="more"></a><h1 id="proto3-语言指南"><a href="#proto3-语言指南" class="headerlink" title="proto3 语言指南"></a>proto3 语言指南</h1><ul><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#simple" target="_blank" rel="external nofollow noopener noreferrer">定义一个 Message 类型</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar" target="_blank" rel="external nofollow noopener noreferrer">标量值类型</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#default" target="_blank" rel="external nofollow noopener noreferrer">默认值</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#enum" target="_blank" rel="external nofollow noopener noreferrer">枚举</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#other" target="_blank" rel="external nofollow noopener noreferrer">使用其他 Message 类型</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#nested" target="_blank" rel="external nofollow noopener noreferrer">嵌套类型</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#updating" target="_blank" rel="external nofollow noopener noreferrer">更新一个 Message 类型</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#unknowns" target="_blank" rel="external nofollow noopener noreferrer">未知字段</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#any" target="_blank" rel="external nofollow noopener noreferrer">Any</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#oneof" target="_blank" rel="external nofollow noopener noreferrer">Oneof</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#maps" target="_blank" rel="external nofollow noopener noreferrer">Maps</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#packages" target="_blank" rel="external nofollow noopener noreferrer">Packages</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#services" target="_blank" rel="external nofollow noopener noreferrer">定义服务</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#json" target="_blank" rel="external nofollow noopener noreferrer">JSON 映射</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#options" target="_blank" rel="external nofollow noopener noreferrer">选项</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3#generating" target="_blank" rel="external nofollow noopener noreferrer">生成自己的类</a></li></ul><p>本指南描述如何使用 protocol buffer 语言来构造 protocol buffer 数据，包括 <code>.proto</code>文件语法以及如何生成 <code>.proto</code>文件的数据访问类。 涵盖了<strong>proto3</strong>版本: 有关<strong>proto2</strong>语法的信息，请参阅 <a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="external nofollow noopener noreferrer">Proto2 语言指南</a>。</p><p>这是一个参考指南——对于使用本文中描述的众多特性的分步示例，请参阅本<a href="https://developers.google.com/protocol-buffers/docs/tutorials" target="_blank" rel="external nofollow noopener noreferrer">教程</a> (目前只有 proto2，很快将有更多的 proto3 文档)。</p><h2 id="定义一个-Message-类型"><a href="#定义一个-Message-类型" class="headerlink" title="定义一个 Message 类型"></a>定义一个 Message 类型</h2><p>首先让我们看一个非常简单的例子。 假设想要定义一个搜索请求的 message 格式，其中每个搜索请求都有一个查询字符串、特定页面以及每个页面有多少条结果。 下述内容是用于定义 message 类型的 <code>.proto</code> 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">message SearchRequest &#123;</span><br><span class="line">  string query &#x3D; 1;</span><br><span class="line">  int32 page_number &#x3D; 2;</span><br><span class="line">  int32 result_per_page &#x3D; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件的第一行规定正在使用<code>proto3</code> 语法： 如果不这样做， protocol buffer 编译器会认为正在使用<a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="external nofollow noopener noreferrer">proto2</a>。而且必须是文件的第一个非空非注释行</li><li>这个名为<code>SearchRequest</code> 的 message 定义了三个字段(键值对) ，每个字段包含了 message 中的一段数据。 每个字段都有一个名称和一个类型。</li></ul><h3 id="指定字段类型"><a href="#指定字段类型" class="headerlink" title="指定字段类型"></a>指定字段类型</h3><p>在上面的示例中，所有字段都是 <a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar" target="_blank" rel="external nofollow noopener noreferrer">标量类型</a>：两个整数(每页的页码和结果)和一个字符串(查询)。 但是，也可以为字段指定复合数据类型，包括<a href="https://developers.google.com/protocol-buffers/docs/proto3#enum" target="_blank" rel="external nofollow noopener noreferrer">枚举</a>和其他 message 类型。</p><h3 id="分配字段编号"><a href="#分配字段编号" class="headerlink" title="分配字段编号"></a>分配字段编号</h3><p>message 定义中的每个字段都有一个<strong>唯一编号</strong>。 这些字段编号在<a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="external nofollow noopener noreferrer">message 的二进制格式</a>中标识字段，并且在使用了 message 类型后应不能更改。 注意，范围 1 到 15 中的字段编号需要一个字节进行编码，包括字段编号和字段类型(可以在 <a href="https://developers.google.com/protocol-buffers/docs/encoding#structure" target="_blank" rel="external nofollow noopener noreferrer">Protocol Buffer 编码</a>中找到更多相关信息)。 范围 16 到 2047 的字段编号需要两个字节。 因此，应该为经常出现的 message 元素保留数字 1 到 15。 记住，为将来可能添加的频繁出现的元素留出一些空间。</p><p>可以指定的最小字段编号是 1，最大的字段编号是 2^29-1，即 536,870,911。 也不能使用数字 19000 到 19999(<code>FieldDescriptor: : kFirstReservedNumber</code> 到 <code>FieldDescriptor: kLastReservedNumber</code>) ，因为它们是给 Protocol Buffers 实现保留的——如果你在你的<code>.proto</code>文件中用了保留编号，protocol buffer 编译器会报错。 同样，也不能使用任何之前的<a href="https://developers.google.com/protocol-buffers/docs/proto3#reserved" target="_blank" rel="external nofollow noopener noreferrer">保留</a>字段编号。</p><h3 id="指定字段规则"><a href="#指定字段规则" class="headerlink" title="指定字段规则"></a>指定字段规则</h3><p>message 字段可以是下列字段之一:</p><ul><li><code>singular</code>: 格式良好的 message 可以有零个或一个(但不能多于一个)的该字段。 这是 proto3 语法的默认字段规则。</li><li><code>repeated</code>: 格式良好的 message 中重复该字段任意数(包括零次)。 重复值的顺序将被保留。</li></ul><p>在 proto3 中，标量数值类型的<code>reepeated</code>字段默认使用<code>packed</code>编码。</p><p>可以在 <a href="https://developers.google.com/protocol-buffers/docs/encoding#packed" target="_blank" rel="external nofollow noopener noreferrer">Protocol Buffer 编码</a> 中找到关于<code>packed</code>编码的更多信息。</p><h3 id="添加更多-message-类型"><a href="#添加更多-message-类型" class="headerlink" title="添加更多 message 类型"></a>添加更多 message 类型</h3><p>可以在单个<code>.proto</code>文件中定义多个 message 类型。 这在定义多个相关的 message 时非常有用——例如，如果想定义与 SearchResponse message 类型对应的应答 message 格式，可以将其添加到相同的<code>.proto</code>文件中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">message SearchRequest &#123;</span><br><span class="line">  string query &#x3D; 1;</span><br><span class="line">  int32 page_number &#x3D; 2;</span><br><span class="line">  int32 result_per_page &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message SearchResponse &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><p>要向<code>. proto</code> 文件添加注释，请使用 C/C++风格的<code>//</code> 和 <code>/* ... */</code> 语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* SearchRequest表示了一个搜索查询，带有分页选项</span><br><span class="line"> * 指示响应结果中应包含的内容。 *&#x2F;</span><br><span class="line"></span><br><span class="line">message SearchRequest &#123;</span><br><span class="line">  string query &#x3D; 1;</span><br><span class="line">  int32 page_number &#x3D; 2;  &#x2F;&#x2F; 想要第几页？</span><br><span class="line">  int32 result_per_page &#x3D; 3;  &#x2F;&#x2F; 每页的结果条数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h3><p>如果通过完全删除字段或将其注释掉来<a href="https://developers.google.com/protocol-buffers/docs/proto3#updating" target="_blank" rel="external nofollow noopener noreferrer">更新</a>message 类型，那么未来的使用者在对该类型进行更新时可能会重用字段编号。 如果以后加载旧版本的相同<code>.proto</code>文件时，可能会导致严重的问题，包括数据损坏，隐私漏洞等等。 确保这种情况不会发生的一种方法是保留已删除字段的编号(或名称，这也可能导致 JSON 序列化问题)。 如果将来有任何使用者尝试使用这些字段编号， protocol buffer 编译器将报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message Foo &#123;</span><br><span class="line">  reserved 2, 15, 9 to 11;</span><br><span class="line">  reserved &quot;foo&quot;, &quot;bar&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，不能在同一个<code>reserved</code>语句中混合字段名和字段编号。</p></blockquote><h3 id="proto文件生成了什么？"><a href="#proto文件生成了什么？" class="headerlink" title=".proto文件生成了什么？"></a><code>.proto</code>文件生成了什么？</h3><p>在编译<code>.proto</code>时，<a href="https://developers.google.com/protocol-buffers/docs/proto3#generating" target="_blank" rel="external nofollow noopener noreferrer">protocol buffer 编译器</a>以你选择的语言生成代码，你需要使用该语言来处理文件中描述的 message 类型，包括获取和设置字段值，将 message 序列化为输出流以及将输入流解析为 message。</p><ul><li>对于<strong>C++</strong> ，编译器从<code>.proto</code>生成一个<code>.h</code> 和 <code>.cc</code>文件，文件中描述的每种 message 类型都有一个类。</li><li>对于<strong>Java</strong>，编译器生成一个<code>.java</code> 文件，每种 message 类型都有一个类，还有一个用于创建 message 类实例的特殊 <code>Builder</code> 类</li><li><strong>Python</strong> 有一点不同—— Python 编译器会根据<code>.proto</code>中的每种 message 类型生成一个带 static 描述符的模块，然后将该模块与<em>metaclass</em>一起使用，以在运行时创建必要的 Python 数据访问类。</li><li>对于<strong>Go</strong>, 编译器将会为文件中的每个 message 类型生成一个<code>.pb.go</code> 文件。</li><li>对于 <strong>Ruby</strong>，编译器生成一个 <code>.rb</code>文件，其中有一个包含 message 类型 Ruby 模块。</li><li>对于 <strong>Objective-C</strong>，编译器从每个<code>.proto</code>文件生成一个 <code>pbobjc.h</code> 和 <code>pbobjc.m</code> 文件，文件中描述的每种 message 类型都有一个类。</li><li>对于<strong>C#</strong>，编译器从每个 <code>.proto</code>文件生成一个<code>.cs</code>文件，文件中每种 message 类型都有一个类。</li><li>对于<strong>Dart</strong>，编译器生成一个<code>.pb.dart</code>文件 ，文件中每种 message 类型都有一个类。</li></ul><p>你可以通过学习所选语言的教程(proto3 版本即将推出)，了解更多关于使用每种语言的 API 的信息。 有关 API 的更多细节，请参阅相关的 <a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="external nofollow noopener noreferrer">API 参考</a>(proto3 版本也即将推出)。</p><h2 id="标量值类型"><a href="#标量值类型" class="headerlink" title="标量值类型"></a>标量值类型</h2><p>标量 message 字段可以为以下类型之一。该表显示了<code>.proto</code>文件的类型，以及自动生成类中的对应类型:</p><table><thead><tr><th align="left">.proto 类型</th><th align="left">说明</th><th align="left">C++类型</th><th align="left">Java 类型</th><th align="left">Pythonl 类型[2]</th><th align="left">Go 类型</th><th align="left">Ruby 类型</th><th align="left">C# 类型</th><th align="left">PHP 类型</th><th align="left">Dart 类型</th></tr></thead><tbody><tr><td align="left">double</td><td align="left"></td><td align="left">double</td><td align="left">double</td><td align="left">float</td><td align="left">float64</td><td align="left">Float</td><td align="left">double</td><td align="left">float</td><td align="left">double</td></tr><tr><td align="left">float</td><td align="left"></td><td align="left">float</td><td align="left">float</td><td align="left">float</td><td align="left">float32</td><td align="left">Float</td><td align="left">float</td><td align="left">float</td><td align="left">double</td></tr><tr><td align="left">int32</td><td align="left">使用变长编码。 对负数进行编码效率不高——如果字段可能具有负值，则使用 sint32。</td><td align="left">int32</td><td align="left">int</td><td align="left">int</td><td align="left">int32</td><td align="left">Fixnum 或 Bignum (as required)</td><td align="left">int</td><td align="left">integer</td><td align="left">int</td></tr><tr><td align="left">int64</td><td align="left">使用变长编码。 对负数进行编码效率不高——如果字段可能具有负值，则使用 sint64。</td><td align="left">int64</td><td align="left">long</td><td align="left">int/long[3]</td><td align="left">int64</td><td align="left">Bignum</td><td align="left">long</td><td align="left">integer/string[5]</td><td align="left">Int64</td></tr><tr><td align="left">uint32</td><td align="left">使用变长编码。</td><td align="left">uint32</td><td align="left">int[1]</td><td align="left">int/long[3]</td><td align="left">uint32</td><td align="left">Fixnum 或 Bignum (as required)</td><td align="left">uint</td><td align="left">integer</td><td align="left">int</td></tr><tr><td align="left">uint64</td><td align="left">使用变长编码。</td><td align="left">uint64</td><td align="left">long[1]</td><td align="left">int/long[3]</td><td align="left">uint64</td><td align="left">Bignum</td><td align="left">ulong</td><td align="left">integer/string[5]</td><td align="left">Int64</td></tr><tr><td align="left">sint32</td><td align="left">使用变长编码。有符号的 int 值。与常规 int32 相比，它们更有效地编码负数。</td><td align="left">int32</td><td align="left">int</td><td align="left">int</td><td align="left">int32</td><td align="left">Fixnum 或 Bignum (as required)</td><td align="left">int</td><td align="left">integer</td><td align="left">int</td></tr><tr><td align="left">sint64</td><td align="left">使用变长编码。有符号的 int 值。与常规 int64 相比，它们更有效地编码负数。</td><td align="left">int64</td><td align="left">long</td><td align="left">int/long[3]</td><td align="left">int64</td><td align="left">Bignum</td><td align="left">long</td><td align="left">integer/string[5]</td><td align="left">Int64</td></tr><tr><td align="left">fixed32</td><td align="left">总是 4 个字节。如果值通常大于 2^28，则比 uint32 更有效。</td><td align="left">uint32</td><td align="left">int[1]</td><td align="left">int/long[3]</td><td align="left">uint32</td><td align="left">Fixnum 或 Bignum (as required)</td><td align="left">uint</td><td align="left">integer</td><td align="left">int</td></tr><tr><td align="left">fixed64</td><td align="left">总是 8 个字节。如果值通常大于 2^56，则比 uint64 更有效。</td><td align="left">uint64</td><td align="left">long[1]</td><td align="left">int/long[3]</td><td align="left">uint64</td><td align="left">Bignum</td><td align="left">ulong</td><td align="left">integer/string[5]</td><td align="left">Int64</td></tr><tr><td align="left">sfixed32</td><td align="left">总是 4 个字节。</td><td align="left">int32</td><td align="left">int</td><td align="left">int</td><td align="left">int32</td><td align="left">Fixnum 或 Bignum (as required)</td><td align="left">int</td><td align="left">integer</td><td align="left">int</td></tr><tr><td align="left">sfixed64</td><td align="left">总是 8 个字节</td><td align="left">int64</td><td align="left">long</td><td align="left">int/long[3]</td><td align="left">int64</td><td align="left">Bignum</td><td align="left">long</td><td align="left">integer/string[5]</td><td align="left">Int64</td></tr><tr><td align="left">bool</td><td align="left"></td><td align="left">bool</td><td align="left">boolean</td><td align="left">bool</td><td align="left">bool</td><td align="left">TrueClass/FalseClass</td><td align="left">bool</td><td align="left">boolean</td><td align="left">bool</td></tr><tr><td align="left">string</td><td align="left">string 必须始终包含 UTF-8 编码的或 7 位 ASCII 文本，并且不能长于 2^32。</td><td align="left">string</td><td align="left">String</td><td align="left">str/unicode[4]</td><td align="left">string</td><td align="left">String (UTF-8)</td><td align="left">string</td><td align="left">string</td><td align="left">String</td></tr><tr><td align="left">bytes</td><td align="left">可以包含不超过 2^32 的任意字节序列。</td><td align="left">string</td><td align="left">ByteString</td><td align="left">str</td><td align="left">[]byte</td><td align="left">String (ASCII-8BIT)</td><td align="left">ByteString</td><td align="left">string</td><td align="left">List</td></tr></tbody></table><p>在使用 <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="external nofollow noopener noreferrer">Protocol Buffer Encoding</a> 序列化 message 时，可以了解有关这些类型如何编码的更多信息。</p><p>[1]在 Java 中，无符号的 32 位和 64 位整数使用它们的有符号对应项来表示，顶部位只是存储在有符号位中。</p><p>[2]在所有情况下，为字段设置值将执行类型检查以确保其有效。</p><p>[3]64 位或无符号的 32 位整数在被解码时总是被表示为等长的，但是如果在设置字段时给出一个 int，则可以是一个 int。 在所有情况下，值必须与设置时表示的类型相匹配。 见[2]。</p><p>[4] Python 字符串在解码时表示为 unicode，但如果给出了 ASCII 字符串，则可以表示为 str (这可能会更改)。</p><p>[5] 整数用于 64 位机器，字符串用于 32 位机器。</p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>当解析 message 时，如果编码 message 不包含特定的 singular 元素，则解析对象中的相应字段将设置为该字段的默认值。 这些默认值是根据类型指定的:</p><ul><li>对于字符串，默认值为空字符串。</li><li>对于字节，默认值为空字节。</li><li>对于 bools，默认值为 false。</li><li>对于数值类型，默认值为零。</li><li>对于<a href="https://developers.google.com/protocol-buffers/docs/proto3#enum" target="_blank" rel="external nofollow noopener noreferrer">枚举类型</a>, 默认值为<strong>第一个定义的枚举值</strong>, 那一定是 0。</li><li>对于 message 的字段，未设置该字段。其确切值依赖于用什么语言。请参见<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="external nofollow noopener noreferrer">代码生成指南</a>了解详情</li></ul><p>重复字段的默认值为空(通常是对应语言中的空列表)。</p><blockquote><p>请注意，对于标量 message 字段，一旦 message 被解析，就无法判断字段是否显式设置为默认值(例如将布尔值设置为 false)：在定义 message 类型时应该牢记这一点。例如，如果不希望默认情况下也发生这种行为，则在将布尔值设置为“ false”时，该布尔值不会开启某些行为。还要注意，如果将标量 message 字段设置为其默认值，则该值在过程中将不会被序列化。</p></blockquote><p>有关代码的默认生成方式的更多详细信息，请参阅所选语言的 <a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="external nofollow noopener noreferrer">代码生成指南</a>。</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>在定义 message 类型时，可能希望其中一个字段只具有一个预定义的值列表。 例如，假设想为每个 <code>SearchRequest</code> 添加一个<code>corpus</code>字段，其中<code>corpus</code>可以是 <code>UNIVERSAL</code>、 <code>WEB</code>、 <code>IMAGES</code>、 <code>LOCAL</code>、 <code>NEWS</code>、 <code>PRODUCTS</code> 或 <code>VIDEO</code>。 可以通过在 message 定义中添加一个<code>enum</code> ，为每个可能的值添加一个常量来非常简单地完成这项工作。</p><p>在下面的例子中，添加了一个名为 <code>Corpus</code> 的<code>enum</code> ，包含所有可能的值，以及一个类型为 <code>Corpus</code> 的字段:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">message SearchRequest &#123;</span><br><span class="line">  string query &#x3D; 1;</span><br><span class="line">  int32 page_number &#x3D; 2;</span><br><span class="line">  int32 result_per_page &#x3D; 3;</span><br><span class="line">  enum Corpus &#123;</span><br><span class="line">    UNIVERSAL &#x3D; 0;</span><br><span class="line">    WEB &#x3D; 1;</span><br><span class="line">    IMAGES &#x3D; 2;</span><br><span class="line">    LOCAL &#x3D; 3;</span><br><span class="line">    NEWS &#x3D; 4;</span><br><span class="line">    PRODUCTS &#x3D; 5;</span><br><span class="line">    VIDEO &#x3D; 6;</span><br><span class="line">  &#125;</span><br><span class="line">  Corpus corpus &#x3D; 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，<code>Corpus</code> 枚举的第一个常量映射为零：每个 enum 定义<strong>必须</strong>包含一个常量，该常量映射为零作为它的第一个元素。 这是因为:</p><ul><li>必须有一个零值，这样就可以将 0 作为一个数值<a href="https://developers.google.com/protocol-buffers/docs/proto3#default" target="_blank" rel="external nofollow noopener noreferrer">默认值</a>.</li><li>零值必须是第一个元素，以便与<a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="external nofollow noopener noreferrer">proto2</a>语义兼容，其中第一个枚举值总是默认值。</li></ul><p>可以通过将相同的值分配给不同的枚举常量来定义别名。 为此，需要将 <code>allow_alias</code> 选项设置为 <code>true</code>，否则当发现别名时，protocol buffer 编译器将生成错误的 message。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">message MyMessage1 &#123;</span><br><span class="line">  enum EnumAllowingAlias &#123;</span><br><span class="line">    option allow_alias &#x3D; true;</span><br><span class="line">    UNKNOWN &#x3D; 0;</span><br><span class="line">    STARTED &#x3D; 1;</span><br><span class="line">    RUNNING &#x3D; 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">message MyMessage2 &#123;</span><br><span class="line">  enum EnumNotAllowingAlias &#123;</span><br><span class="line">    UNKNOWN &#x3D; 0;</span><br><span class="line">    STARTED &#x3D; 1;</span><br><span class="line">    &#x2F;&#x2F; RUNNING &#x3D; 1;  &#x2F;&#x2F; 取消这一行的注释将导致 Google 内部编译错误和外部警告message。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举数常数必须在 32 位整数的范围内。 由于<code>enum</code> 值在过程中使用 <a href="https://developers.google.com/protocol-buffers/docs/encoding" target="_blank" rel="external nofollow noopener noreferrer">变长编码</a>，负值效率低，因此不推荐使用。 可以在 message 定义中定义<code>enum</code> (如上面的例子所示) ，也可以在<code>.proto</code>文件的 message 定义中重用这些<code>enum</code> 。 还可以使用 <code>_MessageType_._EnumType_</code>. 语法将一条 message 中声明的<code>enum</code> 类型用作另一条不同的 message 中的字段类型。</p><p>对象运行 protocol buffer 编译器时。 如果 <code>.proto</code>使用<code>enum</code>，那么生成的代码将有一个对应于 Java 或 C++ 的<code>enum</code> ，对于 Python，会创建一个特殊 <code>EnumDescriptor</code> 类，用于在运行时生成的类中创建一组带有整数值的符号常量。</p><blockquote><p><strong>警告：</strong> 生成的代码可能受到特定语言的枚举数限制(低于千)。 请检查计划使用的语言的限制。</p></blockquote><p>尽管当 message 被反序列化时，枚举值的表示方式依赖于语言，在过程中，无法识别的枚举值将被保留在 message 中。 在支持值超出指定符号范围(如 C++ 和 Go)的开放枚举类型的语言中，未知枚举值仅存储为其底层的整数表示形式。 在如 Java 这样具有封闭枚举类型的语言中，枚举中的一个实例用于表示一个无法识别的值，并且底层的整数可以通过特殊的访问器访问。 在这两种情况下，如果 message 被序列化，那么不可识别的值仍然会与 message 一起被序列化。</p><p>有关如何在应用程序中使用 message<code>enum</code>的详细信息，请参阅为所选语言<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="external nofollow noopener noreferrer">代码生成指南</a>。</p><h3 id="保留值"><a href="#保留值" class="headerlink" title="保留值"></a>保留值</h3><p>如果通过完全删除 enum 条目或注释掉该类型来<a href="https://developers.google.com/protocol-buffers/docs/proto3#updating" target="_blank" rel="external nofollow noopener noreferrer">更新</a>enum 类型，那么未来的使用者在对该类型进行更新时可能会重用该数值。如果加载旧版本的相同<code>.proto</code>文件， 会导致严重的问题，包括数据损坏，隐私漏洞等等。 确保不发生这种情况的一种方法是保留已删除条目的数值(或名称，这也可能导致 JSON 序列化问题)。 如果任何未来的使用者试图使用这些标识符，protocol buffer 编译器将报错。 可以使用 <code>max</code> 关键字指定保留的数值范围最大值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum Foo &#123;</span><br><span class="line">  reserved 2, 15, 9 to 11, 40 to max;</span><br><span class="line">  reserved &quot;FOO&quot;, &quot;BAR&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，不能在相同的<code>reserved</code> 语句中混合字段名和数值。</p></blockquote><h2 id="使用其他-message-类型"><a href="#使用其他-message-类型" class="headerlink" title="使用其他 message 类型"></a>使用其他 message 类型</h2><p>可以使用其他 message 类型作为字段类型。 例如，希望在每个 <code>SearchResponse</code> message 中包含 <code>Result</code> message——为此，可以在同一个 message 中定义 <code>Result</code> message 类型。 然后在 <code>SearchResponse</code> 中指定 <code>Result</code>类型的字段:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">message SearchResponse &#123;</span><br><span class="line">  repeated Result results &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Result &#123;</span><br><span class="line">  string url &#x3D; 1;</span><br><span class="line">  string title &#x3D; 2;</span><br><span class="line">  repeated string snippets &#x3D; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入定义"><a href="#导入定义" class="headerlink" title="导入定义"></a>导入定义</h3><p>在上面的示例中，<code>Result</code> message 类型定义与 <code>SearchResponse</code> 在相同的文件中。如果要用作字段类型的 message 类型是在另一个<code>.proto</code>文件中定义的，该怎么办？</p><p>可以通过<em>导入</em>来使用其他<code>.proto</code>文件的定义。 为了引用其他 <code>.proto</code>文件的的定义，可以在文件顶部添加一个 import 语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;myproject&#x2F;other_protos.proto&quot;;</span><br></pre></td></tr></table></figure><p>默认情况下，只能使用直接导入的<code>.proto</code>文件中的定义。 但是，有时可能需要将<code>.proto</code>文件移动到新位置。现在，无需在直接移动<code>.proto</code>文件并更新所有调用位置，而是可以在旧位置放置一个虚拟<code>.proto</code>文件，以便使用<code>import public</code>将所有导入转发到新位置。任何导入包含 <code>import public</code> 声明的<code>.proto</code>文件都可以过渡地依赖 <code>import public</code> 依赖项。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; new.proto</span><br><span class="line">&#x2F;&#x2F; 所有的定义都移动到了这里</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; old.proto</span><br><span class="line">&#x2F;&#x2F; 这是所有client都要导入的proto。</span><br><span class="line">import public &quot;new.proto&quot;;</span><br><span class="line">import &quot;other.proto&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; client.proto</span><br><span class="line">import &quot;old.proto&quot;;</span><br><span class="line">&#x2F;&#x2F; 可以使用 old.proto 和 new.proto 内的定义，但不可以使用 other.proto内的定义</span><br></pre></td></tr></table></figure><p>protocol buffer 编译器使用<code>-I</code>/<code>--proto_path</code> 标志在命令行上指定的一组目录中搜索导入的文件。 如果没有给出标志，则查看调用编译器的目录。 一般来说，应该将 – proto path 标志设置为项目的根目录，并对所有导入使用绝对路径名。</p><h3 id="使用-proto2-message-类型"><a href="#使用-proto2-message-类型" class="headerlink" title="使用 proto2 message 类型"></a>使用 proto2 message 类型</h3><p>可以在 proto3 message 中导入<a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="external nofollow noopener noreferrer">proto2</a> message 类型并使用它们，反之亦然。 然而，proto2 enums 不能直接在 proto3 语法中使用(但是导入的 proto2 message 可以使用它们)。</p><h2 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h2><p>可以在其他 message 类型中定义和使用 message 类型，如下面的例子，这里的结果<code>Result</code>message 是在 <code>SearchResponse</code> message 中定义的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">message SearchResponse &#123;</span><br><span class="line">  message Result &#123;</span><br><span class="line">    string url &#x3D; 1;</span><br><span class="line">    string title &#x3D; 2;</span><br><span class="line">    repeated string snippets &#x3D; 3;</span><br><span class="line">  &#125;</span><br><span class="line">  repeated Result results &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要在其父 message 类型之外重用此 message 类型，则使用 <code>_Parent_._Type_</code>来引用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message SomeOtherMessage &#123;</span><br><span class="line">  SearchResponse.Result result &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以随心所欲地将 message 深度嵌套:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">message Outer &#123;                  &#x2F;&#x2F; 级别 0</span><br><span class="line">  message MiddleAA &#123;  &#x2F;&#x2F; 级别 1</span><br><span class="line">    message Inner &#123;   &#x2F;&#x2F; 级别 2</span><br><span class="line">      int64 ival &#x3D; 1;</span><br><span class="line">      bool  booly &#x3D; 2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  message MiddleBB &#123;  &#x2F;&#x2F; 级别 1</span><br><span class="line">    message Inner &#123;   &#x2F;&#x2F; 级别 2</span><br><span class="line">      int32 ival &#x3D; 1;</span><br><span class="line">      bool  booly &#x3D; 2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新一个-message-类型"><a href="#更新一个-message-类型" class="headerlink" title="更新一个 message 类型"></a>更新一个 message 类型</h2><p>如果现有的 message 类型不再满足所有需要——例如，希望 message 格式有一个额外的字段——但是仍然希望使用旧格式创建的代码，不要担心！ 在不破坏任何现有代码的情况下更新 message 类型非常简单。 只要记住以下规则:</p><ul><li>不要更改任何现有的字段编号。</li><li>如果添加新字段，那么任何使用“旧”message 格式通过代码序列化的 message 仍然可以通过新生成的代码进行解析。应记住这些元素的<a href="https://developers.google.com/protocol-buffers/docs/proto3#default" target="_blank" rel="external nofollow noopener noreferrer">默认值</a>，以便新代码可以与旧代码生成的 message 正确交互。同样，由新代码创建的 message 也可以由旧代码解析：旧的二进制文件在解析时只会忽略新字段。有关详细信息，请参见“<a href="https://developers.google.com/protocol-buffers/docs/proto3#unknowns" target="_blank" rel="external nofollow noopener noreferrer">未知字段</a>”部分。</li><li>只要在更新的 message 类型中不再使用该字段号，就可以删除字段。可能想要重命名该字段，或者添加前缀“ OBSOLETE_”，或者<a href="https://developers.google.com/protocol-buffers/docs/proto3#reserved" target="_blank" rel="external nofollow noopener noreferrer">保留</a>该字段编号，确保该<code>.proto</code>的未来使用者不会意外重用该编号。</li><li><code>int32</code>, <code>uint32</code>, <code>int64</code>, <code>uint64</code>, and ，及<code>bool</code> 都是兼容的——这意味着可以在不破坏向前或向后兼容性的情况下将字段从这些类型中的一个更改为另一个。 如果一个数字从不适合相应类型中解析出来，会得到与在 C++ 中将数字转换为该类型相同的效果(例如，如果一个 64 位的数字被读为 <code>int32</code>，它将被截断为 32 位)。</li><li><code>sint32</code>和<code>sint64</code>互相兼容，但是<em>不</em> 与其他整数类型兼容。</li><li>只要字节是有效的 UTF-8，<code>string</code>和<code>bytes</code>就可以互相兼容。</li><li>如果<code>bytes</code>包含 message 的编码版本，则嵌入的 message 与<code>bytes</code>兼容。</li><li><code>fixed32</code> 与 <code>sfixed32</code>互相兼容，<code>fixed64</code>与 <code>sfixed64</code>也互相兼容。</li><li>对于<code>string</code>、<code>bytes</code>和 message 字段，<code>optional</code> 字段与<code>repeated</code>字段兼容。 给定<code>repeated</code>字段的序列化数据作为输入，如果该字段是基本类型字段，期望该字段为<code>optional</code>字段的客户端将接受最后一个输入值; 如果该字段是 message 类型字段，则合并所有输入元素。 注意，对于数字类型(也包括 bool 和 enum) ，这通常是<strong>不</strong>安全的。 可以按<a href="https://developers.google.com/protocol-buffers/docs/non-packable/protocol-buffers/docs/encoding#packed" target="_blank" rel="external nofollow noopener noreferrer">打包</a>的格式序列化<code>repeated</code>的数值类型字段，如果需要<code>optional</code>字段，则无法正确解析这些字段。</li><li><code>enum</code> 与 <code>int32</code>，<code>uint32</code>， <code>int64</code>，和 <code>uint64</code> 兼容（注意若值不匹配会被截断）。但要注意当客户端反序列化 message 时会采用不同的处理方案：例如，未识别的 proto3 <code>enum</code> 类型会被保存在 message 中，但是当 message 反序列化时如何表示是依赖于编程语言的。整型字段总是会保持其的值。</li><li>将单个值更改为新值的成员是安全的，并且是二进制兼容的。 如果确保没有代码一次设置多个字段，那么将多个字段移动到新的字段中可能是安全的。 将任何字段移动到现有的字段中都是不安全的。</li><li>将一个单独值更改为<strong>新</strong>的 <code>oneof</code> 类型成员之一是安全并且兼容二进制的。 若确定没有代码一次性设置多个字段，那么将多个字段移入一个新 <code>oneof</code> 类型也是可行的。将任何字段移入已存在的 <code>oneof</code> 类型是不安全的。</li></ul><h2 id="未知字段"><a href="#未知字段" class="headerlink" title="未知字段"></a>未知字段</h2><p>protocol buffer 序列化数据格式良好，但是解析器不能识别的字段为未知字段。 例如，当旧二进制解析由新二进制发送的带有新字段的数据时，这些新字段将成为旧二进制中的未知字段。</p><p>最初，proto3 message 在解析过程中总是丢弃未知字段，但在 3.5 版本中，重新引入了未知字段的保存机制来匹配 proto2 行为。 在 3.5 及以后的版本中，解析器保留未知字段，并将其包含在序列化输出中。</p><h2 id="Any-类型"><a href="#Any-类型" class="headerlink" title="Any 类型"></a>Any 类型</h2><p>Any message 类型允许将 message 作为嵌入类型使用，而不需要 .proto 文件定义。 一个 <code>Any</code> 包含一个类似 <code>bytes</code> 的任意序列化 message，以及一个 URL 来作为解析 message 类型的全局唯一标识符。 若要使用 Any 类型，需要 <a href="https://developers.google.com/protocol-buffers/docs/proto3#other" target="_blank" rel="external nofollow noopener noreferrer">导入</a> <code>google/protobuf/any.proto</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &quot;google&#x2F;protobuf&#x2F;any.proto&quot;;</span><br><span class="line"></span><br><span class="line">message ErrorStatus &#123;</span><br><span class="line">  string message &#x3D; 1;</span><br><span class="line">  repeated google.protobuf.Any details &#x3D; 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于给定的 message 类型的默认 URL 为 <code>type.googleapis.com/packagename.messagename</code> 。</p><p>不同的语言实现会支持运行时的助手函数来完成类型安全地 <code>Any</code> 值的打包和拆包工作——例如，Java 中，<code>Any</code> 类型会存在特定的 <code>pack()</code> 和 <code>unpack()</code> 访问器，而 C++ 中会是 <code>PackFrom()</code> 和 <code>UnpackTo()</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在Any中存储任意一个message类型。</span><br><span class="line">NetworkErrorDetails details &#x3D; ...;</span><br><span class="line">ErrorStatus status;</span><br><span class="line">status.add_details()-&gt;PackFrom(details);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 从Any中读取任意一个message类型。</span><br><span class="line">ErrorStatus status &#x3D; ...;</span><br><span class="line">for (const Any&amp; detail : status.details()) &#123;</span><br><span class="line">  if (detail.Is()) &#123;</span><br><span class="line">    NetworkErrorDetails network_error;</span><br><span class="line">    detail.UnpackTo(&amp;network_error);</span><br><span class="line">    ... processing network_error ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当前处理 Any 类型的运行库正在开发中</strong></p><p>若你已经熟悉了 proto2 语法，Any 类型的位于 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Fproto%23extensions" target="_blank" rel="external nofollow noopener noreferrer">扩展</a> 部分。</p><h2 id="Oneof"><a href="#Oneof" class="headerlink" title="Oneof"></a>Oneof</h2><p>如果有一条包含许多字段的 message，并且最多同时设置一个字段，那么可以通过使用 oneof 特性来强制执行此行为同时节省内存。</p><p>Oneof 字段类似于常规字段，只不过共享内存中的 oneof 字段中的所有字段都是常规字段，而且最多可以同时设置一个字段。 设置其中的任何成员都会自动清除所有其他成员。 可以使用<code>case()</code> 或 <code>WhichOneof()</code>方法检查 oneof 值是否已设置，这取决于选择的语言。</p><h3 id="使用-Oneof"><a href="#使用-Oneof" class="headerlink" title="使用 Oneof"></a>使用 Oneof</h3><p>使用 <code>oneof</code> 关键字在 .proto 文件中定义 oneof，同时需要跟随一个 oneof 的名字，就像本例中的 <code>test_oneof</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">message SampleMessage &#123;</span><br><span class="line">  oneof test_oneof &#123;</span><br><span class="line">    string name &#x3D; 4;</span><br><span class="line">    SubMessage sub_message &#x3D; 9;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将字段添加到 oneof 的定义中。可以增加任意类型的字段，但不能使用 <code>map</code> 和 <code>repeated</code>字段。</p><p>在生成的代码中，oneof 字段和常规字段一致具有 getters 和 setters 。同时也会获得一个方法以用于检测哪个值被设置。更多所选编程语言中关于 oneof 的 API 可以参考 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Foverview" target="_blank" rel="external nofollow noopener noreferrer">API 参考</a> 。</p><h3 id="Oneof-特点"><a href="#Oneof-特点" class="headerlink" title="Oneof 特点"></a>Oneof 特点</h3><ul><li><p>设置一个字段将自动清除该字段的所有其他成员。 因此，如果您设置了多个 oneof 字段，那么只有<em>最后</em>设置的字段生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SampleMessage message;</span><br><span class="line">message.set_name(&quot;name&quot;);</span><br><span class="line">CHECK(message.has_name());</span><br><span class="line">message.mutable_sub_message();   &#x2F;&#x2F; 将会清空name字段</span><br><span class="line">CHECK(!message.has_name());</span><br></pre></td></tr></table></figure></li><li><p>若解析器在解析得到的数据时碰到了多个 oneof 的成员，最后一个的是最终结果。</p></li><li><p>oneof 不能是 <code>repeated</code>。</p></li><li><p>反射 API 可作用于 oneof 字段。</p></li><li><p>若将一个 oneof 字段设为了默认值（就像为 int32 类型设置了 0 ），那么 oneof 字段会被设置为 “case”，同时在序列化编码时使用。</p></li><li><p>若使用 C++ ，确认代码不会造成内存崩溃。以下的示例代码就会导致崩溃，因为 <code>sub_message</code> 在调用 <code>set_name()</code> 时已经被删除了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SampleMessage message;</span><br><span class="line">SubMessage* sub_message &#x3D; message.mutable_sub_message();</span><br><span class="line">message.set_name(&quot;name&quot;);      &#x2F;&#x2F; 将会删除 sub_message</span><br><span class="line">sub_message-&gt;set_...            &#x2F;&#x2F; 此处崩溃</span><br></pre></td></tr></table></figure></li><li><p>同样在 C++ 中，若 <code>Swap()</code> 两个 oneof message，那么 message 会以另一个 message 的 oneof 的情况：下例中，<code>msg1</code>会是 <code>sub_message1</code> 而 <code>msg2</code> 中会是 <code>name</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SampleMessage msg1;</span><br><span class="line">msg1.set_name(&quot;name&quot;);</span><br><span class="line">SampleMessage msg2;</span><br><span class="line">msg2.mutable_sub_message();</span><br><span class="line">msg1.swap(&amp;msg2);</span><br><span class="line">CHECK(msg1.has_sub_message());</span><br><span class="line">CHECK(msg2.has_name());</span><br></pre></td></tr></table></figure></li></ul><h3 id="向后兼容性问题"><a href="#向后兼容性问题" class="headerlink" title="向后兼容性问题"></a>向后兼容性问题</h3><p>添加或删除一个字段时要注意。 若检测到 oneof 的值是 <code>None</code>/<code>NOT_SET</code>，这意味着 oneof 未被设置或被设置为一个不同版本的 oneof 字段。没有方法可以区分，因为无法确定一个未知字段是否是 oneof 的成员。</p><h4 id="重用问题"><a href="#重用问题" class="headerlink" title="重用问题"></a>重用问题</h4><ul><li><strong>移入或移出 oneof 字段</strong>： message 序列化或解析后，可能会丢失一些信息（某些字段将被清除）。但是可以安全地将单个字段移入新的 oneof 中，如果确定每次操作只有一个字段被设置则可以移动多个字段。</li><li><strong>删除一个 oneof 字段并又将其加回</strong>： message 序列化和解析后，可能会清除当前设置的 oneof 字段。</li><li><strong>拆分或合并 oneof</strong>：这与移动常规字段有相似的问题。</li></ul><h2 id="Map-映射"><a href="#Map-映射" class="headerlink" title="Map 映射"></a>Map 映射</h2><p>若需要创建关联映射表作为定义的数据的一部分，protocol buffers 提供了方便的快捷语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map map_field &#x3D; N;</span><br></pre></td></tr></table></figure><p>其中<code>key_type</code>可以是任何整型或字符串类型(因此，除了浮点类型和 bytes 之外的任何<a href="https://developers.google.com/protocol-buffers/docs/proto3#scalar" target="_blank" rel="external nofollow noopener noreferrer">标量</a>类型)。 注意，enum 不是有效的<code>key_type</code>。 <code>value_type</code> 可以是除 map 以外的任何类型。</p><p>例如，如果想创建一个项目映射，其中每个<code>Project</code> message 都与一个字符串键相关联，可以这样定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map projects &#x3D; 3;</span><br></pre></td></tr></table></figure><ul><li>map 字段不能为 <code>repeated</code></li><li>映射表的编码和迭代顺序是未定义的，因此不能依赖映射表元素的顺序来操作。</li><li>当基于 .proto 生成文本格式时，映射表的元素基于 key 来排序。数值型的 key 基于数值排序。</li><li>当解析或合并时，若出现冲突的 key 以最后一个 key 为准。当从文本格式解析时，若 key 冲突则会解析失败。</li><li>若仅仅指定了映射表中某个元素的 key 而没有指定 value，当序列化时的行为是依赖于编程语言。在 C++，Java，和 Python 中使用类型的默认值来序列化，但在有些其他语言中可能不会序列化任何东西。</li></ul><p>The generated map API is currently available for all proto3 supported languages. You can find out more about the map API for your chosen language in the relevant <a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="external nofollow noopener noreferrer">API reference</a>.</p><p>生成的映射表 API 目前可用于所有支持 proto3 的语言。 可以在相关的 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Foverview" target="_blank" rel="external nofollow noopener noreferrer">API 参考</a>中找到更多关于所选语言的映射表 API 的信息。</p><h3 id="向后兼容性"><a href="#向后兼容性" class="headerlink" title="向后兼容性"></a>向后兼容性</h3><p>映射表语法与以下代码是对等的，因此 protocol buffers 的实现即使不支持映射表也可以正常处理数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">message MapFieldEntry &#123;</span><br><span class="line">  key_type key &#x3D; 1;</span><br><span class="line">  value_type value &#x3D; 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeated MapFieldEntry map_field &#x3D; N;</span><br></pre></td></tr></table></figure><p>任何支持映射表的 protocol buffers 实现都必须同时处理和接收上面代码的数据定义。</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>可以向<code>.proto</code>文件添加一个可选<code>package</code>说明符，以防止 protocol message 类型之间的名称冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package foo.bar;</span><br><span class="line">message Open &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>然后，可以在定义 message 类型的字段时使用<code>package</code>说明符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">message Foo &#123;</span><br><span class="line">  ...</span><br><span class="line">  foo.bar.Open open &#x3D; 1;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包说明符生成代码的方式取决于选择的语言:</p><ul><li>C++ 中生成的类位于命名空间中。例如，<code>Open</code> 会位于命名空间 <code>foo::bar</code> 中。</li><li>Java 中，使用 Java 的包，除非在 .proto 文件中使用 <code>option java_pacakge</code> 做成明确的指定。</li><li>Python 中，package 说明符被忽略，这是因为 Python 的模块是基于文件系统的位置来组织的。</li><li>Go 中，作为 Go 的包名来使用，除非在 .proto 文件中使用 <code>option java_pacakge</code> 做成明确的指定。</li><li>Ruby 中，生成的类包裹于 Ruby 的命名空间中，还要转换为 Ruby 所需的大小写风格（首字母大写；若首字符不是字母，则使用 <code>PB_</code> 前缀）。例如，<code>Open</code> 会位于命名空间 <code>Foo::Bar</code> 中。</li><li>C# 中作为命名空间来使用，同时需要转换为 PascalCase 风格，除非在 .proto 使用 <code>option csharp_namespace</code> 中明确的指定。例如，<code>Open</code> 会位于命名空间 <code>Foo.Bar</code> 中。</li></ul><h3 id="包名解析"><a href="#包名解析" class="headerlink" title="包名解析"></a>包名解析</h3><p>在 protocol buffer 语言中，类型名称解析的工作原理类似于 C++ : 首先搜索最内层的作用域，然后搜索次内层的作用域，依此类推，每个包都被认为是其父包的“内层”。 开始的’.‘ (例如:.foo.bar.Baz) 意思是从最外层开始。</p><p>protocol buffer 编译器通过解析导入 .proto 文件中的全部类型名称。即使有不同的作用域规则，每种语言的代码生成器都知道如何引用该语言中的每种类型。</p><h2 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h2><p>如果希望将 message 类型与 RPC (远程过程调用)系统一起使用，可以在.proto 文件定义一个 RPC 服务接口，protocol buffer 编译器将用选择的语言生成服务接口代码。 例如，如果您希望定义一个 RPC 服务，使其接受 <code>SearchRequest</code>并返回一个 <code>SearchResponse</code>，可以在<code>.proto</code>文件如下定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service SearchService &#123;</span><br><span class="line">  rpc Search (SearchRequest) returns (SearchResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最简单易用的 RPC 系统就是 <a href="https://grpc.io/" target="_blank" rel="external nofollow noopener noreferrer">gRPC</a>：Google 开发的一个语言和平台无关的开源 RPC 系统。gRPC 特别适用于 protocol buffers，它可以让你直接从你的<code>.proto</code>使用特殊的 protocol buffer 编译器插件生成相关的 RPC 代码。</p><p>如果不想使用 gRPC，也可以在你自己的 RPC 实现中使用 protocol buffe。 可以在<a href="https://developers.google.com/protocol-buffers/docs/proto#services" target="_blank" rel="external nofollow noopener noreferrer">Proto2 语言指南</a>中找到更多相关信息。</p><p>还有一些开发 RPC 实现 Protocol Buffers 的第三方项目。 有关我们所知道的项目的链接列表，请参阅<a href="https://github.com/protocolbuffers/protobuf/blob/master/docs/third_party.md" target="_blank" rel="external nofollow noopener noreferrer">第三方项目 WIKI 页面</a>。</p><h2 id="JSON-映射"><a href="#JSON-映射" class="headerlink" title="JSON 映射"></a>JSON 映射</h2><p>Proto3 支持 JSON 的编码规范，使得不同系统之间更容易共享数据。 下表按类型逐一描述这些编码。</p><p>若 JSON 编码中不存在某个值或者值为 null，当将其解析为 protocol buffer 时会解析为合适的默认值。若 procol buffer 中使用的是字段的默认值，则默认情况下 JSON 编码会忽略该字段以便于节省空间。实现上应该提供一个选项以用来将具有默认值的字段生成在 JSON 编码中。</p><table><thead><tr><th>proto3</th><th>JSON</th><th>JSON 示例</th><th>说明</th></tr></thead><tbody><tr><td>message</td><td>object</td><td><code>{&quot;fooBar&quot;: v, &quot;g&quot;: null,…}</code></td><td>生成 JSON 对象。message 字段名映射为对象的 lowerCamelCase（译著：小驼峰） 的 key。若指定了 <code>json_name</code> 选项，则使用该选项值作为 key。解析器同时支持 lowerCamelCase 名称（或 <code>json_name</code> 指定名称）和原始 proto 字段名称。全部类型都支持 <code>null</code> 值，是当做对应类型的默认值来对待的。</td></tr><tr><td>enum</td><td>string</td><td><code>&quot;FOO_BAR&quot;</code></td><td>使用 proto 中指定的枚举值的名称。解析器同时接受枚举名称和整数值。</td></tr><tr><td>map&lt;K,V&gt;</td><td>object</td><td>`{“k”: v, …}</td><td>所有的 key 被转换为字符串类型。</td></tr><tr><td>repeated V</td><td>array</td><td><code>[v, …]</code></td><td><code>null</code> 被解释为空列表 []。</td></tr><tr><td>bool</td><td>true, false</td><td><code>true, false</code></td><td></td></tr><tr><td>string</td><td>string</td><td><code>&quot;Hello World!&quot;</code></td><td></td></tr><tr><td>bytes</td><td>base64 string</td><td><code>&quot;YWJjMTIzIT8kKiYoKSctPUB+&quot;</code></td><td>JSON 值是使用标准边界 base64 编码的字符串。不论标准或 URL 安全还是携带边界与否的 base64 编码都支持。</td></tr><tr><td>int32, fixed32, uint32</td><td>number</td><td><code>1, -10, 0</code></td><td>JSON 值是 10 进制数值。数值或字符串都可以支持。</td></tr><tr><td>int64, fixed64, uint64</td><td>string</td><td><code>&quot;1&quot;, &quot;-10&quot;</code></td><td>JSON 值是 10 进制字符串。数值或字符串都支持。</td></tr><tr><td>float, double</td><td>number</td><td><code>1.1, -10.0, 0, &quot;NaN&quot;,&quot;Infinity&quot;</code></td><td>JSON 值是数值或特定的字符串之一：”NaN”，”Infinity” 和 “-Infinity” 。数值和字符串都支持。指数表示法同样支持。</td></tr><tr><td>Any</td><td><code>object</code></td><td><code>{&quot;@type&quot;: &quot;url&quot;, &quot;f&quot;: v, … }</code></td><td>若 Any 类型包含特定的 JSON 映射值，则会被转换为下面的形式： <code>{&quot;@type&quot;: xxx, &quot;value&quot;: yyy}</code>。否则，会被转换到一个对象中，同时会插入一个 <code>&quot;@type&quot;</code> 元素用以指明实际的类型。</td></tr><tr><td>Timestamp</td><td>string</td><td><code>&quot;1972-01-01T10:00:20.021Z&quot;</code></td><td>采用 RFC 3339 格式，其中生成的输出总是 Z 规范的，并使用 0、3、6 或 9 位小数。除 <code>“Z”</code> 以外的偏移量也可以。</td></tr><tr><td>Duration</td><td>string</td><td><code>&quot;1.000340012s&quot;, &quot;1s&quot;</code></td><td>根据所需的精度，生成的输出可能会包含 0、3、6 或 9 位小数，以 “s” 为后缀。只要满足纳秒精度和后缀 “s” 的要求，任何小数（包括没有）都可以接受。</td></tr><tr><td>Struct</td><td><code>object</code></td><td><code>{ … }</code></td><td>任意 JSON 对象。参见 <code>struct.proto</code>.</td></tr><tr><td>Wrapper types</td><td>various types</td><td><code>2, &quot;2&quot;, &quot;foo&quot;, true,&quot;true&quot;, null, 0, …</code></td><td>包装器使用与包装的原始类型相同的 JSON 表示，但在数据转换和传输期间允许并保留 null。</td></tr><tr><td>FieldMask</td><td>string</td><td><code>&quot;f.fooBar,h&quot;</code></td><td>参见<code>field_mask.proto</code>。</td></tr><tr><td>ListValue</td><td>array</td><td><code>[foo, bar, …]</code></td><td></td></tr><tr><td>Value</td><td>value</td><td></td><td>Any JSON value</td></tr><tr><td>NullValue</td><td>null</td><td></td><td>JSON null</td></tr><tr><td>Empty</td><td>object</td><td>{}</td><td>空 JSON 对象</td></tr></tbody></table><h3 id="JSON-选项"><a href="#JSON-选项" class="headerlink" title="JSON 选项"></a>JSON 选项</h3><p>一个 proto3 JSON 实现可能提供以下选项:</p><ul><li><strong>省略使用默认值的字段</strong>：默认情况下，在 proto3 的 JSON 输出中省略具有默认值的字段。该实现可以使用选项来覆盖此行为，来在输出中保留默认值字段。</li><li><strong>忽略未知字段</strong>：默认情况下，proto3 的 JSON 解析器会拒绝未知字段，同时提供选项来指示在解析时忽略未知字段。</li><li><strong>使用 proto 字段名称代替 lowerCamelCase 名称</strong>： 默认情况下，proto3 的 JSON 编码会将字段名称转换为 lowerCamelCase（译著：小驼峰）形式。该实现提供选项可以使用 proto 字段名代替。Proto3 的 JSON 解析器可同时接受 lowerCamelCase 形式 和 proto 字段名称。</li><li><strong>枚举值使用整数而不是字符串表示</strong>： 在 JSON 编码中枚举值是使用枚举值名称的。提供了可以使用枚举值数值形式来代替的选项。</li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>以下是一些最常用的选项:</p><p>.proto 文件中的单个声明可以被一组选项来设置。选项不是用来更改声明的含义，但会影响在特定上下文下的处理方式。完整的选项列表定义在 <code>google/protobuf/descriptor.proto</code> 中。</p><p>有些选项是文件级的，意味着可以卸载顶级作用域，而不是在消息、枚举、或服务的定义中。有些选项是 message 级的，意味着需写在 message 的定义中。有些选项是字段级的，意味着需要写在字段的定义内。选项还可以写在枚举类型，枚举值，oneof 类型，service 类型和 service 方法上；然而，目前还没有任何可用于以上位置的选项。</p><p>下面是几个最常用的选项：</p><ul><li><p><code>java_package</code> （文件选项）：要用在生成 Java 代码中的包。若没有在 .proto 文件中对 <code>java_package</code> 选项做设置，则会使用 proto 作为默认包（在 .proto 文件中使用 “package” 关键字设置）。 然而，proto 包通常不是合适的 Java 包，因为 proto 包通常不以反续域名开始。若不生成 Java 代码，则此选项无效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option java_package &#x3D; &quot;com.example.foo&quot;;</span><br></pre></td></tr></table></figure></li><li><p><code>java_multiple_files</code>（文件选项）：导致将顶级 message、枚举、和服务定义在包级，而不是在以 .proto 文件命名的外部类中。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option java_multiple_files &#x3D; true;</span><br></pre></td></tr></table></figure><ul><li><p><code>java_outer_classname</code>（文件选项）：要生成的最外层 Java 类（也就是文件名）。若没有在 .proto 文件中明确指定 <code>java_outer_classname</code> 选项，类名将由 .proto 文件名转为 camel-case 来构造（因此 <code>foo_bar.proto</code> 会变为 <code>FooBar.java</code>）。若不生成 Java 代码，则此选项无效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option java_outer_classname &#x3D; &quot;Ponycopter&quot;;</span><br></pre></td></tr></table></figure></li><li><p>optimize_for （文件选项）： 可被设为 <code>SPEED</code>， <code>CODE_SIZE</code>，或 <code>LITE_RUNTIME</code>。这会影响 C++ 和 Java 代码生成器（可能包含第三方生成器） 的以下几个方面：</p><ul><li><code>SPEED</code> （默认）： protocol buffer 编译器将生成用于序列化、解析和 message 类型常用操作的代码。生成的代码是高度优化的。</li><li><code>CODE_SIZE</code> ：protocol buffer 编译器将生成最小化的类，并依赖于共享的、基于反射的代码来实现序列化、解析和各种其他操作。因此，生成的代码将比 SPEED 模式小的多，但操作将变慢。类仍将实现与 SPEED 模式相同的公共 API。这种模式在处理包含大量 .proto 文件同时不需要所有操作都要求速度的应用程序中最有用。</li><li><code>LITE_RUNTIME</code> ：protocol buffer 编译器将生成仅依赖于 “lite” 运行库的类（libprotobuf-lite 而不是 libprotobuf）。lite 运行时比完整的库小得多（大约小一个数量级），但会忽略某些特性，比如描述符和反射。这对于在受限平台（如移动电话）上运行的应用程序尤其有用。编译器仍然会像在 SPEED 模式下那样生成所有方法的快速实现。生成的类将仅用每种语言实现 MessageLite 接口，该接口只提供 <code>Message</code> 接口的一个子集。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option optimize_for &#x3D; CODE_SIZE;</span><br></pre></td></tr></table></figure></li><li><p><code>cc_enable_arenas</code>（文件选项）：为生成的 C++ 代码启用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Farenas" target="_blank" rel="external nofollow noopener noreferrer">arena allocation</a> 。</p></li><li><p><code>objc_class_prefix</code> （文件选项）： 设置当前 .proto 文件生成的 Objective-C 类和枚举的前缀。没有默认值。你应该使用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2Fdocumentation%2FCocoa%2FConceptual%2FProgrammingWithObjectiveC%2FConventions%2FConventions.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP40011210-CH10-SW4" target="_blank" rel="external nofollow noopener noreferrer">Apple 建议</a> 的 3-5 个大写字母作为前缀。注意所有 2 个字母前缀都由 Apple 保留。</p></li><li><p><code>deprecated</code> （字段选项）：若设置为 <code>true</code>， 指示该字段已被废弃，新代码不应使用该字段。在大多数语言中，这没有实际效果。在 Java 中，这变成了一个 <code>@Deprecated</code> 注释。将来，其他语言的代码生成器可能会在字段的访问器上生成弃用注释，这将导致在编译试图使用该字段的代码时发出警告。如果任何人都不使用该字段，并且您希望阻止新用户使用它，那么可以考虑使用保留语句替换字段声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int32 old_field &#x3D; 6 [deprecated &#x3D; true];</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义选项"><a href="#自定义选项" class="headerlink" title="自定义选项"></a>自定义选项</h3><p>protocol buffer 还允许使用自定义选项。大多数人都不需要此高级功能。若确认要使用自定义选项，请参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Fproto.html%23customoptions" target="_blank" rel="external nofollow noopener noreferrer">Proto2 语言指导</a> 了解详细信息。注意使用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Fproto.html%23extensions" target="_blank" rel="external nofollow noopener noreferrer">扩展</a> 来创建自定义选项，只允许用于 proto3 中。</p><h2 id="生成自定义类"><a href="#生成自定义类" class="headerlink" title="生成自定义类"></a>生成自定义类</h2><p>若要生成操作 .proto 文件中定义的消息类型的 Java、Python、C++、Go、Ruby、Objective-C 或 C# 代码，需要对 .proto 文件运行 protocol buffer 编译器 <code>protoc</code>。若还没有安装编译器，请 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Fdownloads.html" target="_blank" rel="external nofollow noopener noreferrer">download the package</a> 并依据 README 完成安装。对于 Go ，还需要为编译器安装特定的代码生成器插件：可使用 GitHub 上的 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgolang%2Fprotobuf%2F" target="_blank" rel="external nofollow noopener noreferrer">golang/protobuf</a> 库。</p><p>protocol buffer 编译器的调用方式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --proto_path&#x3D;_IMPORT_PATH_ --cpp_out&#x3D;_DST_DIR_ --java_out&#x3D;_DST_DIR_ --python_out&#x3D;_DST_DIR_ --go_out&#x3D;_DST_DIR_ --ruby_out&#x3D;_DST_DIR_ --objc_out&#x3D;_DST_DIR_ --csharp_out&#x3D;_DST_DIR_ _path&#x2F;to&#x2F;file_.proto</span><br></pre></td></tr></table></figure><ul><li><p><code>IMPORT_PATH</code> 为<code>import</code> 指令检索 .proto 文件的目录。若未指定，使用当前目录。多个导入目录可以通过多次传递 <code>--proto_path</code> 选项实现；这些目录会依顺序检索。 <code>-I=*IMPORT_PATH*</code> 可作为 <code>--proto_path</code> 的简易格式使用。</p></li><li><p>可以提供一个或多个输出指令：</p><ul><li><code>--cpp_out</code> 在 <code>DST_DIR</code>目录 生成 C++ 代码。参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Fcpp-generated" target="_blank" rel="external nofollow noopener noreferrer">C++ generated code reference</a> 获取更多信息。</li><li><code>--java_out</code> 在 <code>DST_DIR</code>目录 生成 Java 代码。参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Fjava-generated" target="_blank" rel="external nofollow noopener noreferrer">Java generated code reference</a> 获取更多信息。</li><li><code>--python_out</code>在 <code>DST_DIR</code>目录 生成 Python 代码。参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Fpython-generated" target="_blank" rel="external nofollow noopener noreferrer">Python generated code reference</a> 获取更多信息。</li><li><code>--go_out</code> 在 <code>DST_DIR</code>目录 生成 Go 代码。参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Fgo-generated" target="_blank" rel="external nofollow noopener noreferrer">Go generated code reference</a> 获取更多信息。</li><li><code>--ruby_out</code> 在 <code>DST_DIR</code>目录 生成 Ruby 代码。 coming soon!</li><li><code>--objc_out</code> 在 <code>DST_DIR</code>目录 生成 Objective-C 代码。参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Fobjective-c-generated" target="_blank" rel="external nofollow noopener noreferrer">Objective-C generated code reference</a> 获取更多信息。</li><li><code>--csharp_out</code> 在 <code>DST_DIR</code>目录 生成 C# 代码。参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Fcsharp-generated" target="_blank" rel="external nofollow noopener noreferrer">C# generated code reference</a> 获取更多信息。</li><li><code>--php_out</code> 在 <code>DST_DIR</code>目录 生成 PHP 代码。参阅 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fprotocol-buffers%2Fdocs%2Freference%2Fphp-generated" target="_blank" rel="external nofollow noopener noreferrer">PHP generated code reference</a> 获取更多信息。作为额外的便利，若 DST_DIR 以 <code>.zip</code> 或 <code>.jar</code> 结尾，编译器将会写入给定名称的 ZIP 格式压缩文件，<code>.jar</code> 还将根据 Java JAR 的要求提供一个 manifest 文件。请注意，若输出文件已经存在，它将被覆盖。编译器还不够智能，无法将文件添加到现有的存档中。</li></ul></li><li><p>必须提供一个或多个<code>.proto</code> 文件作为输入。可以一次指定多个 <code>.proto</code> 文件。虽然这些文件是相对于当前目录命名的，但是每个文件必须驻留在 <code>IMPORT_PATHs</code> 中，以便编译器可以确定它的规范名称。</p></li></ul><h1 id="风格指南"><a href="#风格指南" class="headerlink" title="风格指南"></a>风格指南</h1><p>本文档提供了<code>.proto</code>文件的风格。 通过遵循这些约定，将使 protocol buffer message 定义及其对应的类保持一致并易于阅读。</p><blockquote><p>注意，protocol buffer 样式随着时间的推移而演变，因此可能会看到用不同的约定或样式编写的 .proto 文件。 修改这些文件时，请<strong>使用已有的样式</strong>。 <strong>保持一致性才是关键</strong>。 然而，当创建一个新的.proto 文件时，最好是采用当前的最好的风格。</p></blockquote><h2 id="标准文件格式"><a href="#标准文件格式" class="headerlink" title="标准文件格式"></a>标准文件格式</h2><ul><li>保持行长度为 80 个字符内。</li><li>使用 2 个空格的缩进</li></ul><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>文件应命名为<code>lower_snake_case.proto</code></p><p>所有文件应以下列方式排列:</p><ol><li>许可证头(如果适用)</li><li>文件概览</li><li>语法</li><li>包</li><li>imports(已排序)</li><li>文件选项</li><li>其他</li></ol><h2 id="包-1"><a href="#包-1" class="headerlink" title="包"></a>包</h2><p>包名应该是小写的，并且应该与目录层次结构相对应。 例如，如果一个文件在 <code>my/package/</code>中，那么包名应该是 <code>my.package</code>。</p><h2 id="message-和字段名"><a href="#message-和字段名" class="headerlink" title="message 和字段名"></a>message 和字段名</h2><p>对 message 名使用<code>CamelCase</code> (首字母大写)——例如<code>SongServerRequest</code>。 对字段名使用<code>underscore_separated_names</code>(包括 oneof 字段和 extension 名)——例如<code>song_name</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message SongServerRequest &#123;</span><br><span class="line">  required string song_name &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个字段的命名原则，可以获得如下的访问器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C++:</span><br><span class="line">  const string&amp; song_name() &#123; ... &#125;</span><br><span class="line">  void set_song_name(const string&amp; x) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">Java:</span><br><span class="line">  public String getSongName() &#123; ... &#125;</span><br><span class="line">  public Builder setSongName(String v) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>如果字段名包含数字，数字应该出现在字母之后，而不是下划线之后。 使用 <code>song_name1</code>而不是<code>song_name_1</code>。</p><h2 id="repeated-字段"><a href="#repeated-字段" class="headerlink" title="repeated 字段"></a>repeated 字段</h2><p>对 repeated 字段使用复数名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repeated string keys &#x3D; 1;</span><br><span class="line">...</span><br><span class="line">repeated MyMessage accounts &#x3D; 17;</span><br></pre></td></tr></table></figure><h2 id="枚举类型-1"><a href="#枚举类型-1" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>对枚举类型名使用 <code>CamelCase</code> (首字母大写) ，对值名使用<code>CAPITALS_WITH_UNDERSCORES</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Foo &#123;</span><br><span class="line">  FOO_UNSPECIFIED &#x3D; 0;</span><br><span class="line">  FOO_FIRST_VALUE &#x3D; 1;</span><br><span class="line">  FOO_SECOND_VALUE &#x3D; 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个枚举值应以分号而不是逗号结尾。 应在枚举值前面加上前缀，而不是将它们包围在一个封闭 message 中。 零值枚举应该具有 UNSPECIFIED 后缀。</p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>If your <code>.proto</code> defines an RPC service, you should use CamelCase (with an initial capital) for both the service name and any RPC method names:</p><p>如果<code>.proto</code> 定义了一个 RPC 服务，应该对服务名和任何 RPC 方法名使用 <code>CamelCase</code> (首字母大写) :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service FooService &#123;</span><br><span class="line">  rpc GetSomething(FooRequest) returns (FooResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应避免的事情"><a href="#应避免的事情" class="headerlink" title="应避免的事情"></a>应避免的事情</h2><ul><li>必填字段(仅用于 proto2)</li><li>Groups (仅用于 proto2)</li></ul><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><ul><li><a href="https://developers.google.com/protocol-buffers/docs/encoding#simple" target="_blank" rel="external nofollow noopener noreferrer">一个简单的 message</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/encoding#varints" target="_blank" rel="external nofollow noopener noreferrer">Base 128 Varints 编码算法</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/encoding#structure" target="_blank" rel="external nofollow noopener noreferrer">message 结构</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/encoding#types" target="_blank" rel="external nofollow noopener noreferrer">更多的值类型</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/encoding#embedded" target="_blank" rel="external nofollow noopener noreferrer">嵌入式 message</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/encoding#optional" target="_blank" rel="external nofollow noopener noreferrer">可选和重复的元素</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/encoding#order" target="_blank" rel="external nofollow noopener noreferrer">字段顺序</a></li></ul><p>本文档描述了 protocol buffer messages 的二进制线格式。 在应用程序中使用 protocol buffer 时不需要理解这一点，但了解不同的 protocol buffer 格式如何影响 message 编码的大小可能非常有用。</p><h2 id="一个简单的-message"><a href="#一个简单的-message" class="headerlink" title="一个简单的 message"></a>一个简单的 message</h2><p>假设有以下非常简单的 message 定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message Test1 &#123;</span><br><span class="line">  optional int32 a &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在应用中，创建一条 <code>Test1</code>消息并将 <code>a</code> 设置为 150。 然后将 message 序列化为输出流。 如果检查 message 的编码，将看到三个字节:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">08 96 01</span><br></pre></td></tr></table></figure><p>就是这么小和这么数字化。但它意味着什么? 继续看下去..</p><h2 id="Base-128-Varints-编码算法"><a href="#Base-128-Varints-编码算法" class="headerlink" title="Base 128 Varints 编码算法"></a>Base 128 Varints 编码算法</h2><p>要理解简单的 protocol buffer 编码，首先需要理解 _varints_。 Varint 是一种使用一个或多个字节序列化整数的方法。 较小的数字占用较少的字节数。</p><p>除了最后一个字节以外，varint 中的每个字节都设置了最高有效位(<em>most significant bit</em> ，msb)——表示还有更多的字节要处理。 每个字节较低的 7 位用于存储数字的两位补码表示形式，以 7 位为一组，最低有效组优先。</p><p>例如，数字 1 是一个字节，所以 msb 没有设置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0001</span><br></pre></td></tr></table></figure><p>再例如，数字 300 情况有点复杂:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1010 1100 0000 0010</span><br></pre></td></tr></table></figure><p>怎么知道这是 300？ 首先从每个字节中删除 msb，因为它只是用来告诉我们是否已经到达数字的末尾(如下所示，它在第一个字节中设置，因为在 varint 中多于一个字节) :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 1010 1100 0000 0010</span><br><span class="line">→ 010 1100  000 0010</span><br></pre></td></tr></table></figure><p>将这两组 7 位反转过来，varint 首先存储最低有效组的数字。 然后将它们串联起来得到最终值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000 0010  010 1100</span><br><span class="line">→  000 0010 ++ 010 1100</span><br><span class="line">→  100101100</span><br><span class="line">→  256 + 32 + 8 + 4 &#x3D; 300</span><br></pre></td></tr></table></figure><h2 id="message-结构"><a href="#message-结构" class="headerlink" title="message 结构"></a>message 结构</h2><p>protocol buffer message 是一系列键值对。 message 的二进制版本只使用字段的数字作为键——每个字段的名称和声明类型只能在解码端通过引用 message 类型的定义(即<code>.proto</code>文件)。</p><p>当对 message 进行编码时，键和值被连接成一个字节流。 当 message 被解码时，解析器需要能够跳过它不识别的字段。 通过这种方式，可以将新字段添加到 message 中，而不会破坏不知道这些字段的旧程序解析过程。 为此，wire 格式的 message 中每一对的“键”实际上是两个值——<code>.proto</code>文件和一个 wire 类型，该 wire 类型提供了足够的信息来查找下列值的长度。 在大多数语言实现中，这个键被称为标记。</p><p>现有的 wire 类型如下:</p><table><thead><tr><th align="left">类型</th><th align="left">含义</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">Varint</td><td align="left">int32, int64, uint32, uint64, sint32, sint64, bool, enum</td></tr><tr><td align="left">1</td><td align="left">64-bit</td><td align="left">fixed64, sfixed64, double</td></tr><tr><td align="left">2</td><td align="left">Length-delimited</td><td align="left">string, bytes, embedded messages, packed repeated fields</td></tr><tr><td align="left">3</td><td align="left">Start group</td><td align="left">groups (deprecated)</td></tr><tr><td align="left">4</td><td align="left">End group</td><td align="left">groups (deprecated)</td></tr><tr><td align="left">5</td><td align="left">32-bit</td><td align="left">fixed32, sfixed32, float</td></tr></tbody></table><p>流式 message 中的每个键都是一个 varint，其值为<code>(field_number &lt;&lt; 3) | wire_type</code> ——换句话说，数字的最后三位存储 wire 类型。</p><p>现在再看一下这个简单的例子。 现在知道流中的第一个数字总是 varint 键，这里是 08，或者删除 msb :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000 1000</span><br></pre></td></tr></table></figure><p>You take the last three bits to get the wire type (0) and then right-shift by three to get the field number (1). So you now know that the field number is 1 and the following value is a varint. Using your varint-decoding knowledge from the previous section, you can see that the next two bytes store the value 150.</p><p>取最后三个位得到 wire 类型(0) ，然后右移三个位得到字段数字(1)。 现在已知字段数字是 1，下面的值是 varint。 使用上一节中的 varint 解码知识，可以看到接下来的两个字节存储值 150。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">96 01 &#x3D; 1001 0110  0000 0001</span><br><span class="line">       → 000 0001  ++  001 0110 (删掉 msb 并且调换7位组的顺序)</span><br><span class="line">       → 10010110</span><br><span class="line">       → 128 + 16 + 4 + 2 &#x3D; 150</span><br></pre></td></tr></table></figure><h2 id="更多的值类型"><a href="#更多的值类型" class="headerlink" title="更多的值类型"></a>更多的值类型</h2><h3 id="有符号整数"><a href="#有符号整数" class="headerlink" title="有符号整数"></a>有符号整数</h3><p>正如上一节中所示，与 wire 类型 0 相关联的所有 protocol buffer 类型都被编码为 varint。 然而，在负数的编码中，带符号的 int 类型(<code>sint32</code> 和 <code>sint64</code>)和“标准” int 类型(<code>int32</code> 和 <code>int64</code>)之间有一个重要的区别。 如果使用 <code>int32</code> 或 <code>int64</code> 作为负数的类型，那么结果的 varint 总是长度位 10 个字节——实际上，它被视为一个非常大的无符号整数。 如果使用有符号类型，则生成的 varint 使用 ZigZag 编码，这种编码效率要高得多。</p><p>ZigZag encoding maps signed integers to unsigned integers so that numbers with a small <em>absolute value</em> (for instance, -1) have a small varint encoded value too. It does this in a way that “zig-zags” back and forth through the positive and negative integers, so that -1 is encoded as 1, 1 is encoded as 2, -2 is encoded as 3, and so on, as you can see in the following table:</p><p>Zigzag 编码将有符号的整数映射到无符号的整数，因此绝对值较小(例如-1)的数字也具有较小的 varint 编码值。 它通过正整数和负整数来回“zig-zags” ，因此-1 被编码为 1,1 被编码为 2,-2 被编码为 3，以此类推，如下表所示:</p><table><thead><tr><th align="left">有符号整数</th><th align="left">编码</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">-1</td><td align="left">1</td></tr><tr><td align="left">1</td><td align="left">2</td></tr><tr><td align="left">-2</td><td align="left">3</td></tr><tr><td align="left">2147483647</td><td align="left">4294967294</td></tr><tr><td align="left">-2147483648</td><td align="left">4294967295</td></tr></tbody></table><p>In other words, each value <code>n</code> is encoded using<code>sint32</code>s</p><p>换句话说，每个值 <code>n</code> 都使用<code>sint32</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n &lt;&lt; 1) ^ (n &gt;&gt; 31)</span><br></pre></td></tr></table></figure><p>或 64 位的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n &lt;&lt; 1) ^ (n &gt;&gt; 63)</span><br></pre></td></tr></table></figure><blockquote><p>注意，第二个移位—— <code>(n &gt;&gt; 31)</code>部分——是一个算术移位。 所以移位的结果要么是一个全部为零位的数字(如果 n 是正数) ，要么是一个全部为一位的数字(如果 n 是负数)。</p></blockquote><p>解析 <code>sint32</code> 或 <code>sint64</code> 时，将其值解码回原始的有符号版本。</p><h3 id="非-varint-数字"><a href="#非-varint-数字" class="headerlink" title="非 varint 数字"></a>非 varint 数字</h3><p>非 varint 数字类型比较简单—— <code>double</code> 和<code>fixed64</code> 的 wire 类型为 1，它告诉解析器需要一个固定的 64 位数据块; 类似地，<code>float</code> 和 <code>fixed32</code> 具有 wire 类型 5，它告诉解析器需要 32 位。 在这两种情况下，值都以小端字节顺序存储。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>wire 类型为 2(长度受限)意味着该值是编码后的 varint 的长度，后跟指定数量的数据字节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message Test2 &#123;</span><br><span class="line">  optional string b &#x3D; 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 b 的值设置为“testing” ，可以得到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12 07 74 65 73 74 69 6e 67</span><br></pre></td></tr></table></figure><p>字节是“ testing”的 UTF8，这里的键是 0x12→</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0001 0010</span><br></pre></td></tr></table></figure><p>→</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00010 010</span><br></pre></td></tr></table></figure><p>→field_number = 2, wire_type = 2。值中的 varint 长度是 7，后面跟着 7 个字节——“testing”字符串。</p><h2 id="嵌入式-message"><a href="#嵌入式-message" class="headerlink" title="嵌入式 message"></a>嵌入式 message</h2><p>下面是一个 message 定义，其中嵌入了我们的示例类型的 message，Test1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message Test3 &#123;</span><br><span class="line">  optional Test1 c &#x3D; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是经过编码的版本，同样，Test1 的字段设置为 150:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1a 03 08 96 01</span><br></pre></td></tr></table></figure><p>如上所示，最后三个字节与我们的第一个示例(<code>08 96 01</code>)完全相同，前面是数字 3，嵌入的 message 与字符串是完全相同的处理方式(<code>wire type = 2</code>)。</p><h2 id="可选和重复的元素"><a href="#可选和重复的元素" class="headerlink" title="可选和重复的元素"></a>可选和重复的元素</h2><p>如果 proto2 消息定义包含<code>repeated</code> 元素(不包含<code>[packed=true]</code>选项) ，则编码后的 message 包含具有相同字段编号的零个或多个键值对。 这些重复值不一定要连续出现，可能与其他字段交错出现。 解析时保留了元素相对于其他元素的顺序，但丢失了相对于其他字段的顺序。 在 proto3 中，重复字段使用 <a href="https://developers.google.com/protocol-buffers/docs/encoding#packed" target="_blank" rel="external nofollow noopener noreferrer">packed encoding</a>，可以接着往下阅读。</p><p>对于 proto3 中的任何非重复字段，或 proto2 中的<code>optional</code> 字段，编码的 message 有可能没有该字段编号的键值对。</p><p>通常，一个编码后 message 不会有多于一个不重复字段的实例。 但是，解析器应该处理这种有可能遇到的情况。 对于数值类型和字符串，如果同一字段出现多次，解析器将接受它发现的最后一个值。 对于嵌入式 message 字段，解析器合并同一字段的多个实例，就像使用<code>Message::MergeFrom</code> 方法一样，即后一个实例中的所有单独标量字段替换前一个实例中的所有单独标量字段，合并嵌入的单独 message，并连接重复字段。 这些规则的效果是，解析两个编码后 message 的连接所产生的结果与分别解析两个 message 合并结果完全相同。 如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyMessage message;</span><br><span class="line">message.ParseFromString(str1 + str2);</span><br></pre></td></tr></table></figure><p>等同于:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyMessage message, message2;</span><br><span class="line">message.ParseFromString(str1);</span><br><span class="line">message2.ParseFromString(str2);</span><br><span class="line">message.MergeFrom(message2);</span><br></pre></td></tr></table></figure><p>此属性有时很有用，因为即使不知道它们的类型，也允许合并两个 message。</p><h3 id="Packed-重复字段"><a href="#Packed-重复字段" class="headerlink" title="Packed 重复字段"></a>Packed 重复字段</h3><p>2.1.0 版本引入了 packed 的 repeated 字段，在 proto2 中，这些字段被声明为类似 repeated 字段，但是带有特殊的<code>[packed=true]</code>选项。 在 proto3 中，标量数值类型的 repeated 字段默认是 packed 的。 这些功能类似于 repeated 字段，但是编码方式不同。 包含零个元素的 packed repeated 字段不会出现在编码 message 中。 否则，该字段的所有元素都被 packed 到一个键值对中，该键值对使用 wire 类型 2(长度受限)。 每个元素的编码方式与正常情况下相同，只是前面没有键。</p><p>例如，假设你有一个 message 类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message Test4 &#123;</span><br><span class="line">  repeated int32 d &#x3D; 4 [packed&#x3D;true];</span><br><span class="line">&#125;:</span><br></pre></td></tr></table></figure><p>现在，假设构造了一个 <code>Test4</code>，为 repeated 字段 d 提供值 3、270 和 86942，那么，编码的形式应该是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">22        &#x2F;&#x2F; 键 (字段编码 4, wire 类型 2)</span><br><span class="line">06        &#x2F;&#x2F; payload 大小 (6 bytes)</span><br><span class="line">03        &#x2F;&#x2F; 第一个元素 (varint 3)</span><br><span class="line">8E 02     &#x2F;&#x2F; 第二个元素 (varint 270)</span><br><span class="line">9E A7 05  &#x2F;&#x2F; 第三个元素 (varint 86942)</span><br></pre></td></tr></table></figure><p>只有基本数值类型的重复字段(使用 varint、32 位或 64 位 wire 类型)可以声明为“ packed”。</p><p>注意，虽然通常没有理由为一个 packed 重复字段编码多个键值对，但编码器必须准备好接受多个键值对。 在这种情况下，应该连接 payload。 每一对都必须包含全部数量的元素。</p><p>protocol buffer 解析器必须能够解析已编译为<code>packed</code> 的重复字段，就像它们没有<code>packed</code> 一样，反之亦然。 这允许以向前和向后兼容的方式向现有字段添加<code>[packed=true]</code>。</p><h2 id="字段顺序"><a href="#字段顺序" class="headerlink" title="字段顺序"></a>字段顺序</h2><p>在<code>.proto</code>中，字段编号可以按任意顺序排列。 所选择的顺序对 message 的序列化过程没有影响。</p><p>在序列化 message 时，不能保证如何编写其已知或 <a href="https://developers.google.com/protocol-buffers/docs/proto#updating" target="_blank" rel="external nofollow noopener noreferrer">未知</a>字段的顺序。 序列化顺序是一个实现时的细节，任何特定实现的细节在将来都可能发生变化。 因此，protocol buffer 解析器必须能够以任何顺序解析字段。</p><h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><ul><li><p>不要假设序列化消息的字节输出是稳定的。 尤其是对于具有传递字节字段表示其他 protocol buffer messages 的 message 来说更是如此。</p></li><li><p>默认情况下，对同一个 protocol buffer messages 实例重复调用序列化方法可能不会返回相同的字节输出; 也就是说，默认序列化是不确定的</p><ul><li>序列化只保证在特定二进制文件的情况下有相同字节输出。 字节输出可能会随着二进制文件的不同版本而改变</li></ul></li><li><p>对于 protocol buffer message 实例<code>foo</code>，下列检查可能失败</p><ul><li><code>foo.SerializeAsString() == foo.SerializeAsString()</code></li></ul></li><li><p><code>Hash(foo.SerializeAsString()) == Hash(foo.SerializeAsString())</code></p><ul><li><code>CRC(foo.SerializeAsString()) == CRC(foo.SerializeAsString())</code></li></ul></li><li><p><code>FingerPrint(foo.SerializeAsString()) == FingerPrint(foo.SerializeAsString())</code></p></li><li><p>下面是逻辑上等价的 protocol buffer message 实例<code>foo</code> and <code>bar</code>可能会序列化输出不同字节的示例场景。</p><ul><li><code>bar</code> 由旧的服务序列化，该服务将某些字段视为未知。</li></ul></li><li><p><code>bar</code> 使用不同的编程语言实现并按不同的顺序序列化字段的服务来序列化。</p><ul><li><code>bar</code> 具有以非确定方式序列化的字段。</li></ul></li><li><p><code>bar</code> 具有一个字段，该字段存储以不同方式序列化的 protocol buffer message 的序列化字节输出</p><ul><li><code>bar</code> 由一个新的服务序列化，该服务由于实现的更改而按不同的顺序序列化字段</li><li><code>foo</code> 和 <code>bar</code> 都是单个 message 的连接，但是顺序不同。</li></ul></li></ul><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><ul><li><a href="https://developers.google.com/protocol-buffers/docs/techniques#streaming" target="_blank" rel="external nofollow noopener noreferrer">串流多条 message</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/techniques#large-data" target="_blank" rel="external nofollow noopener noreferrer">大型数据集</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/techniques#self-description" target="_blank" rel="external nofollow noopener noreferrer">自描述 message</a></li></ul><p>本节描述了一些常用的设计模式来处理 Protocol Buffers。 也可以把设计和使用的问题发送到<a href="http://groups.google.com/group/protobuf" target="_blank" rel="external nofollow noopener noreferrer">Protocol Buffers 讨论组</a>。</p><h2 id="串流多条-message"><a href="#串流多条-message" class="headerlink" title="串流多条 message"></a>串流多条 message</h2><p>如果希望将多条 message 写入一个文件或流，则需要跟踪一条 message 的结束位置和下一条 message 的开始位置。 Protocol Buffer wire 格式不是自限定的，因此 protocol buffer 解析器无法自己确定 message 的结束位置。 解决这个问题的最简单方法是在编写 message 本身之前编写每个 message 的大小。 当读回 message 时，先读取大小，然后将字节读入一个单独的缓冲区，然后从该缓冲区解析。 (如果希望避免将字节复制到单独的缓冲区，可以查看 <code>CodedInputStream</code> 类(在 C++ 和 Java 中) ，该类可以将读操作限制到一定数量的字节。)</p><h2 id="大型数据集"><a href="#大型数据集" class="headerlink" title="大型数据集"></a>大型数据集</h2><p>Protocol Buffers 并不是设计用来处理大 message 的。 作为一般的经验法则，如果处理的 message 每个都大于兆字节，那么可能是时候考虑其他策略了。</p><p>也就是说，Protocol Buffers 非常适合处理大数据集<em>中</em>的单个 message。 通常，大型数据集实际上只是很多小块的集合，其中每个小块可能是一个结构化的数据块。 尽管 Protocol Buffers 不能一次处理整个集合，但是使用 Protocol Buffers 编码可以极大地简化问题: 现在所需要做的就是处理一组字节串而不是一组结构。</p><p>由于不同的情况需要不同的解决方案，Protocol Buffers 不包括对大型数据集的任何内置支持。 有时候一个简单的记录列表就可以了，而有时候可能想要一个类似数据库的东西。 每个解决方案都应该作为一个单独的库来开发，这样只有那些需要它的人才需要支付开发成本。</p><h2 id="自描述-message"><a href="#自描述-message" class="headerlink" title="自描述 message"></a>自描述 message</h2><p>Protocol Buffers 不包含它们自己类型的描述。 因此，只给定原始消息而不给定对应的 <code>.proto</code>文件定义其类型，很难提取任何有用的数据。</p><p>但是，请注意<code>.proto</code>文件本身可以使用 protocol buffers 表示。 源代码包中的文件<code>src/google/protobuf/descriptor.proto</code> 定义了所涉及的 message 类型。 <code>protoc</code>可以使用选项<code>--descriptor_set_out</code>输出一个 <code>FileDescriptorSet</code>（表示一组<code>.proto</code> 文件）。 这样就可以定义一个自描述的 protocol message，如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">import &quot;google&#x2F;protobuf&#x2F;any.proto&quot;;</span><br><span class="line">import &quot;google&#x2F;protobuf&#x2F;descriptor.proto&quot;;</span><br><span class="line"></span><br><span class="line">message SelfDescribingMessage &#123;</span><br><span class="line">  &#x2F;&#x2F; 设置可以描述类型和依赖的FileDescriptorProtos</span><br><span class="line">  google.protobuf.FileDescriptorSet descriptor_set &#x3D; 1;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 这个message和类型编码为了一个Any message.</span><br><span class="line">  google.protobuf.Any message &#x3D; 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用像 <code>DynamicMessage</code> (在 C++ 和 Java 中可用)这样的类，可以编写操作 <code>SelfDescribingMessage</code>的工具。</p><p>尽管如此，这个功能之所以没有包含在 Protocol Buffer 库中，是因为我们从来没有在 Google 中使用过它。</p><p>这种技术需要支持使用描述符的动态 message。 在使用自描述 message 之前，请检查平台是否支持此功能。</p><h1 id="第三方附加组件"><a href="#第三方附加组件" class="headerlink" title="第三方附加组件"></a>第三方附加组件</h1><p>许多开源项目试图在 google Protocol Buffers 的基础上添加有用的功能。 有关我们所知道的项目的链接列表，请参阅<a href="https://github.com/protocolbuffers/protobuf/blob/master/docs/third_party.md" target="_blank" rel="external nofollow noopener noreferrer">第三方附加组件 wiki 页</a>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>Language Guide (proto3)，Google，<a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="external nofollow noopener noreferrer">https://developers.google.com/protocol-buffers/docs/proto3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> protobuf </tag>
            
            <tag> Protocol Buffers </tag>
            
            <tag> proto3 </tag>
            
            <tag> 语言指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器进程分析</title>
      <link href="/posts/ef53b42d.html"/>
      <url>/posts/ef53b42d.html</url>
      
        <content type="html"><![CDATA[<p>上一篇《<a href="https://linjingyi.cn/posts/aab41707.html">浏览器进程线程、任务队列和 async/await</a>》按照自己的理解分析了下浏览器的进程和线程。最近在极客时间发现一个挺不错的课程——浏览器工作原理与实践，根据老师的课程在进程的层面上做一个笔记和实践分析。</p><a id="more"></a><h2 id="当前多进程架构"><a href="#当前多进程架构" class="headerlink" title="当前多进程架构"></a>当前多进程架构</h2><p>课程中大概介绍了单进程浏览器、早期多进程架构、当前多进程架构和未来面向服务的架构。本篇主要分析下当前的多进程浏览器架构，如下图所示：</p><p><img src="/posts/ef53b42d/Chrome%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Chrome进程架构图"></p><p>从图中可以看出，最新的 Chrome 浏览器包括：<code>1</code> 个浏览器（Browser）主进程、<code>1</code> 个 GPU 进程、<code>1</code> 个网络（NetWork）进程、<code>多</code>个渲染进程和<code>多</code>个插件进程。</p><p>几个进程的功能如下所示：</p><ul><li><strong>浏览器进程</strong>。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li><strong>渲染进程</strong>。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li><strong>GPU 进程</strong>。GPU 进程的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li><li><strong>网络进程</strong>。主要负责页面的网络资源加载。</li><li><strong>插件进程</strong>。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li></ul><h2 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h2><p>现在提出一个问题，当前的 Chrome 浏览器打开 <code>2</code> 个页面后会有几个进程？下面分不同情况逐步进行分析。</p><h3 id="普通情况"><a href="#普通情况" class="headerlink" title="普通情况"></a>普通情况</h3><p>不加载任何插件，普通情况下打开谷歌和百度的首页，结果如下图所示：</p><p><img src="/posts/ef53b42d/task1.jpg" alt="5个进程"></p><p>可以发现会有浏览器进程、GPU 进程、网络进程和两个标签页的渲染进程，<code>1+1+1+2=5</code> 个进程。每个标签页放在不同的进程中，有效避免了单进程架构下某一页面崩溃则整个浏览器崩溃的窘境。</p><h3 id="加载两个扩展"><a href="#加载两个扩展" class="headerlink" title="加载两个扩展"></a>加载两个扩展</h3><p>在普通情况的基础上随意加载两个扩展，结果如下图所示：</p><p><img src="/posts/ef53b42d/task2.jpg" alt="7个进程"></p><p>可以发现多出了两个扩展程序的进程，<code>1+1+1+2+2=7</code> 个进程。与标签页原因相似，把插件进程单独隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p><h3 id="打开两个同一站点页面"><a href="#打开两个同一站点页面" class="headerlink" title="打开两个同一站点页面"></a>打开两个同一站点页面</h3><p>现在关闭所有插件，并且打开两个<strong>同一站点（same-site）</strong>的页面。</p><blockquote><p><strong>同一站点</strong>的定义与<strong>同源</strong>是有区别的，“同一站点”定义为<strong>根域名</strong>（例如 linjingyi.cn）加上<strong>协议</strong>（例如，https:// 或者http://），包含了该根域名下的所有子域名和不同的端口，比如下面这三个：</p><ul><li><a href="https://test.linjingyi.cn" target="_blank" rel="external nofollow noopener noreferrer">https://test.linjingyi.cn</a></li><li><a href="https://www.linjingyi.cn" target="_blank" rel="noopener">https://www.linjingyi.cn</a></li><li><a href="https://www.linjingyi.cn:8080" target="_blank" rel="noopener">https://www.linjingyi.cn:8080</a></li></ul><p>都是属于同一站点，因为它们的协议都是 https，而根域名也都是 linjingyi.cn。</p></blockquote><p><img src="/posts/ef53b42d/task3.jpg" alt="4个进程"></p><p>可以发现，百度搜索 github 和百度搜索 javascript 这两个标签页被合并成了同一个进程，共用一个进程 ID，<code>1+1+1+1=4</code> 个进程。这里的主要原因是 Chrome 默认的进程策略为“<strong>process-per-site-instance</strong>”，解释下就是每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于<strong>同一站点</strong>时，那么新页面会复用父页面的渲染进程。总结下就是同一个 <strong>site-instance</strong> 使用一个进程。</p><h3 id="一个页面内嵌套两个-iframe"><a href="#一个页面内嵌套两个-iframe" class="headerlink" title="一个页面内嵌套两个 iframe"></a>一个页面内嵌套两个 iframe</h3><p>关闭所有插件，写一个 html 文件并打开，内容如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iframe<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://linjingyi.cn"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://baidu.com"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在代码中使用了两个 iframe 框架，打开后的任务管理器如下所示：</p><p><img src="/posts/ef53b42d/task4.jpg" alt="4个进程"></p><p>在 Chrome 任务管理器中，虽然只打开了一个标签页，但是两个 iframe 页面都单独占了一个进程，所以 <code>1+1+1+3=6</code> 个进程。</p><h3 id="查看-Windows-系统任务管理器"><a href="#查看-Windows-系统任务管理器" class="headerlink" title="查看 Windows 系统任务管理器"></a>查看 Windows 系统任务管理器</h3><p>虽然 Chrome 有任务管理器，但是 Windows 系统也自带了任务管理器，使用普通情况（也就是关闭所有插件，只打开百度和谷歌首页）进行对照：</p><p><img src="/posts/ef53b42d/task1.jpg" alt="5个进程"></p><p><img src="/posts/ef53b42d/windows%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.jpg" alt="7个进程"></p><p>对比很明显，为什么在 Chrome 任务管理器中只有 <code>5</code> 个进程，而 Windows 任务管理器中却有 <code>7</code> 个进程。这是因为 Chrome 有一些辅助进程并不会在任务管理器中显示，比如<strong>预渲染进程</strong>是一个额外的渲染辅助进程，当有渲染需求时直接改进程，省去创建进程的时间。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://time.geekbang.org/column/article/113513" target="_blank" rel="external nofollow noopener noreferrer">浏览器工作原理与实践-&gt;01、Chrome 架构：仅仅打开了 1 个页面，为什么有 4 个进程？，李兵</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器进程线程、任务队列和async/await</title>
      <link href="/posts/aab41707.html"/>
      <url>/posts/aab41707.html</url>
      
        <content type="html"><![CDATA[<p>之前一段时间得了急性肠炎，休养停更了一段时间。天气变热，大家也要多多注意，隔夜食物如果没进冰箱就别吃了 😢。</p><p>本篇递进解析下进程、线程、浏览器渲染、任务队列、事件循环，最后用一个 ES2016 的 async/await 例子进行了分析。部分内容借鉴一些书籍和博客。</p><a id="more"></a><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="通俗解释"><a href="#通俗解释" class="headerlink" title="通俗解释"></a>通俗解释</h3><p>关于进程和线程的通俗解释参考阮一峰老师的《<a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external nofollow noopener noreferrer">进程与线程的一个简单解释</a>》。</p><ol><li><p>计算机的核心是 CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</p></li><li><p>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个 CPU 一次只能运行一个任务。</p></li><li><p>进程就好比工厂的车间，它代表 CPU 所能处理的单个任务。任一时刻，CPU 总是运行一个进程，其他进程处于非运行状态。</p></li><li><p>一个车间里，可以有很多工人。他们协同完成一个任务。</p></li><li><p>线程就好比车间里的工人。一个进程可以包括多个线程。</p></li><li><p>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</p></li><li><p>可是，每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</p></li><li><p>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫<a href="http://zh.wikipedia.org/wiki/互斥锁" target="_blank" rel="external nofollow noopener noreferrer">“互斥锁”</a>（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。</p></li><li><p>还有些房间，可以同时容纳 n 个人，比如厨房。也就是说，如果人数大于 n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。</p></li><li><p>这时的解决方法，就是在门口挂 n 把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做<a href="http://en.wikipedia.org/wiki/Semaphore_(programming)" target="_blank" rel="external nofollow noopener noreferrer">“信号量”</a>（Semaphore），用来保证多个线程不会互相冲突。<br>不难看出，Mutex 是 Semaphore 的一种特殊情况（n=1 时）。也就是说，完全可以用后者替代前者。但是，因为 Mutex 较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p></li></ol><p>操作系统的设计，因此可以归结为三点：</p><ol><li>以多进程形式，允许多个任务同时运行；</li><li>以多线程形式，允许单个任务分成不同的部分运行；</li><li>提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</li></ol><h3 id="学术解释"><a href="#学术解释" class="headerlink" title="学术解释"></a>学术解释</h3><p>关于进程和线程的学术一点的解释参考这篇知乎回答《<a href="https://www.zhihu.com/question/25532384/answer/81152571" target="_blank" rel="external nofollow noopener noreferrer">线程和进程的区别是什么？</a>》</p><h4 id="CPU-背景"><a href="#CPU-背景" class="headerlink" title="CPU 背景"></a>CPU 背景</h4><ul><li>CPU+RAM+各种资源（比如显卡，光驱，键盘，GPS, 等等外设）构成我们的电脑，但是电脑的运行，<strong>实际就是 CPU 和相关寄存器以及 RAM 之间的事情</strong>。</li><li>一个最最基础的事实：CPU 太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM 和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，<strong>一句话就是在 CPU 看来就是轮流着来</strong>。</li><li>一个必须知道的事实：执行一段程序代码，实现一个功能的过程介绍 ，当得到 CPU 的时候，相关的资源必须也已经就位，就是显卡啊，GPS 啊什么的必须就位，然后 CPU 开始执行。这里除了 CPU 以外所有的就构成了这个程序的<strong>执行环境</strong>，也就是我们所定义的<strong>程序上下文</strong>。当这个程序执行完了，或者分配给他的 CPU 执行时间用完了，那它就要被切换出去，等待下一次 CPU 的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被 CPU 临幸的运行环境，必须保存。</li><li>串联起来的事实：前面讲过在 CPU 看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：先加载程序 A 的上下文，然后开始执行 A，<strong>保存程序 A 的上下文，调入下一个要执行的程序 B 的程序上下文</strong>，然后开始执行 B，保存程序 B 的上下文。</li></ul><h4 id="进程线程区别"><a href="#进程线程区别" class="headerlink" title="进程线程区别"></a>进程线程区别</h4><p>进程和线程就是这样的背景出来的，两个名词不过是对应的<strong>CPU 时间段</strong>的描述，名词就是这样的功能。</p><ul><li><strong>进程</strong>就是包括切换上下文切换的程序执行时间总和 = CPU 加载上下文 + CPU 执行 + CPU 保存上下文</li></ul><p>线程是什么呢？<br>进程的颗粒度太大，每次都要有上下的调入，保存，调出。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序 A，实际分成 a，b，c 等多个块组合而成。那么这里具体的执行就可能变成：</p><p>程序 A 得到 CPU –&gt; CPU 加载上下文–&gt;开始执行程序 A 的 a 小段–&gt;然后执行 A 的 b 小段–&gt;然后再执行 A 的 c 小段–&gt;最后 CPU 保存 A 的上下文。</p><p>这里 a，b，c 的执行的是共享了 A 的上下文，CPU 在执行的时候没有进行上下文切换的。这里的<strong>a，b，c 就是线程</strong>，也就是说<strong>线程是共享了进程的上下文环境的更为细小的 CPU 时间段</strong>。</p><p>做一个总结：</p><p><strong>进程和线程都是一个时间段的描述，是 CPU 工作时间段的描述，不过是颗粒大小不同。</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>看完通俗和学术的理解以后，官方的解释就应该很明白了：</p><ul><li>进程是 CPU 资源分配的最小单位（是能拥有资源和独立运行的最小单位）</li><li>线程是 CPU 调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</li></ul><p>现在，一般通用的单线程与多线程的说法，都是指<strong>在一个进程内</strong>的单和多（核心是属于一个进程）。</p><h2 id="浏览器的进程与线程"><a href="#浏览器的进程与线程" class="headerlink" title="浏览器的进程与线程"></a>浏览器的进程与线程</h2><p>关于浏览器中的进程与线程借鉴该博客《<a href="https://www.cnblogs.com/cangqinglang/p/8963557.html" target="_blank" rel="external nofollow noopener noreferrer">从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理</a>》。</p><h3 id="浏览器多进程"><a href="#浏览器多进程" class="headerlink" title="浏览器多进程"></a>浏览器多进程</h3><p>在 Chromium 系浏览器中按 Shift+Esc 快捷键可以打开任务管理器，可以发现基本上每个 tab 页都有一个自己的进程。</p><p><img src="/posts/aab41707/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B.jpg" alt="任务管理器"></p><p>相比于单进程浏览器，多进程有如下优点：</p><ul><li>避免单个 page 崩溃影响整个浏览器</li><li>避免第三方插件崩溃影响整个浏览器</li><li>多进程充分利用多核优势</li><li>方便使用沙盒模型隔离插件等进程，提高浏览器稳定性</li></ul><h3 id="渲染（Renderer）进程"><a href="#渲染（Renderer）进程" class="headerlink" title="渲染（Renderer）进程"></a>渲染（Renderer）进程</h3><p>对于前端开发来说，渲染（Renderer）进程是最重要的进程。可以这样理解，页面的渲染，JS 的执行，事件的循环，都在这个进程内进行。接下来重点分析这个进程的多个线程：</p><h4 id="渲染进程中的线程"><a href="#渲染进程中的线程" class="headerlink" title="渲染进程中的线程"></a>渲染进程中的线程</h4><p><img src="/posts/aab41707/renderer.png" alt="渲染进程"></p><ol><li><p>GUI 渲染线程</p><ul><li><p>负责<strong>渲染浏览器界面</strong>，解析 HTML，CSS，构建 DOM 树和 RenderObject 树，布局和绘制等。</p></li><li><p>当界面需要重绘（Repaint）或由于某种操作引发回流(Reflow)时，该线程就会执行。</p><blockquote><p>注意，GUI 渲染线程与 JS 引擎线程是互斥的，当 JS 引擎线程执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行。</p></blockquote></li></ul></li><li><p>JS 引擎线程</p><ul><li><p>也称为 JS 内核，负责<strong>处理 Javascript 脚本程序</strong>。（例如<strong>V8 引擎</strong>）</p></li><li><p>JS 引擎线程负责解析 Javascript 脚本，运行代码。</p></li><li><p>JS 引擎一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页（Renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序</p><blockquote><p>同样注意，GUI 渲染线程与 JS 引擎线程是互斥的，所以如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</p></blockquote></li></ul></li><li><p>事件触发线程</p><ul><li>归属于浏览器而不是 JS 引擎，用来<strong>控制事件循环</strong>（可以理解，JS 引擎自己都忙不过来，需要浏览器另开线程协助）。</li><li>当 JS 引擎执行代码块如 setTimeOut 时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件线程中。</li><li>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的<strong>队尾</strong>，等待 JS 引擎的处理。</li><li>注意，由于 JS 的单线程关系，所以这些待处理队列中的事件都得<strong>排队</strong>等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）。</li></ul></li><li><p>定时触发器线程</p><ul><li><p><code>setInterval</code>与<code>setTimeout</code>所在线程。</p></li><li><p>浏览器定时计数器并不是由 JavaScript 引擎计数的,（因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）。</p></li><li><p>因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待 JS 引擎空闲后执行）。</p><blockquote><p>注意，W3C 在 HTML 标准中规定，规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms。</p></blockquote></li></ul></li><li><p>异步 http 请求线程</p><ul><li>在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求。</li><li>将检测到状态变更时，如果设置有回调函数，异步线程就<strong>产生状态变更事件</strong>，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。</li></ul></li></ol><h4 id="渲染进程中的线程之间的关系"><a href="#渲染进程中的线程之间的关系" class="headerlink" title="渲染进程中的线程之间的关系"></a>渲染进程中的线程之间的关系</h4><p>到了这里，已经对浏览器的运行有了一个整体的概念，接下来，简单梳理一些概念。</p><h5 id="GUI-渲染线程与-JS-引擎线程互斥"><a href="#GUI-渲染线程与-JS-引擎线程互斥" class="headerlink" title="GUI 渲染线程与 JS 引擎线程互斥"></a>GUI 渲染线程与 JS 引擎线程互斥</h5><p>由于 JavaScript 是可操纵 DOM 的，如果在修改这些元素属性同时渲染界面（即 JS 线程和 UI 线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。</p><p>因此为了防止渲染出现不可预期的结果，浏览器设置 GUI 渲染线程与 JS 引擎为互斥的关系，当 JS 引擎执行时 GUI 线程会被挂起，GUI 更新则会被保存在一个队列中等到 JS 引擎线程空闲时立即被执行。</p><h5 id="JS-阻塞页面加载"><a href="#JS-阻塞页面加载" class="headerlink" title="JS 阻塞页面加载"></a>JS 阻塞页面加载</h5><p>从上述的互斥关系，可以推导出，JS 如果执行时间过长就会阻塞页面。</p><p>譬如，假设 JS 引擎正在进行巨量的计算，此时就算 GUI 有更新，也会被保存到队列中，等待 JS 引擎空闲后执行。<br>然后，由于巨量计算，所以 JS 引擎很可能很久很久后才能空闲，自然会感觉到巨卡无比。</p><p>所以，要尽量避免 JS 执行时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h4 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h4><p>浏览器输入 URL，浏览器主进程接管，开一个下载线程，然后进行 http 请求（略去 DNS 查询，IP 寻址等等操作），然后等待响应，获取内容，随后将内容通过 RendererHost 接口转交给 Renderer 进程，浏览器渲染流程开始：</p><p><img src="/posts/aab41707/%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png" alt="渲染流程"></p><p>浏览器器内核拿到内容后，渲染大概可以划分成以下几个步骤：</p><ol><li>解析 HTML 建立 DOM 树</li><li>解析 CSS 构建 Render 树（将 CSS 代码解析成树形的数据结构，然后结合 DOM 合并成 render 树）</li><li>布局 Render 树（Layout/Reflow），负责各元素尺寸、位置的计算</li><li>绘制 Render 树（Paint），绘制页面像素信息</li><li>浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（Composite），显示在屏幕上。</li></ol><p>所有详细步骤都已经略去，渲染完毕后就是<code>load</code>事件，之后就是自己的 JS 逻辑处理了。</p><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>关于自己的 JS 逻辑处理，参考阮一峰老师的《<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 运行机制详解：再谈 Event Loop</a>》。</p><p>JS 引擎是单线程就意味着，所有 JS 任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>很多时候 CPU 是闲着的，因为 IO 设备（输入输出设备）很慢（比如 Ajax 操作从网络读取数据），不得不等着结果出来，再往下执行。</p><p>JavaScript 语言的设计者意识到，这时 JS 引擎线程完全可以不管 IO 设备，挂起处于等待中的任务，先运行排在后面的任务。等到 IO 设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（Synchronous），另一种是异步任务（Synchronous）。同步任务指的是，在 JS 引擎线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入<strong>JS 引擎线程</strong>、而进入<strong>事件触发线程</strong>管理的”<strong>任务队列</strong>“（Task Queue），所有同步任务执行完毕（此时 JS 引擎线程空闲），就会读取任务队列，将可运行的异步任务添加到 JS 引擎线程的可执行栈中，开始执行。</p><p>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p><blockquote><p>（1）所有同步任务都在 JS 引擎线程上执行，形成一个<a href="http://www.ruanyifeng.com/blog/2013/11/stack.html" target="_blank" rel="external nofollow noopener noreferrer">执行栈</a>（Execution Context Stack）。</p><p>（2）事件触发线程一个”任务队列”（Task Queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p><p>（3）一旦”执行栈”中的所有同步任务执行完毕，JS 引擎线程就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p><p>（4）JS 引擎线程不断重复上面的第三步。</p></blockquote><p>下图就是 JS 引擎线程和任务队列的示意图。</p><p><img src="/posts/aab41707/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97.jpg" alt="任务队列"></p><p>只要 JS 引擎线程空了，就会去读取”任务队列”，这就是 JavaScript 的运行机制。这个过程会不断重复。</p><h2 id="事件和回调函数"><a href="#事件和回调函数" class="headerlink" title="事件和回调函数"></a>事件和回调函数</h2><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO 设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。JS 引擎线程读取”任务队列”，就是读取里面有哪些事件。</p><p>“任务队列”中的事件，除了 IO 设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入”任务队列”，等待 JS 引擎线程读取。</p><p>所谓”回调函数”（Callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</p><p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入 JS 引擎线程。</p><h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>JS 引擎线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop（事件循环）。</p><p>为了更好地理解 Event Loop，请看下图（转引自 Philip Roberts 的演讲<a href="http://vimeo.com/96425312" target="_blank" rel="external nofollow noopener noreferrer">《Help, I’m stuck in an event-loop》</a>）。</p><p><img src="/posts/aab41707/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt="事件循环"></p><p>上图中，JS 引擎线程运行的时候，产生堆（Heap）和栈（Stack），栈中的代码调用各种外部 API，它们在”任务队列”中加入各种事件（click，load，done）。只要栈中的代码执行完毕，JS 引擎线程就会去读取”任务队列”，依次执行那些事件所对应的回调函数。</p><h2 id="以-async-await-举例"><a href="#以-async-await-举例" class="headerlink" title="以 async/await 举例"></a>以 async/await 举例</h2><p>ES2016 中加入的 async/await 关键字，引入了对异步/等待的支持。允许开发者以同步的方式编写 Javascript 代码，但以异步的方式执行。</p><p>在运行中，await 关键字将暂停 async 函数的执行，然后释放 JS 引擎线程，让 JS 引擎线程<strong>跳出当前 async 函数</strong>继续执行后面栈中的代码。而事件触发线程<strong>管理 await 的异步运行</strong>，当异步完成后加入到任务队列中。当本轮事件循环完成后，JS 引擎线程检查任务队列中是否有 await 的运行结果。如果已在任务队列中，就读取结果后跳回 async 函数继续执行。</p><p>以《JS 高级程序设计第四版》中 11 章的代码举例，分析实际的运行流程，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">8</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> <span class="number">6</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">bar();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果如下所示：</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 9</span></span><br></pre></td></tr></table></figure><p>结合线程的概念，运行流程分析如下：</p><ol><li><code>console.log(1)</code>打印 <code>1</code>。</li><li>调用 <code>async</code> 函数<code>foo</code>。</li><li><code>foo</code> 内部 <code>console.log(2)</code>打印 <code>2</code>。</li><li><code>foo</code> 内部，<code>await</code> 关键字暂停并释放 JS 引擎线程的执行，事件触发线程管理 <code>await</code> 的异步运行，获得了 <code>Promise.resolve(8)</code>，将其添加到任务队列中。</li><li>JS 引擎线程跳出了 <code>async</code> 函数 <code>foo</code>，继续执行后面栈中的代码。</li><li><code>console.log(3)</code>打印 <code>3</code>。</li><li>调用 <code>async</code> 函数<code>bar</code>。</li><li><code>bar</code> 内部 <code>console.log(4)</code>打印 <code>4</code>。</li><li><code>bar</code> 内部，<code>await</code> 关键字暂停并释放 JS 引擎线程的执行，事件触发线程管理 <code>await</code> 的异步运行，马上就获得了结果 <code>6</code> 后加入到任务队列中。</li><li>JS 引擎线程跳出了 <code>async</code> 函数 bar，继续执行后面栈中的代码。</li><li><code>console.log(5)</code>打印 <code>5</code>。</li><li>JS 引擎线程执行完成一次。</li><li>JS 引擎线程从任务队列中取出了已完成的 promise 处理器，得到结果值 <code>8</code>。</li><li>事件触发线程把结果 <code>8</code> 放入了事件队列中。</li><li>JS 引擎线程从任务队列中取出 <code>6</code>。</li><li>JS 引擎线程跳回 <code>bar</code>，<code>await</code> 提供值 <code>6</code>。</li><li><code>console.log(await 6)</code>打印 <code>6</code>。</li><li><code>console.log(7)</code>打印 <code>7</code>。</li><li>函数 <code>bar</code> <code>return</code>。</li><li>JS 引擎线程从任务队列中取出 <code>8</code>。</li><li>JS 引擎线程跳回 <code>foo</code>，<code>await</code> 提供值 <code>8</code>。</li><li><code>console.log(await Promise.resolve(8))</code>打印 <code>8</code>。</li><li><code>console.log(9)</code>打印 <code>9</code>。</li><li>函数 <code>foo</code> <code>return</code>。</li></ol><blockquote><p>这里比较关键的地方是<code>await Promise.resolve(8)</code>，其实是进了 2 次任务队列的，一次是<code>await</code>，一次是<code>Promise.resolve(8)</code>，而<code>await 6</code>只进了 1 次任务队列，所以虽然代码中 8 在前面，但是<code>6</code>要比<code>8</code>先打印出来。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于 Event Loop 和 async/await 的执行流程这里，自己也拿不太准，按照自己的理解写出来的。抛砖引玉，希望大家多多指正。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external nofollow noopener noreferrer">进程与线程的一个简单解释</a>，阮一峰；</li><li><a href="https://www.zhihu.com/question/25532384/answer/81152571" target="_blank" rel="external nofollow noopener noreferrer">线程和进程的区别是什么？</a>，zhongyong；</li><li><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 运行机制详解：再谈 Event Loop</a>，阮一峰；</li><li>Professional JavaScript for Web Developes 4th Edition（<a href="https://www.ituring.com.cn/book/2472" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 高级程序设计第四版</a>），Matt Frisbie，李松峰</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Event Loop </tag>
            
            <tag> async/await </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 进程线程 </tag>
            
            <tag> 任务队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高程第4版第9章翻译：代理和反射</title>
      <link href="/posts/755931bb.html"/>
      <url>/posts/755931bb.html</url>
      
        <content type="html"><![CDATA[<p>下述内容翻译自 Professional JavaScript for Web Developes,4th Edition（<a href="https://www.ituring.com.cn/book/2472" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 高级程序设计第四版</a>），323 页，Proxies and Reflect（代理和反射） 章节。</p><a id="more"></a><h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><p>在 ECMAScript6 中引入的代理（proxy）和反射（reflect）是全新的结构，能够拦截并修改语言中基础操作的附加行为。更具体地说，你可以定义一个与目标对象关联的代理对象，代理对象可以看作一个抽象的目标对象，可以在代理对象中控制各种操作，完成之前实际在目标对象执行的操作。</p><p>对于第一次接触这个主题的开发者来说，这是一个相当模糊的概念，堪比一个完整的新术语库。通过多个实例将有助于巩固理解。</p><blockquote><p>注意:在 ES6 之前的 ECMAScript 版本中没有类似的代理概念。因为这是一种完全新的语言能力，转换器无法将代理行为转换为早期的 ECMAScript 版本，因为实际上不可能复制代理的行为。因此，代理和反射只有在 100%提供原生支持的平台上才可以使用。可以检测对代理的支持情况，并在不支持时改用备用代码，但这会导致代码重复，因此不提倡这样做。</p></blockquote><h3 id="代理基础"><a href="#代理基础" class="headerlink" title="代理基础"></a>代理基础</h3><p>正如在引言中提到的，代理作为目标对象的抽象对象存在。它与 C++的指针在许多方面都很类似，因为它可以作为它所指向的目标对象的替代字段使用，但实际上，代理与目标对象完全分离。目标对象既可以直接操作，也可以通过代理操作，但是直接操作将绕过代理定义的行为。</p><blockquote><p>注意：ECMAScript 代理和 C++指针之间有一些关键的区别将在后面讨论，但是出于介绍的目的，指针是一个合适的概念性模块。</p></blockquote><h4 id="创建一个直通代理"><a href="#创建一个直通代理" class="headerlink" title="创建一个直通代理"></a>创建一个直通代理</h4><p>在最简单的形式中，代理只能作为一个抽象的目标对象存在。默认情况下，对代理对象执行的所有操作都将透明地传递到目标对象。因此，能够以目标对象相同的方式和位置来使用代理对象。</p><p>使用 Proxy 构造函数创建一个代理。要求同时提供目标对象和处理器对象，否则将抛出 TypeError。对于简单的直通代理，对处理器对象使用简单的对象文本将允许所有操作畅通无阻地到达目标对象。</p><p>如下所示，在代理上执行的所有操作都将有效地应用于目标对象。唯一可以感受到的区别是代理对象的识别符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  id: <span class="string">'target'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// id属性访问相同的值</span></span><br><span class="line"><span class="built_in">console</span>.log(target.id); <span class="comment">// target</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.id); <span class="comment">// target</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对target属性的修改会在proxy中同样生效，因为proxy访问的是同一个值</span></span><br><span class="line">target.id = <span class="string">'foo'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(target.id); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.id); <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对proxy属性的修改会在target中同样生效，因为修改的属性值赋予到了target对象</span></span><br><span class="line">proxy.id = <span class="string">'bar'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(target.id); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.id); <span class="comment">// bar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty()方法在两种情况下都生效（备注：Chrome80测试应为true，原文为false）</span></span><br><span class="line"><span class="built_in">console</span>.log(target.hasOwnProperty(<span class="string">'id'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.hasOwnProperty(<span class="string">'id'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof操作符在两种情况下都生效（备注：Chrome80测试应会报错，Proxy没有prototype）</span></span><br><span class="line"><span class="built_in">console</span>.log(target <span class="keyword">instanceof</span> <span class="built_in">Proxy</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy <span class="keyword">instanceof</span> <span class="built_in">Proxy</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 仍然可以使用严格相等模式区分proxy和target</span></span><br><span class="line"><span class="built_in">console</span>.log(target === proxy); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="定义陷阱"><a href="#定义陷阱" class="headerlink" title="定义陷阱"></a>定义陷阱</h4><p>代理的主要目的是允许自定义陷阱（trap），它们在处理器对象（handler object）中起到”基础操作拦截器”的作用。每个处理器对象由零个、一个或多个陷阱组成，每个陷阱对应于一个基础操作，该操作可以直接或间接地在代理上调用。当对代理对象调用这些基础操作时，在应用到目标对象之前，代理将调用陷阱函数，从而允许接收和修改行为。</p><blockquote><p>注意：“陷阱（trap）”这个术语借用自操作系统的范畴，其中的陷阱是程序流中的一个同步中断，它转移处理器的执行，并在返回到原始程序流之前执行一个子程序。</p></blockquote><p>例如，可以定义一个 get()陷阱，这个陷阱在每次 ECMAScript 以某种形式执行 get()时触发。陷阱可以定义如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="comment">// 陷阱由处理器对象中的方法名标识</span></span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'handler override'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure><p>当这个代理对象调用 get()操作时，将调用为 get()定义的陷阱函数。当然，get()不是 ECMAScript 对象上可用的方法。被捕获的 get()操作在多个操作之间共享，这些操作可以在实际的 JavaScript 代码中找到。表单代理的操作 proxy[property]、proxy.property 或 Object.create(proxy)[property]都将使用基本操作 get()来检索属性，因此所有这些操作都将在调用它们时调用代理上的陷阱函数。只有代理对象会使用陷阱函数处理器，这些操作与目标对象一起使用时将正常运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="comment">// 陷阱由处理器对象中的方法名标识</span></span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'handler override'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// handler override</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target[<span class="string">'foo'</span>]); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy[<span class="string">'foo'</span>]); <span class="comment">// handler override</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.create(target)[<span class="string">'foo'</span>]); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.create(proxy)[<span class="string">'foo'</span>]); <span class="comment">// handler override</span></span><br></pre></td></tr></table></figure><h4 id="陷阱参数和反射-API"><a href="#陷阱参数和反射-API" class="headerlink" title="陷阱参数和反射 API"></a>陷阱参数和反射 API</h4><p>所有陷阱都具有访问参数的权限，这些参数允许完全重新创建被捕获方法的原始行为。例如，get()方法接收对捕获对象的引用、正在查找的 property 以及对代理对象的引用三个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>(trapTarget, property, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(trapTarget === target);</span><br><span class="line">    <span class="built_in">console</span>.log(property);</span><br><span class="line">    <span class="built_in">console</span>.log(receiver === proxy);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.foo;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>因此，可以定义一个陷阱处理器来完全重建被捕获方法的行为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>(trapTarget, property, receiver) &#123;</span><br><span class="line">    <span class="keyword">return</span> trapTarget[property];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>这样的策略可以应用于所有的陷阱，但并非所有的陷阱行为都像 get()那样容易重建；因此，这是一个不切实际的策略。与手动实现捕获方法的内容不同，捕获方法的原始行为包装在全局 Reflect 对象上的一个名称相同的方法中。</p><p>每个可以被捕获在处理器对象中的方法都有一个对应的 Reflect API 方法。这个方法具有相同的名称和函数签名，并执行被捕获的方法正在拦截的确切行为。因此，仅使用 Reflect API 就可以定义一个直通代理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>或者使用更简洁的格式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>: Reflect.<span class="keyword">get</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const proxy = new Proxy(target, handler);</span><br><span class="line"></span><br><span class="line">console.log(proxy.foo); // bar</span><br><span class="line">console.log(target.foo); // bar</span><br></pre></td></tr></table></figure><p>如果希望创建一个真正的直通代理来捕获所有可用方法，并将每个方法转发给其对应的 Reflect API 函数，则不需要定义一个显式处理器对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, <span class="built_in">Reflect</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>Reflect API 允许使用最少的模板代码修改捕获的方法。例如每当访问某个特定属性时，都会使用下面的修饰符来修饰返回值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">  baz: <span class="string">'qux'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>(trapTarget, property, receiver) &#123;</span><br><span class="line">    <span class="keyword">let</span> decoration = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (property === <span class="string">'foo'</span>) &#123;</span><br><span class="line">      decoration = <span class="string">'!!!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments) + decoration;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// bar!!!</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.baz); <span class="comment">// qux</span></span><br><span class="line"><span class="built_in">console</span>.log(target.baz); <span class="comment">// qux</span></span><br></pre></td></tr></table></figure><h4 id="陷阱不变量"><a href="#陷阱不变量" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h4><p>陷阱能够广泛地改变几乎任何基本方法的行为，但它们并非没有限制。每个被捕获的方法都能获取到目标对象上下文和陷阱函数签名，陷阱处理函数的行为必须遵守 ECMAScript 规范中指定的“陷阱不变量（trap invariants）”。陷阱不变量因方法而异，但一般而言，它们将防止陷阱定义表现出任何严重意外的行为。</p><p>例如，如果目标对象具有不可配置（non-configurable）和不可写（non-writable）的数据属性，这时尝试从陷阱对象返回与目标对象的属性不同的值，则会抛出 TypeError:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(target, <span class="string">'foo'</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">'bar'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'qux'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);</span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h4 id="可撤销的代理"><a href="#可撤销的代理" class="headerlink" title="可撤销的代理"></a>可撤销的代理</h4><p>有时会需要禁用代理对象和目标对象之间的关联。对于使用 new Proxy()创建的普通代理，此关联将保持代理对象的生命周期。</p><p>Proxy 还公开了一个 revoable()方法，提供了一个附加的撤销函数（revoke function），可以调用该函数将代理对象与目标对象分离。撤销代理是不可逆的，此外，撤销函数是幂等的，如果调用多次，则不会产生更多效果。在代理被撤销后调用任何方法都会抛出一个 TypeError。</p><p>撤销函数可以在实例化时代理捕获:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'intercepted'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; proxy, revoke &#125; = <span class="built_in">Proxy</span>.revocable(target, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// intercepted</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br><span class="line"></span><br><span class="line">revoke();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h4 id="Reflect-API-的实用性"><a href="#Reflect-API-的实用性" class="headerlink" title="Reflect API 的实用性"></a>Reflect API 的实用性</h4><p>在某些情况下有很多原因需要使用 Reflect API。</p><h5 id="Reflect-API-对比-Object-API"><a href="#Reflect-API-对比-Object-API" class="headerlink" title="Reflect API 对比 Object API"></a>Reflect API 对比 Object API</h5><p>当深入使用 Reflect API 时，请记住:</p><ol><li>Reflect API 不仅限于陷阱处理器；</li><li>大多数 Reflect API 方法与 Object 的类似。</li></ol><p>通常，Object 方法适用于一般应用，而 Reflect 方法适用于微调对象控制和操作。</p><h5 id="状态标志"><a href="#状态标志" class="headerlink" title="状态标志"></a>状态标志</h5><p>许多 Reflect 方法返回一个布尔值，表示执行的操作是否成功。在某些情况下，这比其他 Reflect API 方法的行为（将返回修改后的对象或抛出错误）更有用。例如，可以使用 Reflect API 执行以下重构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(o, <span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'failure'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// failure</span></span><br></pre></td></tr></table></figure><p>如果定义新属性出现问题，Reflect.defineProperty 将返回 false，而不是抛出错误，这样就可以执行以下操作:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构后的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Reflect</span>.defineProperty(o, <span class="string">'foo'</span>, &#123; <span class="attr">value</span>: <span class="string">'bar'</span> &#125;)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'failure'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的 Reflect 方法为提供了状态标志:</p><ul><li>Reflect.defineProperty</li><li>Reflect.preventExtensions</li><li>Reflect.setPrototypeOf</li><li>Reflect.set</li><li>Reflect.deleteProperty</li></ul><h5 id="使用头等函数取代操作符"><a href="#使用头等函数取代操作符" class="headerlink" title="使用头等函数取代操作符"></a>使用头等函数取代操作符</h5><p>一些 Reflect 方法提供了只能通过操作符获得的行为:</p><ul><li>Reflect.get()来访问只能通过对象属性访问获得的行为。</li><li>Reflect.set()来访问只能通过赋值操作符访问的行为。</li><li>Reflect.has()来访问只能通过 in 操作符或 with()访问的行为。</li><li>Reflect.deleteProperty()来访问只能通过 delete 操作符访问的行为。</li><li>Reflect.construct()来访问只能通过 new 操作符访问的行为。</li></ul><h5 id="安全的函数应用"><a href="#安全的函数应用" class="headerlink" title="安全的函数应用"></a>安全的函数应用</h5><p>在使用 apply 方法调用函数时，被调用的函数很可能定义了自己的 apply 属性。为了避免这个问题，可以从函数原型中提取 apply 方法，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply.call(myFunc, thisVal, argumentList);</span><br></pre></td></tr></table></figure><p>使用 Reflect.apply 可以避免并完全复制上述糟糕的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.apply(myFunc, thisVal, argumentsList);</span><br></pre></td></tr></table></figure><h4 id="代理一个-Proxy-331"><a href="#代理一个-Proxy-331" class="headerlink" title="代理一个 Proxy 331"></a>代理一个 Proxy 331</h4><p>代理能够拦截 Reflect API 操作，这意味着完全可以创建一个代理的代理。允许在单一目标对象上构建多个间接层:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'first proxy'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(firstProxy, &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'second proxy'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(secondProxy.foo);</span><br><span class="line"><span class="comment">// second proxy</span></span><br><span class="line"><span class="comment">// first proxy</span></span><br><span class="line"><span class="comment">// bar</span></span><br></pre></td></tr></table></figure><h4 id="代理的思考与缺陷"><a href="#代理的思考与缺陷" class="headerlink" title="代理的思考与缺陷"></a>代理的思考与缺陷</h4><p>代理是建立在现有 ECMAScript 基础之上的一种新的 API，因此它们的实现是最有效的。在大多数情况下，代理作为对象的虚拟层来说工作得非常有效。然而，在某些场景中，代理并不总能与现有的 ECMAScript 结构无缝集成。</p><h5 id="代理中的-this"><a href="#代理中的-this" class="headerlink" title="代理中的 this"></a>代理中的 this</h5><p>代理的一个潜在问题来源是 this。正如所期望的那样，方法中的 this 值将取决于被调用的对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  thisValEqualsProxy() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> === proxy;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target.thisValEqualsProxy()); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.thisValEqualsProxy()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>从直观上看，这是正确的行为：在代理上调用的任何方法 proxy.outerMethod()，将在其函数体内调用另一个方法 this.innerMethod()，也就是应该有效地调用 proxy.innerMethod()。在大多数情况下，这当然是预期的行为；但是如果目标依赖于对象标识，则可能会遇到意想不到的问题。</p><p>回想一下集合引用类型（Collection Reference Types）章节中的 WeakMap 私有变量实现，简化版本显示如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(userId) &#123;</span><br><span class="line">    wm.set(<span class="keyword">this</span>, userId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> id(userId) &#123;</span><br><span class="line">    wm.set(<span class="keyword">this</span>, userId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> id() &#123;</span><br><span class="line">    <span class="keyword">return</span> wm.get(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为此实现依赖于 User 实例的对象标识，所以当 user 实例被代理时将遇到问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.id); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInstanceProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(userInstanceProxy.id); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>user 实例最初被键入到带有目标对象的 weakmap 中，但是代理试图用代理对象检索该实例。解决这个问题的办法是重新确定代理的位置，这样初始键的插入就可以通过一个代理实例来完成——这个思路可以通过代理 User 类本身来完成，并实例化该类的一个代理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserClassProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(User, &#123;&#125;);</span><br><span class="line"><span class="keyword">const</span> proxyUser = <span class="keyword">new</span> UserClassProxy(<span class="number">456</span>);</span><br><span class="line"><span class="built_in">console</span>.log(proxyUser.id);</span><br></pre></td></tr></table></figure><h5 id="代理和内部插槽"><a href="#代理和内部插槽" class="headerlink" title="代理和内部插槽"></a>代理和内部插槽</h5><p>通常，内置引用类型的实例可以无缝地与代理一起工作（比如 Array）。但是一些 ECMAScript 内置类型会依赖于代理无法控制的机制。结果就是，封装后实例上的某些方法将无法正常工作。</p><p>这方面的典型示例是 Date 类型。根据 ECMAScript 规范，在执行方法时，Date 类型依赖于此值上名为[[NumberData]]的“内部插槽（Internal Slots）”。因为代理上不存在内部插槽位，而且这些内部插槽值不能通过常规的 get 和 set 操作访问，代理可能会拦截并重定向到目标，且抛出一个 TypeError:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy <span class="keyword">instanceof</span> <span class="built_in">Date</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">proxy.getDate(); <span class="comment">// TypeError: 'this' is not a Date object</span></span><br></pre></td></tr></table></figure><h3 id="代理陷阱和-Reflect-方法"><a href="#代理陷阱和-Reflect-方法" class="headerlink" title="代理陷阱和 Reflect 方法"></a>代理陷阱和 Reflect 方法</h3><p>代理能够捕获十三种不同的基本操作。每个都在 Reflect API、参数、相关的 ECMAScript 操作和不变量中有自己的一部分。</p><p>如前文所述，几个不同的 JavaScript 操作可能会调用同一个陷阱处理器。但是，对于在代理对象上执行的任何单个操作，只会调用一个陷阱处理器；陷阱覆盖范围不重叠。</p><p>如果在代理上调用陷阱，那么它们都将截获对应的 Reflect API 操作。</p><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>get()陷阱在检索属性值的操作中调用，其对应的 Reflect API 方法是 Reflect.get()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, property, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.foo;</span><br><span class="line"><span class="comment">// get()</span></span><br></pre></td></tr></table></figure><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>返回值不受限制。</p><h5 id="被拦截的操作"><a href="#被拦截的操作" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>proxy.property</p></li><li><p>proxy[property]</p></li><li><p>Object.create(proxy)[property]</p></li><li><p>Reflect.get(proxy, property, receiver)</p></li></ul><h5 id="陷阱处理器参数"><a href="#陷阱处理器参数" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target: 目标对象</p></li><li><p>property: 在目标对象上引用的字符串类型键名</p></li><li><p>receiver: 代理对象或其继承继承</p></li></ul><h5 id="陷阱不变量-1"><a href="#陷阱不变量-1" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li><p>如果 target.property 是不可写和不可配置的，处理器返回值必须匹配 target.property。</p></li><li><p>如果 target.property 是不可配置的，并且没有定义它的[[Get]]属性，那么处理器返回值也必须是 undefined。</p></li></ul><h4 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h4><p>set()陷阱在分配属性值的操作中调用，其对应的 Reflect API 方法是 Reflect.set()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="keyword">set</span>(target, property, value, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="comment">// set()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><p>返回值为 true 表示成功；返回值为 false 表示失败，并且在严格模式下将抛出 TypeError。</p><h5 id="被拦截的操作-1"><a href="#被拦截的操作-1" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>proxy.property = value</p></li><li><p>proxy[property] = value</p></li><li><p>Object.create(proxy)[property] = value</p></li><li><p>Reflect.set(proxy, property, value, receiver)</p></li></ul><h5 id="陷阱处理器参数-1"><a href="#陷阱处理器参数-1" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标对象</p></li><li><p>property:在目标对象上引用的字符串类型键名</p></li><li><p>value:分配给属性的值</p></li><li><p>receiver:原始的赋值接收者对象</p></li></ul><h5 id="陷阱不变量-2"><a href="#陷阱不变量-2" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li><p>如果 target.property 是不可写和不可配置的，则不能更改目标属性值。</p></li><li><p>如果 target.property 不可配置且未定义为其[[Set]]属性，则不能更改目标属性值。</p></li><li><p>从处理器返回 false 将在严格模式下抛出 TypeError。</p></li></ul><h4 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h4><p>在 in 操作符中将调用 has()陷阱，其对应的 Reflect API 方法是 Reflect.has()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  has(target, property) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'has()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.has(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="string">'foo'</span> <span class="keyword">in</span> proxy;</span><br><span class="line"><span class="comment">// has()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><p>has()必须返回一个布尔值，指示该属性是否存在。非布尔值将强制转换为布尔值返回。</p><h5 id="被拦截的操作-2"><a href="#被拦截的操作-2" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>property in proxy</p></li><li><p>property in Object.create(proxy)</p></li><li><p>with(proxy) {(property);}</p></li><li><p>Reflect.has(proxy, property)</p></li></ul><h5 id="陷阱处理器参数-2"><a href="#陷阱处理器参数-2" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标对象</p></li><li><p>property:在目标对象上引用的字符串类型键名</p></li></ul><h5 id="陷阱不变量-3"><a href="#陷阱不变量-3" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li><p>如果存在自己的 target.property 且不可配置，则处理器必须返回 true。</p></li><li><p>如果存在自己的 target.property 且目标对象不可扩展，则处理器必须返回 true。</p></li></ul><h4 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty()"></a>defineProperty()</h4><p>defineproperty()陷阱在 Object.defineProperty()内部调用，其对应的 Reflect API 方法是 Reflect.defineProperty()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  defineProperty(target, property, descriptor) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'defineProperty()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.defineProperty(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(proxy, <span class="string">'foo'</span>, &#123; <span class="attr">value</span>: <span class="string">'bar'</span> &#125;);</span><br><span class="line"><span class="comment">// defineProperty()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h5><p>defineproperty()必须返回一个布尔值，指示该属性是否已成功定义。非布尔值将强制转换为布尔值返回。</p><h5 id="被拦截的操作-3"><a href="#被拦截的操作-3" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>Object.defineProperty(proxy, property, descriptor)</p></li><li><p>Reflect.defineProperty(proxy, property, descriptor)</p></li></ul><h5 id="陷阱处理器参数-3"><a href="#陷阱处理器参数-3" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标对象</p></li><li><p>property:在目标对象上引用的字符串类型键名</p></li><li><p>descriptor:包含 enumerable、configurable、writable、value、get 或 set</p></li></ul><h5 id="陷阱不变量-4"><a href="#陷阱不变量-4" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li><p>如果目标对象是不可扩展的，则不能添加属性。</p></li><li><p>如果目标对象具有可配置属性，则不能添加同一键名的不可配置属性。</p></li><li><p>如果目标对象具有不可配置属性，则不能添加同一键名的可配置属性。</p></li></ul><h4 id="getOwnPropertyDescriptor"><a href="#getOwnPropertyDescriptor" class="headerlink" title="getOwnPropertyDescriptor()"></a>getOwnPropertyDescriptor()</h4><p>getownpropertydescriptor()陷阱在 Object.getOwnPropertyDescriptor()内部调用。它对应的 Reflect API 方法是 Reflect.getownpropertydescriptor()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  getOwnPropertyDescriptor(target, property) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getOwnPropertyDescriptor()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getOwnPropertyDescriptor(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">'foo'</span>);</span><br><span class="line"><span class="comment">// getOwnPropertyDescriptor()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h5><p>getownpropertydescriptor()必须返回一个对象，如果属性不存在，则返回 undefined。</p><h5 id="被拦截的操作-4"><a href="#被拦截的操作-4" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>property in proxy</p></li><li><p>property in Object.create(proxy)</p></li><li><p>with(proxy) {(property);}</p></li><li><p>Reflect.has(proxy, property)</p></li></ul><h5 id="陷阱处理器参数-4"><a href="#陷阱处理器参数-4" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标对象</p></li><li><p>property:在目标对象上引用的字符串类型键名</p></li></ul><h5 id="陷阱不变量-5"><a href="#陷阱不变量-5" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li><p>如果存在自己的 target.property 并且不可配置，处理器必须返回一个对象来指示该属性的存在。</p></li><li><p>如果存在自己的 target.property 是并且可配置的，则处理器不能返回一个对象表明该属性可配置。</p></li><li><p>如果存在自己的 target.property 并且 target 是不可扩展的，处理器必须返回一个对象来指示该属性的存在。</p></li><li><p>如果 target.property 不存在，而且 target 是不可扩展的，则处理器必须返回 undefined 以指示该属性不存在。</p></li><li><p>如果 target.property 不存在，则处理器无法返回一个对象指示该属性可配置。</p></li></ul><h4 id="deleteProperty"><a href="#deleteProperty" class="headerlink" title="deleteProperty()"></a>deleteProperty()</h4><p>deleteproperty()陷阱在 delete 运算符内部调用，其对应的 Reflect API 方法是 Reflect.deleteProperty()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  deleteProperty(target, property) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'deleteProperty()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> proxy.foo;</span><br><span class="line"><span class="comment">// deleteProperty()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h5><p>deleteproperty()必须返回一个布尔值，指示该属性是否被成功删除。非布尔值将强制转换为布尔值返回。</p><h5 id="被拦截的操作-5"><a href="#被拦截的操作-5" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>delete proxy.property</p></li><li><p>delete proxy[property]</p></li><li><p>Reflect.deleteProperty(proxy, property)</p></li></ul><h5 id="陷阱处理器参数-5"><a href="#陷阱处理器参数-5" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标对象</p></li><li><p>property:在目标对象上引用的字符串类型键名</p></li></ul><h5 id="陷阱不变量-6"><a href="#陷阱不变量-6" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li>如果存在自己的 target.property 并且不可配置，则处理器不能删除该属性。</li></ul><h4 id="ownKeys"><a href="#ownKeys" class="headerlink" title="ownKeys()"></a>ownKeys()</h4><p>ownkeys()陷阱在 Object.keys()和类似的方法中调用，其对应的 Reflect API 方法是 Reflect.ownKeys()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  ownKeys(target) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ownKeys()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(proxy);</span><br><span class="line"><span class="comment">// ownKeys()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h5><p>ownkeys()必须返回包含字符串或 symbol 的可枚举对象。</p><h5 id="被拦截的操作-6"><a href="#被拦截的操作-6" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>Object.getOwnPropertyNames(proxy)</p></li><li><p>Object.getOwnPropertySymbols(proxy)</p></li><li><p>Object.keys(proxy)</p></li><li><p>Reflect.ownKeys(proxy)</p></li></ul><h5 id="陷阱处理器参数-6"><a href="#陷阱处理器参数-6" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li>target:目标对象</li></ul><h5 id="陷阱不变量-7"><a href="#陷阱不变量-7" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li><p>返回的可枚举对象必须包含目标的所有不可配置的属性。</p></li><li><p>如果 target 是不可扩展的，则返回的可枚举对象必须完全包含 target 的属性键。</p></li></ul><h4 id="getPrototypeOf"><a href="#getPrototypeOf" class="headerlink" title="getPrototypeOf()"></a>getPrototypeOf()</h4><p>getprototypeof()陷阱在 Object.getPrototypeOf()内部调用，其对应的 Reflect API 方法是 Reflect.getPrototypeOf()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  getPrototypeOf(target) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getPrototypeOf()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getPrototypeOf(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(proxy);</span><br><span class="line"><span class="comment">// getPrototypeOf()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h5><p>getprototypeof()必须返回一个对象或 null。</p><h5 id="被拦截的操作-7"><a href="#被拦截的操作-7" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>Object.getPrototypeOf(proxy)</p></li><li><p>Reflect.getPrototypeOf(proxy)</p></li><li><p>proxy.<code>__proto__</code></p></li><li><p>Object.prototype.isPrototypeOf(proxy)</p></li><li><p>proxy instanceof Object</p></li></ul><h5 id="陷阱处理器参数-7"><a href="#陷阱处理器参数-7" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li>target:目标对象</li></ul><h5 id="陷阱不变量-8"><a href="#陷阱不变量-8" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li>如果 target 是不可扩展的，那么 Object.getPrototypeOf(proxy)的唯一有效返回值是从 Object.getPrototypeOf(target)返回的值。</li></ul><h4 id="setPrototypeOf"><a href="#setPrototypeOf" class="headerlink" title="setPrototypeOf()"></a>setPrototypeOf()</h4><p>setPrototypeOf()陷阱在 Object.setPrototypeOf()内部调用，其对应的 Reflect API 方法是 Reflect.setPrototypeOf()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  setPrototypeOf(target, prototype) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setPrototypeOf()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.setPrototypeOf(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(proxy, <span class="built_in">Object</span>);</span><br><span class="line"><span class="comment">// setPrototypeOf()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h5><p>setprototypeof()必须返回一个布尔值，指示原型分配是否成功。非布尔值将强制转换为布尔值返回。</p><h5 id="被拦截的操作-8"><a href="#被拦截的操作-8" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>Object.setPrototypeOf(proxy)</p></li><li><p>Reflect.setPrototypeOf(proxy)</p></li></ul><h5 id="陷阱处理器参数-8"><a href="#陷阱处理器参数-8" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标对象</p></li><li><p>Prototype:目标的预期替换原型，如果这是一个顶级原型，则为 null</p></li></ul><h5 id="陷阱不变量-9"><a href="#陷阱不变量-9" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li>如果目标是不可扩展的，那么唯一有效的原型参数是从 Object.getPrototypeOf(target)返回的值。</li></ul><h4 id="isExtensible"><a href="#isExtensible" class="headerlink" title="isExtensible()"></a>isExtensible()</h4><p>isextensible()陷阱被 Object.isExtensible()内部调用，其对应的 Reflect API 方法是 Reflect.isExtensible ()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  isExtensible(target) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'isExtensible()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.isExtensible(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(proxy);</span><br><span class="line"><span class="comment">// isExtensible()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h5><p>isextensible()必须返回一个布尔值，指示是否可扩展。非布尔值将强制转换为布尔值返回。</p><h5 id="被拦截的操作-9"><a href="#被拦截的操作-9" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>Object.isExtensible(proxy)</p></li><li><p>Reflect.isExtensible(proxy)</p></li></ul><h5 id="陷阱处理器参数-9"><a href="#陷阱处理器参数-9" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li>target:目标对象</li></ul><h5 id="陷阱不变量-10"><a href="#陷阱不变量-10" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li><p>如果目标是可扩展的，则处理器必须返回 true。</p></li><li><p>如果目标是不可扩展的，处理器必须返回 false。</p></li></ul><h4 id="preventExtensions"><a href="#preventExtensions" class="headerlink" title="preventExtensions()"></a>preventExtensions()</h4><p>preventextensions()陷阱在 Object.preventExtensions()内部调用，其对应的反映 API 方法是 Reflect.preventExtensions()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  preventExtensions(target) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'preventExtensions()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.preventExtensions(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(proxy);</span><br><span class="line"><span class="comment">// preventExtensions()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h5><p>preventextensions()必须返回一个布尔值，指示目标是否成功被设置为不可扩展。</p><h5 id="被拦截的操作-10"><a href="#被拦截的操作-10" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>Object.preventExtensions(proxy)</p></li><li><p>Reflect.preventExtensions(proxy)</p></li></ul><h5 id="陷阱处理器参数-10"><a href="#陷阱处理器参数-10" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li>target:目标对象</li></ul><h5 id="陷阱不变量-11"><a href="#陷阱不变量-11" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li>如果 Object.isExtensible(proxy)为 false，则处理器必须返回 true。</li></ul><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><p>当函数调用时会调用 apply()陷阱，其对应的 Reflect API 方法是 Reflect.apply()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  apply(target, thisArg, ...argumentsList) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'apply()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy();</span><br><span class="line"><span class="comment">// apply()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h5><p>返回值不受限制。</p><h5 id="被拦截的操作-11"><a href="#被拦截的操作-11" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>proxy(…argumentsList)</p></li><li><p>Function.prototype.apply(thisArg, argumentsList)</p></li><li><p>Function.prototype.call(thisArg, …argumentsList)</p></li><li><p>Reflect.apply(target, thisArgument, argumentsList)</p></li></ul><h5 id="陷阱处理器参数-11"><a href="#陷阱处理器参数-11" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标对象</p></li><li><p>thisArg:函数调用的 this 参数</p></li><li><p>argumentsList:函数调用的参数列表</p></li></ul><h5 id="陷阱不变量-12"><a href="#陷阱不变量-12" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li>target 必须是函数对象。</li></ul><h4 id="construct"><a href="#construct" class="headerlink" title="construct()"></a>construct()</h4><p>在 new 操作符内部调用 construct()陷阱，其对应的 Reflect API 方法是 Reflect.construct()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  construct(target, argumentsList, newTarget) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'construct()'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.construct(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> proxy();</span><br><span class="line"><span class="comment">// construct()</span></span><br></pre></td></tr></table></figure><h5 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h5><p>construct()必须返回一个对象。</p><h5 id="被拦截的操作-12"><a href="#被拦截的操作-12" class="headerlink" title="被拦截的操作"></a>被拦截的操作</h5><ul><li><p>new proxy(…argumentsList)</p></li><li><p>Reflect.construct(target, argumentsList, newTarget)</p></li></ul><h5 id="陷阱处理器参数-12"><a href="#陷阱处理器参数-12" class="headerlink" title="陷阱处理器参数"></a>陷阱处理器参数</h5><ul><li><p>target:目标构造函数</p></li><li><p>argumentsList:传递给目标构造函数的参数列表</p></li><li><p>newTarget:最初被调用的构造函数</p></li></ul><h5 id="陷阱不变量-13"><a href="#陷阱不变量-13" class="headerlink" title="陷阱不变量"></a>陷阱不变量</h5><ul><li>target 必须能够用作构造函数。</li></ul><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>Proxy API 允许在代码中使用一些非常有用的模式。</p><h4 id="跟踪属性访问"><a href="#跟踪属性访问" class="headerlink" title="跟踪属性访问"></a>跟踪属性访问</h4><p>get、set 和 has 使能够完全洞察对象属性何时被访问和检查。如果在应用程序中提供了一个含有陷阱的代理，将能够准确地看到这个对象被访问的时间和位置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">'Jake'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, property, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Getting $&#123;property&#125;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(target, property, value, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Setting $&#123;property&#125;=$&#123;value&#125;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.name; <span class="comment">// Getting name</span></span><br><span class="line">proxy.age = <span class="number">27</span>; <span class="comment">// Setting age=27</span></span><br></pre></td></tr></table></figure><h4 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h4><p>在远程代码中，代理的内部结构完全隐藏，因此很容易隐藏目标对象上属性的存在。例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hiddenProperties = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</span><br><span class="line"><span class="keyword">const</span> targetObject = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span>,</span><br><span class="line">  baz: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetObject, &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, property) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hiddenProperties.includes(property)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  has(target, property) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hiddenProperties.includes(property)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.has(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get()</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.bar); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.baz); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo'</span> <span class="keyword">in</span> proxy); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bar'</span> <span class="keyword">in</span> proxy); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'baz'</span> <span class="keyword">in</span> proxy); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="属性验证"><a href="#属性验证" class="headerlink" title="属性验证"></a>属性验证</h4><p>因为所有赋值都必须经过 set()陷阱，所以可以基于期望值的内容来允许或拒绝赋值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  onlyNumbersGoHere: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">  <span class="keyword">set</span>(target, property, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">'Number'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.onlyNumbersGoHere = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.onlyNumbersGoHere); <span class="comment">// 1</span></span><br><span class="line">proxy.onlyNumbersGoHere = <span class="string">'2'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.onlyNumbersGoHere); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="函数和构造函数的参数验证"><a href="#函数和构造函数的参数验证" class="headerlink" title="函数和构造函数的参数验证"></a>函数和构造函数的参数验证</h4><p>与对象属性被验证和保护的方式相同，函数和构造函数的参数也可被审查。例如，一个函数可以确保它只提供特定类型的值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">median</span>(<span class="params">...nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nums.sort()[<span class="built_in">Math</span>.floor(nums.length / <span class="number">2</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(median, &#123;</span><br><span class="line">  apply(target, thisArg, ...argumentsList) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> arg <span class="keyword">of</span> argumentsList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> arg !== <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'Non-number argument provided'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy(<span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy(<span class="number">4</span>, <span class="string">'7'</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">// Error: Non-number argument provided</span></span><br></pre></td></tr></table></figure><p>类似地，构造函数可以强制构造函数的必填参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id_ = id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(User, &#123;</span><br><span class="line">  construct(target, argumentsList, newTarget) &#123;</span><br><span class="line">    <span class="keyword">if</span> (argumentsList[<span class="number">0</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">'User cannot be instantiated without id'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.construct(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> proxy(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> proxy();</span><br><span class="line"><span class="comment">// Error: User cannot be instantiated without id</span></span><br></pre></td></tr></table></figure><h4 id="数据绑定和观察"><a href="#数据绑定和观察" class="headerlink" title="数据绑定和观察"></a>数据绑定和观察</h4><p>代理允许将运行时的各个完全不同的部分缠绕在一起。这就导致了允许各种各样的模式，能使不同的代码位相互交互。</p><p>例如，代理类可以绑定到一个全局实例集合，这样每个创建的实例都会被添加到该集合中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userList = [];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name_ = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(User, &#123;</span><br><span class="line">  construct() &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="built_in">Reflect</span>.construct(...arguments);</span><br><span class="line">    userList.push(newUser);</span><br><span class="line">    <span class="keyword">return</span> newUser;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> proxy(<span class="string">'John'</span>);</span><br><span class="line"><span class="keyword">new</span> proxy(<span class="string">'Jacob'</span>);</span><br><span class="line"><span class="keyword">new</span> proxy(<span class="string">'Jingleheimerschmidt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(userList); <span class="comment">// [User &#123;&#125;, User &#123;&#125;, User&#123;&#125;]</span></span><br></pre></td></tr></table></figure><p>或者，一个集合可以绑定到一个发射器，这个发射器会在每次插入一个新实例时发射:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userList = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emit</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(userList, &#123;</span><br><span class="line">  <span class="keyword">set</span>(target, property, value, receiver) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      emit(<span class="built_in">Reflect</span>.get(target, property, receiver));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.push(<span class="string">'John'</span>);</span><br><span class="line"><span class="comment">// John</span></span><br><span class="line">proxy.push(<span class="string">'Jacob'</span>);</span><br><span class="line"><span class="comment">// Jacob</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>代理是 ECMAScript6 规范中最令人兴奋和激动的新增部分之一。尽管不支持向后编译，但是它们支持一个以前不可用的全新的元语法和抽象领域。</p><p>在高层次上，代理是一个真实 JavaScript 对象的透明虚拟层。在创建代理时，可以定义一个包含陷阱的处理器对象，这些陷阱是几乎所有基本的 JavaScript 运算符和方法都会遇到的拦截点。尽管由陷阱不变量绑定，这些陷阱捕获器允许修改这些基本方法的操作方式。</p><p>与代理一起出现的是 Reflect API，它提供了一组方法，这些方法封装了每个陷阱拦截的行为。可以将 Reflect API 看作是基本操作的集合，这些操作是几乎所有 JavaScript 对象 API 的构建模块。</p><p>代理的实用性几乎是无界的，它允许开发者使用优雅的新模式，例如跟踪属性访问、隐藏属性、防止修改或删除属性、函数参数验证、构造函数参数验证、数据绑定和观察等。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS高程 </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> 第4版 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> 代理 </tag>
            
            <tag> Proxy </tag>
            
            <tag> 反射 </tag>
            
            <tag> Reflect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高程第4版新增章节翻译：CLASSES</title>
      <link href="/posts/a9658a46.html"/>
      <url>/posts/a9658a46.html</url>
      
        <content type="html"><![CDATA[<p>下述内容翻译自 Professional JavaScript for Web Developes,4th Edition（<a href="https://www.ituring.com.cn/book/2472" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 高级程序设计第四版</a>），251 页，Objects, Classes, and Object-Oriented Programming （对象、类和面向对象）章节内，前半部分与第三版的 138 页第 6 章<code>面向对象的程序设计</code>相似，所以主要翻译后半部分 302 页——<code>CLASSES</code>。</p><a id="more"></a><h3 id="类（CLASSES）"><a href="#类（CLASSES）" class="headerlink" title="类（CLASSES）"></a>类（CLASSES）</h3><p>前面的部分是深入描述了如何使用 ECMAScript5 中可用的特性来模拟类（class）行为。可以发现存在各种问题和折中处理。除此之外，语法也过于冗长和混乱。</p><p>为了解决这些问题，ECMAScript6 中新引入了 class 关键字来正式定义类。类在 ECMAScript 中基本上是一个新的语法构造，因此起初可能会感到陌生。虽然 ECMAScript6 类似乎具有标准的面向对象程序设计，但是本质上仍然使用原型和构造函数的概念。</p><h4 id="类定义基础"><a href="#类定义基础" class="headerlink" title="类定义基础"></a>类定义基础</h4><p>与函数类型类似，定义类有两种主要方式:类声明和类表达式。两者都使用了 class 关键字和大括号:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 类表达式</span></span><br><span class="line"><span class="keyword">const</span> Animal = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>与函数表达式一样，只有在类表达式执行后才能被引用。然而，与函数定义的行为有一个重要的不同，函数声明会被提升，类声明不会提升:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(FunctionExpression); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> FunctionExpression = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(FunctionExpression); <span class="comment">// function() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(FunctionDeclaration); <span class="comment">// FunctionDeclaration() &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunctionDeclaration</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(FunctionDeclaration); <span class="comment">// FunctionDeclaration() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ClassExpression); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> ClassExpression = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(ClassExpression); <span class="comment">// class &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ClassDeclaration); <span class="comment">// ReferenceError: ClassDeclaration is not defined</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassDeclaration</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ClassDeclaration); <span class="comment">// class ClassDeclaration &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>与函数声明不同的是，类声明的作用域是块级:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FunctionDeclaration</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ClassDeclaration</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(FunctionDeclaration); <span class="comment">// FunctionDeclaration() &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ClassDeclaration); <span class="comment">// ReferenceError: ClassDeclaration is not defined</span></span><br></pre></td></tr></table></figure><h5 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h5><p>一个类可以由类构造函数方法、实例方法、getter、setter 和静态类方法组成。这些都不是显式必需的；空类定义也是有效的语法。默认情况下，类定义中的所有内容都以严格模式（strict mode）执行。</p><p>与函数式构造函数一样，类名一般大写，以便区分从类中创建的实例（例如，类 Foo{}可能创建一个实例 Foo）:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空类定义有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 带有constructor的类定义有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带有getter的类定义有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> myBaz() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带有静态方法的类定义有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qux</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myQux() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类表达式可以带有可选的命名。当表达式分配给变量时，可以使用 name 属性检索类表达式名称字符串，但是标识符本身不能超出类表达式作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="class"><span class="keyword">class</span> <span class="title">PersonName</span> </span>&#123;</span><br><span class="line">  identify() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Person.name, PersonName.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.identify(); <span class="comment">// PersonName, PersonName</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.name); <span class="comment">// PersonName</span></span><br><span class="line"><span class="built_in">console</span>.log(PersonName); <span class="comment">// ReferenceError: PersonName is not defined</span></span><br></pre></td></tr></table></figure><h4 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h4><p>在类定义代码块中使用 constructor 关键字来指示类中构造函数的定义。使用方法名 constructor 将向解释器发出信号，告诉它应该调用特定的函数来使用 new 操作符创建一个新的实例。constructor 的定义是可选的。不定义类 constructor 和定义 constructor 为空函数是一样的。</p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>使用 new 操作符实例化 一个 Person 类 的操作与实例化一个构造函数的操作相同。唯一可以感觉到的区别是 JavaScript 解释器明白在类中使用 new 意味着 constructor 应该用于实例化。</p><p>使用 new 调用类中的 constructor 会执行以下操作:</p><ul><li>在内存中创建一个新对象。</li><li>新对象的内部[[Prototype]]指针被指定为 constructor 的 prototype 属性。</li><li>constructor 的 this 值被分配给新对象(因此当在 constructor 内部引用时，this 指向新对象)。</li><li>执行 constructor 中的代码(将属性添加到新对象中)。</li><li>如果 constructor 返回一个对象，则返回该对象。否则，将返回刚刚创建的新对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'person ctor'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'orange'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(); <span class="comment">// person ctor</span></span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> Vegetable();</span><br><span class="line"><span class="built_in">console</span>.log(v.color); <span class="comment">// orange</span></span><br></pre></td></tr></table></figure><p>实例化类时提供的参数用作 constructor 的参数。如果不需要使用参数，实例化时类名后面的空括号是可选的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">    <span class="keyword">this</span>.name = name || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.name); <span class="comment">// null</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.name); <span class="comment">// null</span></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> Person(<span class="string">'Jake'</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(p3.name); <span class="comment">// Jake</span></span><br></pre></td></tr></table></figure><p>默认情况下，constructor 将在执行后返回 this 对象。如果从构造函数返回一个对象，该对象将被用作实例化对象，如果对该对象的引用没有保留，则新创建的该对象将被丢弃。但是，如果返回一个不同的对象，返回的对象将不会通过 instanceof 与类关联，因为新对象的原型指针从未被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(override) &#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="string">'foo'</span>;</span><br><span class="line">    <span class="keyword">if</span> (override) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        bar: <span class="string">'bar'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(),</span><br><span class="line">  p2 = <span class="keyword">new</span> Person(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1); <span class="comment">// Person&#123; foo: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2); <span class="comment">// &#123; bar: 'bar' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>与构造函数的一个主要区别是，使用带有 constructor 的类时 new 运算符是强制性的。对于函数构造函数，当选择不使用 new 运算符时，构造函数将使用构造函数内部的全局 this 值(通常是 window 对象)。对于带有 constructor 的类，忽略 new 操作符会抛出一个错误:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 构造函数直接调用时使用window作为this</span></span><br><span class="line"><span class="keyword">let</span> p = Person();</span><br><span class="line"><span class="keyword">let</span> a = Animal();</span><br><span class="line"><span class="comment">// TypeError: class constructor Animal cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure><p>类的 constructor 方法并不特殊，在实例化之后，它的行为与常规实例方法相同(具有相同的构造函数限制)。正因为如此，可以在实例化后引用和使用它:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 使用该类创建一个新的实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.constructor();</span><br><span class="line"><span class="comment">// TypeError: Class constructor Person cannot be invoked without 'new'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指向类的constructor的引用创建一个新的实例</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> p1.constructor();</span><br></pre></td></tr></table></figure><h5 id="类是一个特殊函数"><a href="#类是一个特殊函数" class="headerlink" title="类是一个特殊函数"></a>类是一个特殊函数</h5><p>在 ECMAScript 规范中没有正式的类这个类型，而且 ECMAScript 类的行为在许多方面与特殊函数类似。一旦声明，当使用 typeof 操作符检查时，类标识符标识为一个函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person); <span class="comment">// class Person &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person); <span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>类标识符有一个 prototype 属性，prototype 有一个引用类本身的 constructor 属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype); <span class="comment">// &#123; constructor: f() &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Person === Person.prototype.constructor); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>和函数构造函数一样，可以使用 instanceof 运算符来测试构造函数的原型是否出现在实例的原型链中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>instanceof 操作符实际上是检查实例的原型链和构造函数，在这个例子中，构造函数将检查实例 p 和构造函数 Person，后者看起来是一个类。</p><p>如前所述，类的行为方式与构造函数相同，并且在类的上下文中，当 new 操作符应用到类时，类本身被认为是构造函数。重要的是，类定义中的 constructor 方法不被认为是构造函数，并且在与 instanceof 一起使用时将返回 false。但是如果 constructor 方法是直接调用的，就使用非类的构造函数是一样的，instanceof 结果就会相反:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor === Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person.constructor); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person.constructor();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor === Person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person.constructor); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类是 JavaScript 中的一等公民，这意味着它们可以像传递其他对象或函数引用一样传递:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类可以在函数能定义的任何地方定义，比如在数组中：</span></span><br><span class="line"><span class="keyword">let</span> classList = [</span><br><span class="line">  <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.id_ = id;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'instance $&#123;this.id_&#125;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">classDefinition, id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> classDefinition(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo = createInstance(classList[<span class="number">0</span>], <span class="number">3141</span>); <span class="comment">// 实例 3141</span></span><br></pre></td></tr></table></figure><p>与直接调用的函数表达式相似，类也可以直接实例化:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是一个类表达式，所以类名是可选的</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> (<span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="string">'bar'</span>); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">// Foo &#123;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="实例成员、原型成员和类自身成员"><a href="#实例成员、原型成员和类自身成员" class="headerlink" title="实例成员、原型成员和类自身成员"></a>实例成员、原型成员和类自身成员</h4><p>类定义的语法允许简洁地定义对象实例上的成员、对象原型上的成员以及类本身的成员。</p><h5 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h5><p>每次调用<code>new &lt;classname&gt;</code> 时，构造函数都将执行。在这个函数内部，可以用任何属性填充新创建的实例(this 对象)。对于可以添加到新实例的内容没有限制，对于在构造函数退出后添加的成员也没有限制。</p><p>每个实例都分配了唯一的成员对象，也就是说原型上没有任何东西是共享的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 对于这个例子来说，使用对象封装器定义一个字符串，来检查不同实例间是否共享</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'Jack'</span>);</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    <span class="keyword">this</span>.nicknames = [<span class="string">'Jake'</span>, <span class="string">'J-Dog'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(),</span><br><span class="line">  p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.sayName(); <span class="comment">// Jack</span></span><br><span class="line">p2.sayName(); <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.name === p2.name); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.nicknames === p2.nicknames); <span class="comment">// false</span></span><br><span class="line">p1.name = p1.nicknames[<span class="number">0</span>];</span><br><span class="line">p2.name = p2.nicknames[<span class="number">1</span>];</span><br><span class="line">p1.sayName(); <span class="comment">// Jake</span></span><br><span class="line">p2.sayName(); <span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><h5 id="原型方法和访问器"><a href="#原型方法和访问器" class="headerlink" title="原型方法和访问器"></a>原型方法和访问器</h5><p>为了允许不同实例之间共享方法，类的定义语法允许在类体内的原型对象上定义方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 任何定义在this的内容将会是实例自己单独拥有</span></span><br><span class="line">    <span class="keyword">this</span>.locate = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'instance'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 任何直接定义在类定义语句块内的内容将会在类原型对象上拥有</span></span><br><span class="line">  locate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'prototype'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.locate(); <span class="comment">// instance</span></span><br><span class="line">Person.prototype.locate(); <span class="comment">// prototype</span></span><br></pre></td></tr></table></figure><p>方法可以在任何一个位置定义，但成员数据，如原始类型和对象，不能添加到类定义语句块内的原型上:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: <span class="string">'Jake'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected token :</span></span><br></pre></td></tr></table></figure><p>类方法的行为与对象属性相同，这意味着它们可以用字符串、symbols 或计算值作为键值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolKey = <span class="built_in">Symbol</span>(<span class="string">'symbolKey'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  stringKey() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'invoked stringKey'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  [symbolKey]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'invoked symbolKey'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="string">'computed'</span> + <span class="string">'Key'</span>]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'invoked computedKey'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.stringKey(); <span class="comment">// invoked stringKey</span></span><br><span class="line">p[symbolKey](); <span class="comment">// invoked symbolKey</span></span><br><span class="line">p.computedKey(); <span class="comment">// invoked computedKey</span></span><br></pre></td></tr></table></figure><p>类定义也支持 getter 和 setter 访问器。语法和行为与普通对象相同:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">set</span> name(newName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name_ = newName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name_;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">'Jake'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// Jake</span></span><br></pre></td></tr></table></figure><h5 id="类静态方法和访问器"><a href="#类静态方法和访问器" class="headerlink" title="类静态方法和访问器"></a>类静态方法和访问器</h5><p>也可以在类自身上定义方法。在函数执行时不以特定实例为中心并且实际上不需要实例存在的情况下，可以使用这些类。像原型成员一样，每个类静态成员只需创建一次。</p><p>在类定义中，使用 static 关键字作为前缀来指定静态类成员。在静态成员内部，this 指的是类本身。所有的其他约定与原型成员相同:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 任何定义在this的内容将会是实例自己单独拥有</span></span><br><span class="line">    <span class="keyword">this</span>.locate = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'instance'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在类的原型对象上定义</span></span><br><span class="line">  locate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'prototype'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在类上定义</span></span><br><span class="line">  <span class="keyword">static</span> locate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'class'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.locate(); <span class="comment">// instance, Person &#123;&#125;</span></span><br><span class="line">Person.prototype.locate(); <span class="comment">// prototype, &#123;constructor: ... &#125;</span></span><br><span class="line">Person.locate(); <span class="comment">// class, class Person &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>这些静态类方法经常作为实例的工厂函数使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age_ = age;</span><br><span class="line">  &#125;</span><br><span class="line">  sayAge() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> create() &#123;</span><br><span class="line">    <span class="comment">// 创建并返回一个随机年龄的person实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.create()); <span class="comment">// Person &#123; age_:... &#125;</span></span><br></pre></td></tr></table></figure><h5 id="非函数的原型成员和类成员"><a href="#非函数的原型成员和类成员" class="headerlink" title="非函数的原型成员和类成员"></a>非函数的原型成员和类成员</h5><p>尽管类定义并不显式支持向原型或类添加数据成员，但在类定义之外可以手动添加它们:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'$&#123;Person.greeting&#125; $&#123;this.name&#125;'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在类上定义数据</span></span><br><span class="line">Person.greeting = <span class="string">'My name is'</span>;</span><br><span class="line"><span class="comment">// 在原型上定义数据</span></span><br><span class="line">Person.prototype.name = <span class="string">'Jake'</span>;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.sayName(); <span class="comment">// My name is Jake</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:不显式允许定义属性的主要原因是，共享对象中的可变数据成员可能是反面模式。通常，对象实例应该直接拥有它们从 this 引用的数据。</p></blockquote><h5 id="迭代器和生成器方法"><a href="#迭代器和生成器方法" class="headerlink" title="迭代器和生成器方法"></a>迭代器和生成器方法</h5><p>类定义的语法允许在原型和类本身上定义生成器方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在原型上定义生成器</span></span><br><span class="line">  *createNicknameIterator() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'Jack'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'Jake'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'J-Dog'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在类上定义生成器</span></span><br><span class="line">  <span class="keyword">static</span> *createJobIterator() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'Butcher'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'Baker'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'Candlestick maker'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jobIter = Person.createJobIterator();</span><br><span class="line"><span class="built_in">console</span>.log(jobIter.next().value); <span class="comment">// Butcher</span></span><br><span class="line"><span class="built_in">console</span>.log(jobIter.next().value); <span class="comment">// Baker</span></span><br><span class="line"><span class="built_in">console</span>.log(jobIter.next().value); <span class="comment">// Candlestick maker</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> nicknameIter = p.createNicknameIterator();</span><br><span class="line"><span class="built_in">console</span>.log(nicknameIter.next().value); <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(nicknameIter.next().value); <span class="comment">// Jake</span></span><br><span class="line"><span class="built_in">console</span>.log(nicknameIter.next().value); <span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><p>因为支持生成器方法，所以可以通过添加默认迭代器使类实例可迭代:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.nicknames = [<span class="string">'Jack'</span>, <span class="string">'Jake'</span>, <span class="string">'J-Dog'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="keyword">this</span>.nicknames.entries();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [idx, nickname] <span class="keyword">of</span> p) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Jack</span></span><br><span class="line"><span class="comment">// Jake</span></span><br><span class="line"><span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><p>或者只返回一个迭代器实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.nicknames = [<span class="string">'Jack'</span>, <span class="string">'Jake'</span>, <span class="string">'J-Dog'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nicknames.entries();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [idx, nickname] <span class="keyword">of</span> p) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Jack</span></span><br><span class="line"><span class="comment">// Jake</span></span><br><span class="line"><span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>在本章的前文中，讨论了使用 ES5 机制实现继承的繁琐细节。ECMAScript6 规范中最好的补充之一是对类的继承机制的原生支持。尽管使用了一种新的语法，但类的继承本质上仍然使用原型链。</p><h5 id="继承基础"><a href="#继承基础" class="headerlink" title="继承基础"></a>继承基础</h5><p>ES6 类支持单一继承格式。使用 extends 关键字，可以继承任何具有[[Construct]]属性和原型的对象。在大多数情况下是从另一个类继承，但这也允许继承自构造函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承自类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bus); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Vehicle); <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承自构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engineer</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> e = <span class="keyword">new</span> Engineer();</span><br><span class="line"><span class="built_in">console</span>.log(e <span class="keyword">instanceof</span> Engineer); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(e <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类静态方法和原型方法都传递到子类。this 值反映了调用方法的类和实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  identifyPrototype(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> identifyClass(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> Vehicle();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line">b.identifyPrototype(<span class="string">'bus'</span>); <span class="comment">// bus, Bus &#123;&#125;</span></span><br><span class="line">v.identifyPrototype(<span class="string">'vehicle'</span>); <span class="comment">// vehicle, Vehicle &#123;&#125;</span></span><br><span class="line">Bus.identifyClass(<span class="string">'bus'</span>); <span class="comment">// bus, class Bus &#123;&#125;</span></span><br><span class="line">Vehicle.identifyClass(<span class="string">'vehicle'</span>); <span class="comment">// vehicle, class Vehicle &#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:extends 关键字在类表达式中是有效的，所以 let Bar = class extends Foo {}是完全有效的语法。</p></blockquote><h5 id="Constructors、HomeObjects-和-super"><a href="#Constructors、HomeObjects-和-super" class="headerlink" title="Constructors、HomeObjects 和 super()"></a>Constructors、HomeObjects 和 super()</h5><p>子类的方法可以通过 super 关键字去引用它们的原型。这只对子类有效，并且只能在 constructor 或静态方法内部使用。在 constructor 内部使用 super 来控制何时调用父类的 constructor。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hasEngine = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 在super之前不能引用this，否则会抛出ReferenceError</span></span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">// 与super.constructor()相同</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vehicle); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// Bus &#123; hasEngine: true &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus();</span><br></pre></td></tr></table></figure><p>也可以在静态方法内部使用 super 来调用父类上定义的静态方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> identify() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'vehicle'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> identify() &#123;</span><br><span class="line">    <span class="keyword">super</span>.identify();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Bus.identify(); <span class="comment">// vehicle</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：ES6 给构造函数和静态方法一个内部[[HomeObject]]的引用，指向定义方法的对象。这个指针是自动分配的，并且只能在 JavaScript 引擎内部访问。Super 总是被定义为[[HomeObject]的原型。</p></blockquote><p>使用 super 时需要注意的事项:</p><p>➤ 仅能在子类构造函数或静态方法中使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">// SyntaxError: 'super' keyword unexpected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>➤ super 关键字本身不能引用；它必须作为构造函数调用，或者用于静态方法中引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">super</span>);</span><br><span class="line">    <span class="comment">// SyntaxError: 'super' keyword unexpected here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>➤ 调用 super()时将调用父类 constructor 且会将生成的实例赋给 this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vehicle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>➤ super()表现得像一个构造函数，必须手动的传参给 super()以传给父类的 constructor。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(licensePlate) &#123;</span><br><span class="line">    <span class="keyword">this</span>.licensePlate = licensePlate;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(licensePlate) &#123;</span><br><span class="line">    <span class="keyword">super</span>(licensePlate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Bus(<span class="string">'1337H4X'</span>)); <span class="comment">// Bus &#123; licensePlate: '1337H4X' &#125;</span></span><br></pre></td></tr></table></figure><p>➤ 如果子类不定义 constructor，那么将自动调用 super()，并将所有参数传递给父类的 constructor。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(licensePlate) &#123;</span><br><span class="line">    <span class="keyword">this</span>.licensePlate = licensePlate;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Bus(<span class="string">'1337H4X'</span>)); <span class="comment">// Bus &#123; licensePlate: '1337H4X' &#125;</span></span><br></pre></td></tr></table></figure><p>➤ 在调用 super()之前，不能在 constructor 中引用 this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus();</span><br><span class="line"><span class="comment">// ReferenceError: Must call super constructor in derived class</span></span><br><span class="line"><span class="comment">// before accessing 'this' or returning from derived constructor</span></span><br></pre></td></tr></table></figure><p>➤ 如果类派生自父类，并且显式定义了 constructor，则必须调用 super()或从返回一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Van</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Car()); <span class="comment">// Car &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Bus()); <span class="comment">// Bus &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Van()); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h5><p>有时可能会需要定义一个应该从中继承但不能直接实例化的抽象基类。尽管 ECMAScript 不显式支持此功能，但使用 new.target 可以轻松实现，它会告诉你与 new 关键字一起使用的内容。可以通过检查 new.target 是否为抽象基类来防止直接实例化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === Vehicle) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Vehicle cannot be directly instantiated'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Bus(); <span class="comment">// class Bus &#123;&#125;</span></span><br><span class="line"><span class="keyword">new</span> Vehicle(); <span class="comment">// class Vehicle &#123;&#125;</span></span><br><span class="line"><span class="comment">// Error: Vehicle cannot be directly instantiated</span></span><br></pre></td></tr></table></figure><p>也可能需要通过在抽象基类 constructor 中检查子类上定义的方法。因为原型方法在调用 constructor 之前就已经存在，所以可以在 this 关键字上检查它们：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === Vehicle) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Vehicle cannot be directly instantiated'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.foo) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Inheriting class must define foo()'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  foo() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Van</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Bus(); <span class="comment">// 成功！</span></span><br><span class="line"><span class="keyword">new</span> Van(); <span class="comment">// Error: Inheriting class must define foo()</span></span><br></pre></td></tr></table></figure><h5 id="内置类型继承"><a href="#内置类型继承" class="headerlink" title="内置类型继承"></a>内置类型继承</h5><p>ES6 类与现有内置引用类型可以无缝互操作，因此可以轻松地扩展它们:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  shuffle() &#123;</span><br><span class="line">    <span class="comment">// Fisher-Yates洗牌算法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">      [<span class="keyword">this</span>[i], <span class="keyword">this</span>[j]] = [<span class="keyword">this</span>[j], <span class="keyword">this</span>[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> SuperArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> SuperArray); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">a.shuffle();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [3, 1, 4, 5, 2]</span></span><br></pre></td></tr></table></figure><p>一些内置类型定义了返回新实例的方法。默认情况下，该实例可以匹配子类的类型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> SuperArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = a1.filter(<span class="function">(<span class="params">x</span>) =&gt;</span> !!(x % <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a1); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// [1, 3, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 <span class="keyword">instanceof</span> SuperArray); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 <span class="keyword">instanceof</span> SuperArray); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果要重写此方法，可以重写 Symbol.species 访问器，该访问器用于确定用于返回实例的类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> SuperArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = a1.filter(<span class="function">(<span class="params">x</span>) =&gt;</span> !!(x % <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a1); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// [1, 3, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 <span class="keyword">instanceof</span> SuperArray); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 <span class="keyword">instanceof</span> SuperArray); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h5 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h5><p>Javascript 中的一个常见模式是将来自几个不同类的行为捆绑到一个包中。尽管 ES6 类不显式支持多继承，但提供了可以巧妙运用的扩展方式以模拟这种行为。</p><blockquote><p>注意:Object.assign()方法旨在从多个对象中提供混合行为。只有当采用类的形式时，才需要实现自己的 mixin 表达式。如果只需要在多个对象之间合并属性，则应该使用 Object.assign()。</p></blockquote><p>Extends 关键字后面的引用是一个 JavaScript 表达式。只要解析为类或函数构造函数，任何语法在那个位置都是有效的。当类定义被计算时时，表达式也会被求值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParentClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'evaluated expression'</span>);</span><br><span class="line">  <span class="keyword">return</span> Vehicle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">getParentClass</span>() </span>&#123;&#125;</span><br><span class="line"><span class="comment">// evaluated expression</span></span><br></pre></td></tr></table></figure><p>可以通过在表达式中链接多混入元素来实现多继承模式，这些元素将解析为一个可以从中继承的类。如果一个类 Person 需要混入 A、B 和 C，那么可以构建一个模式，将 B 从 A 继承，C 从 B 继承，Person 从 C 继承，从而将所有三个类连接到超类中。有几种策略可以实现这种模式。</p><p>一种策略是定义接受超类作为参数的嵌套函数，将混入类定义为参数的子类，并返回该类。这些混入类可以在彼此内部链接，并作为超类表达式提供:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> FooMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">    foo() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">let</span> BarMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">    bar() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'bar'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">let</span> BazMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">    baz() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'baz'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">FooMixin</span>(<span class="title">BarMixin</span>(<span class="title">BazMixin</span>(<span class="title">Vehicle</span>))) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line">b.foo(); <span class="comment">// foo</span></span><br><span class="line">b.bar(); <span class="comment">// bar</span></span><br><span class="line">b.baz(); <span class="comment">// baz</span></span><br></pre></td></tr></table></figure><p>也可以使用一个工具函数使嵌套扁平化:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> FooMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">    foo() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">let</span> BarMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">    bar() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'bar'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">let</span> BazMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">    baz() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'baz'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params">BaseClass, ...Mixins</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Mixins.reduce(</span><br><span class="line">    (accumulator, current) =&gt; current(accumulator),</span><br><span class="line">    BaseClass</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">mix</span>(<span class="title">Vehicle</span>, <span class="title">FooMixin</span>, <span class="title">BarMixin</span>, <span class="title">BazMixin</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line">b.foo(); <span class="comment">// foo</span></span><br><span class="line">b.bar(); <span class="comment">// bar</span></span><br><span class="line">b.baz(); <span class="comment">// baz</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：许多 JavaScript 框架，特别是 React，正在从混入（mixin）模式转向组合（composition）模式（提取方法到单独的类和工具，并在不使用继承的情况下合并这些零碎的方法）。这反映了众所周知的“组合优于继承”的软件设计原则，许多人认为这一原则提供了卓越的灵活性和代码设计。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS高程 </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> 第4版 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高程第4版新增章节翻译：迭代器和生成器</title>
      <link href="/posts/ac8f4bae.html"/>
      <url>/posts/ac8f4bae.html</url>
      
        <content type="html"><![CDATA[<p>下述内容翻译自 Professional JavaScript for Web Developes,4th Edition（<a href="https://www.ituring.com.cn/book/2472" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 高级程序设计第四版</a>），225 页，Iterators and Generators（迭代器和生成器） 章节。</p><a id="more"></a><h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><p>术语“迭代（iteration）”来源于拉丁文 itero，意思是“重复（repeat）”或“再做一次（do again）”。在上下文中，“迭代”意味着按顺序重复执行一个过程，并按照期望停止。ECMAScript6 规范引入了两个高级特性——迭代器（iterator）和生成器（generator）——以实现更简洁、快速和容易的迭代过程。</p><h3 id="迭代介绍"><a href="#迭代介绍" class="headerlink" title="迭代介绍"></a>迭代介绍</h3><p>在 JavaScript 中，一个最简单的迭代例子就是循环计数（counting loop）:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环（loop）是一个基本的迭代工具，因为它们允许指定应该进行多少次迭代以及在每次迭代中应该发生什么。每个循环迭代将在下一个迭代开始之前执行完成，并且每个迭代发生的前后顺序是明确的。</p><p>迭代可以在有内容的有序集合（ordered collections）上进行。“有序（ordered）”意味着有一个可接受的顺序，按照此顺序，所有项都应该被遍历，并且有一个确定的开始项和结束项。在 JavaScript 中，最常见的有序集合的例子是数组（Array）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; collection.length; ++index) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(collection[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于数组长度已知，并且可以通过数组的索引检索该数组中的每一项，因此可以通过索引递增来顺序遍历整个数组。</p><p>这种循环中的基本流程并不理想，原因如下:</p><ul><li>遍历数据结构需要具备如何使用数据结构的特定知识。只能通过首先引用数组对象，然后使用[]操作符在特定索引处检索数组中的该项。结果就是性能没有优化。</li><li>遍历顺序并不是数据结构固有的属性。使用递增整数访问索引是特定于数组类型的，并不广泛应用到具有隐式排序的其他数据结构。</li></ul><p>ES5 引入了 Array.prototype.forEach 方法，更接近于所需要的功能（但仍然不是理想的解决方案）:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>];</span><br><span class="line">collection.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">console</span>.log(item));</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// bar</span></span><br><span class="line"><span class="comment">// baz</span></span><br></pre></td></tr></table></figure><p>forEach 方法解决了通过数组对象既需要跟踪索引又需要检索该索引对应项的问题。但是，迭代无法中止，而且仅能应用于数组，回调函数也不易用。</p><p>对于早期版本的 ECMAScript，执行迭代需要使用循环等辅助构造，随着代码复杂度的增加，这是一个越来越麻烦的事情。许多语言已经使用原生语言结构解决了这个问题，这种结构允许在具体了解迭代实际上是如何发生的情况下执行一种解决方案：迭代器模式（iterator pattern）。Python、Java、C++和许多其他语言，还有 ES6 规范的 JavaScript，都为此模式提供了完善的支持。</p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式（在 ECMAScript 的上下文环境中特指）描述了一种解决方案，其中一些东西可以被描述为“可迭代”的，并且可以实现一个由迭代器（Iterator）使用的形式化的可迭代对象（Iterable）接口。</p><p>“可迭代”的概念是抽象的。通常情况下，迭代会采用一个集合对象的形式，比如数组或 set，这两种对象都有有限数量的可数元素，并且遍历顺序明确:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组具有有限数量的可数元素</span></span><br><span class="line"><span class="comment">// 按照递增索引顺序遍历每个索引</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// Set具有有限数量的可数元素</span></span><br><span class="line"><span class="comment">// 按照插入顺序遍历每个索引</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set().add(3).add(1).add(4);</span><br></pre></td></tr></table></figure><p>但是，迭代器不是必须链接到集合对象。它还可以链接到某个具有类数组行为的东西上，例如本章前文提到的循环计数。这个循环中生成的值是暂时的，但是这样的循环正在执行迭代。这个循环计数和数组都可以表现为可迭代对象。</p><blockquote><p>瞬态迭代可以用生成器（generator）实现，这将在本章后文讨论。</p></blockquote><p>任何实现了迭代器接口的对象都可以“使用”实现了可迭代接口的对象。迭代器是根据需求创建的单独对象且只有单一用途。每个迭代器都与一个可迭代对象相关联，迭代器公开一个 API 便于使用相关的可迭代对象。迭代器不需要理解与之关联的可迭代对象的结构；它只需要知道如何检索顺序值。关注点分离就是使得 可迭代对象/迭代器（Iterable/Iterator） 约定如此有用的原因。</p><h4 id="可迭代对象协议"><a href="#可迭代对象协议" class="headerlink" title="可迭代对象协议"></a>可迭代对象协议</h4><p>实现可迭代对象接口既需要自我标识为支持迭代，也需要创建实现迭代器接口的对象。在 ECMAScript 中，这意味着必须公开一个属性：即用特殊符号 Symbol.iterator 标识的“默认迭代器”。这个默认迭代器属性必须引用一个迭代器工厂函数，该函数在调用时将生成一个新的迭代器。</p><p>许多内置类型实现了迭代接口:</p><ul><li>Strings</li><li>Arrays</li><li>Maps</li><li>Sets</li><li>arguments 对象</li><li>一些 DOM 集合类型（比如 NodeList）</li></ul><p>检查默认迭代器属性中是否为工厂函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 这些类型没有迭代器工厂函数</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'a'</span>, <span class="number">1</span>).set(<span class="string">'b'</span>, <span class="number">2</span>).set(<span class="string">'c'</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set().add('a').add('b').add('c');</span><br><span class="line">let els = document.querySelectorAll('div');</span><br><span class="line">// 这些类型全都有迭代器工厂函数</span><br><span class="line">console.log(str[Symbol.iterator]); // f values() &#123; [native code] &#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">set</span>[Symbol.iterator]); // f values() &#123; [native code] &#125;</span><br><span class="line"><span class="built_in">console</span>.log(els[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// 调用工厂函数生成一个迭代器</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// StringIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// MapIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">set</span>[Symbol.iterator]()); // SetIterator &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(els[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>不一定需要显式地调用工厂函数来生成迭代器。任何实现可迭代协议的对象都自动与迭代器语言特性兼容。这些原生语言结构包括:</p><ul><li>for… of 循环</li><li>数组解构</li><li>扩展操作符</li><li>Arry.from ()</li><li>Set 结构</li><li>Map 结构</li><li>Promise.all () ，表示一个可迭代的 promise</li><li>Promise.race () ，表示一个可迭代的 promise</li><li>yield* 操作符，用于生成器</li></ul><p>这些本地语言结构自动调用迭代器工厂函数来创建一个迭代器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>];</span><br><span class="line"><span class="comment">// for...of 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// bar</span></span><br><span class="line"><span class="comment">// baz</span></span><br><span class="line"><span class="comment">// Array 解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">// foo, bar, baz</span></span><br><span class="line"><span class="comment">// 扩展操作符</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr];</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// ['foo', 'bar', 'baz']</span></span><br><span class="line"><span class="comment">// Array.from()</span></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">Array</span>.from(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// ['foo', 'bar', 'baz']</span></span><br><span class="line"><span class="comment">// Set 结构</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set(arr);</span><br><span class="line">console.log(<span class="keyword">set</span>); // Set(3) &#123;<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>&#125;</span><br><span class="line"><span class="comment">// Map 结构</span></span><br><span class="line"><span class="keyword">let</span> pairs = arr.map(<span class="function">(<span class="params">x, i</span>) =&gt;</span> [x, i]);</span><br><span class="line"><span class="built_in">console</span>.log(pairs); <span class="comment">// [['foo', 0], ['bar', 1], ['baz', 2]]</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(pairs);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(3) &#123; 'foo'=&gt;0, 'bar'=&gt;1, 'baz'=&gt;2 &#125;</span></span><br></pre></td></tr></table></figure><p>如果一个对象的原型链上的父类实现了可迭代对象接口，那么该对象也同样实现该接口:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fooArr = <span class="keyword">new</span> FooArray(<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> fooArr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// bar</span></span><br><span class="line"><span class="comment">// baz</span></span><br></pre></td></tr></table></figure><h4 id="迭代器协议"><a href="#迭代器协议" class="headerlink" title="迭代器协议"></a>迭代器协议</h4><p>迭代器是一个一次性使用的对象，它将遍历与之关联的任何迭代器对象。迭代器 APi 使用 next()方法在迭代过程中前进。每次调用 next()时，都将返回包含迭代器中下一个值的 迭代器结果（IteratorResult） 对象。如果不调用 next()方法，就无法知道迭代器的当前位置。</p><p>next()方法返回一个具有两个属性的对象：done，一个布尔值，指示是否可以再次调用 next()来检索更多的值；value，包含可迭代对象下一个值，或者 undefined（如果 done 为 true）。done: true 的状态称为“耗竭（exhaustion）”，可以用一个简单的数组来演示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可迭代对象</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</span><br><span class="line"><span class="comment">// 迭代器工厂函数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br><span class="line"><span class="comment">// 执行迭代过程</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: 'bar' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>通过创建迭代器和调用 next()，数组按顺序进行迭代，直到停止生成新值为止。注意，迭代器不知道如何在可迭代对象中检索下一个值，也不知道可迭代对象有多大。一旦迭代器达到 done:true 状态，再次调用 next()的结果是幂等的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'foo'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>每个迭代器表示可迭代对象的一次有序遍历。一个迭代器实例不知道其他迭代器实例的存在，它们都将独立遍历迭代:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'foo'</span>, <span class="string">'bar'</span>];</span><br><span class="line"><span class="keyword">let</span> iter1 = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">let</span> iter2 = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter1.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter2.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter2.next()); <span class="comment">// &#123; done: false, value: 'bar' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter1.next()); <span class="comment">// &#123; done: false, value: 'bar' &#125;</span></span><br></pre></td></tr></table></figure><p>迭代器不绑定到可迭代对象的快照；它仅仅使用游标（cursor）在可迭代对象中跟踪迭代进度。如果迭代过程中可迭代对象发生了更改，迭代器将合并这些变化:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'foo'</span>, <span class="string">'baz'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="comment">// 在数组的中间插入一个值</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: 'bar' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: 'baz' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:迭代器保持对可迭代对象的持续引用，因此迭代器的存在将防止可迭代对象的垃圾收集过程。</p></blockquote><p>术语“迭代器（iterator）”的概念可能有些模糊，因为指的是一个广义的迭代概念、接口和形式化的迭代器类。下面的例子比较了显式的迭代器实现和原生的迭代器实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个类实现了可迭代对象的接口</span></span><br><span class="line"><span class="comment">// 调用默认的迭代器工厂函数将会返回一个实现了接口的迭代器对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="string">'foo'</span> &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="comment">// 打印实现了迭代器接口的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(f[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// &#123; next: f() &#123;&#125; &#125;</span></span><br><span class="line"><span class="comment">// 这个数组类型实现了迭代器接口</span></span><br><span class="line"><span class="comment">// 调用数组类型默认的迭代器将会创建一个ArrayIterator实例对象</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 打印ArrayIterator实例对象</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// Array Iterator &#123;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h4><p>与可迭代对象接口一样，任何实现迭代器接口的对象都可以作为迭代器来使用。参考下面的示例，其中定义了 Counter 类来迭代指定的次数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Counter实例应该迭代&lt;limit&gt;次</span></span><br><span class="line">  <span class="keyword">constructor</span>(limit) &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.count &lt;= <span class="keyword">this</span>.limit) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="keyword">this</span>.count++ &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">new</span> Counter(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>满足了迭代器接口的要求，但是这不是最优实现，因为每个类的实例只能迭代一次:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (nothing logged)</span></span><br></pre></td></tr></table></figure><p>为了允许从单个可迭代对象创建多个迭代器，count 必须是在每个迭代器的基础上创建。为了解决这个问题，可以返回一个通过闭包来使用 count 变量的迭代器对象，:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(limit) &#123;</span><br><span class="line">    <span class="keyword">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>,</span><br><span class="line">      limit = <span class="keyword">this</span>.limit;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= limit) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: count++ &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">new</span> Counter(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>以这种方式创建的每个迭代器也都实现了迭代接口。Symbol.iterator 属性指的是返回相同迭代器的工厂:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>];</span><br><span class="line"><span class="keyword">let</span> iter1 = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter1[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="keyword">let</span> iter2 = iter1[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter1 === iter2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>因为每个迭代器也都实现了可迭代对象接口，所以它们可以在任何需要迭代的地方使用，例如 for…of 循环:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="迭代器提前终止"><a href="#迭代器提前终止" class="headerlink" title="迭代器提前终止"></a>迭代器提前终止</h4><p>迭代器中有一个可选的 return()方法，该方法允许指定仅当迭代器提前关闭时才执行的行为。当执行迭代的结构希望向迭代器指示，表示不打算完成全部遍历时，就会发生迭代器的关闭。可能发生的情况包括:</p><ul><li><p>一个 for…of 循环通过 break、continue、return 或 throw 提前退出。</p></li><li><p>解构操作不会使用所有值。</p></li></ul><p>Return()方法必须返回有效的 IteratorResult 对象。一个简单的迭代器实现应该只返回{ done: true }，因为返回值只在生成器的上下文中使用，将在本章后文讨论这个问题。</p><p>如下面的代码所示，一旦内置语言解构识别出需要迭代且不会被使用的其他值，将自动调用 return()方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(limit) &#123;</span><br><span class="line">    <span class="keyword">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>,</span><br><span class="line">      limit = <span class="keyword">this</span>.limit;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= limit) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: count++ &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">return</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Exiting early'</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter1 = <span class="keyword">new</span> Counter(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Exiting early</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter2 = <span class="keyword">new</span> Counter(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">'err'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Exiting early</span></span><br><span class="line"><span class="keyword">let</span> counter3 = <span class="keyword">new</span> Counter(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> [a, b] = counter3;</span><br><span class="line"><span class="comment">// Exiting early</span></span><br></pre></td></tr></table></figure><p>如果迭代器没有关闭，那么可以从中断的地方继续迭代，比如数组的迭代器是不可关闭的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> iter = a[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>因为 return()方法是可选的，所以并非所有迭代器都可关闭。通过测试迭代器实例的 return 属性是否是函数对象，可以确定迭代器是否可关闭。但是，仅仅将 return 方法添加到一个不可关闭的迭代器中并不会使它变得可关闭，因为调用 return()并不会强制迭代器进入关闭状态。然而，return()方法仍然会被调用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> iter = a[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">iter.return = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Exiting early'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// Exiting early</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器（generator）是 ECMAScript6 规范中引入的一种方便灵活的构造，提供了在单个函数块中暂停和恢复代码执行的能力。这种新能力的影响是深远的：这允许定义自定义迭代器和实现程序协同。</p><h4 id="生成器基础"><a href="#生成器基础" class="headerlink" title="生成器基础"></a>生成器基础</h4><p>生成器采用函数的形式，名称用星号表示。只要函数定义有效，那么生成器函数定义也同样有效:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数的函数式声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 生成器函数的表达式声明</span></span><br><span class="line"><span class="keyword">let</span> generatorFn = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 对象字面量方法中的生成器函数</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">  *generatorFn() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 类实例中的生成器函数方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  *generatorFn() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类中的生成器函数静态方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> *generatorFn() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：箭头函数不能用作生成器函数。</p></blockquote><p>该函数将被视为一个生成器，而不必考虑星号周围的空格:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同的生成器函数：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFnA</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">generatorFnB</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">generatorFnC</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 等同的生成器方法：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  *generatorFnD() &#123;&#125;</span><br><span class="line">  * generatorFnE() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时，生成器函数返回一个<code>生成器对象</code>。生成器对象开始时处于暂停状态。与迭代器一样，这些生成器对象实现了迭代器接口，因此具有 next()方法的特性，该方法在被调用时指示生成器开始或继续执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next); <span class="comment">// f next() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>这个 next()方法的返回值与迭代器的返回值相同，也具有 done 和 value 属性。带有空函数体的生成器函数将充当一个直通车（passthrough），调用 next()一次就使生成器到达 done:true 状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>value 属性是生成器函数的返回值，默认为 undefined，可以通过生成器函数的返回值指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: true, value: 'foo' &#125;</span></span><br></pre></td></tr></table></figure><p>生成器函数只在第一次 next()调用时执行，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foobar'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当生成器函数初始化调用时还不会打印任何东西</span></span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line">generatorObject.next(); <span class="comment">// foobar</span></span><br></pre></td></tr></table></figure><p>生成器对象实现了迭代器接口，默认迭代器是自引用的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(generatorFn);</span><br><span class="line"><span class="comment">// f* generatorFn() &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorFn()[<span class="built_in">Symbol</span>.iterator]);</span><br><span class="line"><span class="comment">// f [Symbol.iterator]() &#123;native code&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorFn());</span><br><span class="line"><span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorFn()[<span class="built_in">Symbol</span>.iterator]());</span><br><span class="line"><span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g === g[<span class="built_in">Symbol</span>.iterator]());</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="yield-停止执行"><a href="#yield-停止执行" class="headerlink" title="yield 停止执行"></a>yield 停止执行</h4><p>关键字 yield 允许生成器停止和开始执行，使得生成器真正起到了作用。生成器函数将正常执行，直到遇到 yield 关键字时，执行将停止，并保留函数的作用域状态。只有当生成器对象调用 next()方法时，执行才会恢复:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: false, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>yield 关键字表现为一个中间函数返回，并且可以用 next()方法返回暂停时的值。生成器函数通过关键字 yield 停止时，done 为 false，通过关键字 return 退出时 done 为 true:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'foo'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'bar'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'baz'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: false, value: 'bar' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: true, value: 'baz' &#125;</span></span><br></pre></td></tr></table></figure><p>生成器函数中的执行进度限定在每个生成器对象实例内部。在一个生成器对象实例上调用 next()不会影响其他对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'foo'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'bar'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'baz'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject1 = generatorFn();</span><br><span class="line"><span class="keyword">let</span> generatorObject2 = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject1.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject2.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject2.next()); <span class="comment">// &#123; done: false, value: 'bar' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject1.next()); <span class="comment">// &#123; done: false, value: 'bar' &#125;</span></span><br></pre></td></tr></table></figure><p>yield 关键字只能在生成器函数中使用，其他任何地方都会抛出 error。与函数 return 关键字一样，yield 关键字必须直接出现在生成器函数定义中。在非生成器函数中进一步嵌套 yield 会抛出一个语法错误:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">validGeneratorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">invalidGeneratorFnA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">invalidGeneratorFnB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">invalidGeneratorFnC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将生成器对象作为可迭代对象"><a href="#将生成器对象作为可迭代对象" class="headerlink" title="将生成器对象作为可迭代对象"></a>将生成器对象作为可迭代对象</h5><p>很少需要对生成器对象显式地调用 next()。相反，生成器作为迭代使用时更有用，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>当需要定义自定义迭代对象时可能会特别有用。例如，定义一个将返回执行特定次数迭代器的可迭代对象很有用。使用生成器，可以简单地通过一个循环来完成:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> _ <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// foo</span></span><br></pre></td></tr></table></figure><p>生成器函数的参数控制循环迭代次数。当 n 达到 0 时，while 条件将为假，循环将退出，生成器函数将返回。</p><h5 id="使用-yield-输入和输出"><a href="#使用-yield-输入和输出" class="headerlink" title="使用 yield 输入和输出"></a>使用 yield 输入和输出</h5><p>关键字 yield 也表现为一个中间函数的参数。生成器上次暂停执行的 yield 关键字将参数传递给 next()的第一个值。令人困惑的是没有使用传递给第一个 next()调用的值，因为 第一个 next()是开始执行生成器函数时调用的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params">initial</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(initial);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">yield</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">yield</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn(<span class="string">'foo'</span>);</span><br><span class="line">generatorObject.next(<span class="string">'bar'</span>); <span class="comment">// foo</span></span><br><span class="line">generatorObject.next(<span class="string">'baz'</span>); <span class="comment">// baz</span></span><br><span class="line">generatorObject.next(<span class="string">'qux'</span>); <span class="comment">// qux</span></span><br></pre></td></tr></table></figure><p>关键字 yield 可以同时用作输入和输出，如下例所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="string">'foo'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: false, value: 'foo' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next(<span class="string">'bar'</span>)); <span class="comment">// &#123; done: true, value: 'bar' &#125;</span></span><br></pre></td></tr></table></figure><p>因为函数必须对整个表达式求值以确定要返回的值，所以当遇到 yield 关键字时，它将暂停执行，并将 foo 作为 yield 的值。下一个次 next()调用提供 “bar” 值作为 yield 的值，而这又作为生成器函数返回值进行计算。</p><p>关键字 yield 不限于单次使用。无限计数的生成器函数可以如下定义:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; ; ++i) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>假设想要定义一个生成器函数，该函数将迭代可配置的次数并生成索引。这可以通过实例化一个新的数组来实现，但是相同的行为可以在不使用数组的情况下完成:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>或者，下面的 while 循环实现更加简练:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>用上述方式使用生成器，也提供了一种实现范围定义或填充数组的方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">range</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = start;</span><br><span class="line">  <span class="keyword">while</span> (end &gt; start) &#123;</span><br><span class="line">    <span class="keyword">yield</span> start++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> range(<span class="number">4</span>, <span class="number">7</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">zeroes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(zeroes(<span class="number">8</span>))); <span class="comment">// [0, 0, 0, 0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure><h5 id="yield-可迭代对象"><a href="#yield-可迭代对象" class="headerlink" title="yield 可迭代对象"></a>yield 可迭代对象</h5><p>可以增强 yield 的行为，使其遍历一个可迭代对象并一次 yield 一项。这可以使用星号完成，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generatorFn和下述代码效果等同:</span></span><br><span class="line"><span class="comment">// function* generatorFn() &#123;</span></span><br><span class="line"><span class="comment">// for (const x of [1, 2, 3]) &#123;</span></span><br><span class="line"><span class="comment">// yield x;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>像 生成器函数的星号一样，yield 星号周围的空白不会改变它的行为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">yield</span> *[<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span> * [<span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>因为 yield*实际上只是将一个可迭代对象的 yield 值序列化为一系列的 yield 值，所以使用 yield*与将 yield 值放在循环中没有任何区别。下述这两个生成器函数在行为上是等价的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFnA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">yield</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFnA()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFnB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFnB()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>yield *的值是关联迭代器的 done：true 随附的 value 属性。对于普通的迭代器来说，此值是 undefined:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'iter value:'</span>, <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'value:'</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value: 1</span></span><br><span class="line"><span class="comment">// value: 2</span></span><br><span class="line"><span class="comment">// value: 3</span></span><br><span class="line"><span class="comment">// iter value: undefined</span></span><br></pre></td></tr></table></figure><p>对于由生成器函数产生的迭代器来说，这个值将以生成器函数返回的任何值的形式出现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">innerGeneratorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'foo'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'bar'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outerGeneratorFn</span>(<span class="params">genObj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'iter value:'</span>, <span class="keyword">yield</span>* innerGeneratorFn());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> outerGeneratorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'value:'</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value: foo</span></span><br><span class="line"><span class="comment">// iter value: bar</span></span><br></pre></td></tr></table></figure><h5 id="使用-yield-的递归算法"><a href="#使用-yield-的递归算法" class="headerlink" title="使用 yield*的递归算法"></a>使用 yield*的递归算法</h5><p>当在递归操作中使用 yield*最为有用，生成器可以产生自身。</p><p>参考下面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* nTimes(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">yield</span> n - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>在这个示例中，每个生成器首先 yield 来自新创建的生成器对象的每个值，然后生成单个整数。结果是生成器函数将递归递减计数器值并实例化另一个生成器对象，该对象在顶层将具有创建返回增量整数的单个可迭代对象的作用。</p><p>使用递归生成器结构和 yield*允许优雅地表示递归算法。参考下面的图实现，它生成一个随机的双向图:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.neighbors = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  connect(node) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.neighbors.add(node);</span><br><span class="line">      node.neighbors.add(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomGraph</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(size) &#123;</span><br><span class="line">    <span class="keyword">this</span>.nodes = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="comment">// 创建 nodes</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">      <span class="keyword">this</span>.nodes.add(<span class="keyword">new</span> Node(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 随机链接nodes</span></span><br><span class="line">    <span class="keyword">const</span> threshold = <span class="number">1</span> / size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> <span class="keyword">this</span>.nodes) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> y <span class="keyword">of</span> <span class="keyword">this</span>.nodes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; threshold) &#123;</span><br><span class="line">          x.connect(y);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 仅用于调试目的</span></span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> <span class="keyword">this</span>.nodes) &#123;</span><br><span class="line">      <span class="keyword">const</span> ids = [...node.neighbors].map(<span class="function">(<span class="params">n</span>) =&gt;</span> n.id).join(<span class="string">','</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'$&#123;node.id&#125;: $&#123;ids&#125;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> RandomGraph(<span class="number">6</span>);</span><br><span class="line">g.print();</span><br><span class="line"><span class="comment">// 实例输出:</span></span><br><span class="line"><span class="comment">// 0: 2,3,5</span></span><br><span class="line"><span class="comment">// 1: 2,3,4,5</span></span><br><span class="line"><span class="comment">// 2: 1,3</span></span><br><span class="line"><span class="comment">// 3: 0,1,2,4</span></span><br><span class="line"><span class="comment">// 4: 2,3</span></span><br><span class="line"><span class="comment">// 5: 0,4</span></span><br></pre></td></tr></table></figure><p>图数据结构非常适合于递归遍历，并且使用递归生成器可以完全做到这一点。为此，生成器函数必须接受一个可迭代对象，产生该对象中的每个值，然后递归每个值。一个简单的用途就是测试图的连接，这意味着没有节点无法到达。可以通过从一个节点开始并尝试访问每个节点来完成此测试。下面实例是深度优先遍历的非常简洁的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  connect(node) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomGraph</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(size) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  isConnected() &#123;</span><br><span class="line">    <span class="keyword">const</span> visitedNodes = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">traverse</span>(<span class="params">nodes</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> nodes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visitedNodes.has(node)) &#123;</span><br><span class="line">          <span class="keyword">yield</span> node;</span><br><span class="line">          <span class="keyword">yield</span>* traverse(node.neighbors);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抓住Set中的第一个node</span></span><br><span class="line">    <span class="keyword">const</span> firstNode = <span class="keyword">this</span>.nodes[<span class="built_in">Symbol</span>.iterator]().next().value;</span><br><span class="line">    <span class="comment">// 使用递归生成器迭代每一个node</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> traverse([firstNode])) &#123;</span><br><span class="line">      visitedNodes.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> visitedNodes.size === <span class="keyword">this</span>.nodes.size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用生成器作为默认迭代器"><a href="#使用生成器作为默认迭代器" class="headerlink" title="使用生成器作为默认迭代器"></a>使用生成器作为默认迭代器</h4><p>因为生成器对象实现了可迭代对象接口，并且因为生成器函数和默认迭代器都被调用来生成迭代器，所以生成器非常适合用作默认迭代器。下面是一个简单的例子，默认迭代器可以在一行代码中中 yield 类的内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="keyword">this</span>.values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> f) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>在这里，for…of 循环调用默认迭代器(这恰好是一个生成器函数)并生成一个生成器对象。生成器对象是一个可迭代对象，因此可以在迭代中使用。</p><h4 id="生成器提前终止"><a href="#生成器提前终止" class="headerlink" title="生成器提前终止"></a>生成器提前终止</h4><p>与迭代器一样，生成器也支持“可关闭（closable）”的概念。对于要实现迭代器接口的对象，具有必选的 next()和 可选的 return()方法，以便在迭代器提前终止时使用。生成器对象同时具有这两个方法及另外一个方法 throw()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next); <span class="comment">// f next() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return); <span class="comment">// f return() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.throw); <span class="comment">// f throw() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>return()和 throw()方法是可用于强制生成器进入关闭状态的两个方法。</p><h5 id="return-方法"><a href="#return-方法" class="headerlink" title="return() 方法"></a>return() 方法</h5><p>return()方法将强制生成器进入关闭状态，return()的值将提供给最终的迭代器对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">yield</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="number">4</span>)); <span class="comment">// &#123; done: true, value: 4 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// generatorFn &#123;&lt;closed&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>与迭代器不同，所有生成器对象都有一个 return()方法，该方法强制生成器进入一个关闭状态，一旦到达该状态就无法退出。后续调用 next()将显示 done:true 状态，但是任何提供的 return 值都不存储或传递:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line"><span class="keyword">yield</span> x;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: false, value: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="number">4</span>)); <span class="comment">// &#123; done: true, value: 4 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>内置的语言结构，例如 for…of 循环将明智地忽略 done:true 的迭代器对象中返回的任何值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">yield</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> g) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    g.return(<span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h5 id="throw-方法"><a href="#throw-方法" class="headerlink" title="throw()方法"></a>throw()方法</h5><p>throw()方法将把提供的错误注入挂起的生成器对象中。如果错误未处理，生成器将关闭:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">yield</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  g.throw(<span class="string">'foo'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e); <span class="comment">// foo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(g); <span class="comment">// generatorFn &#123;&lt;closed&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>但是，如果错误是在生成器函数内部处理的，那么它将不会关闭并可以继续执行。错误处理过程将跳过这个结果，因此在下面将看到它跳过一个值。考虑下面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">yield</span> x;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: false, value: 1&#125;</span></span><br><span class="line">g.throw(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: false, value: 3&#125;</span></span><br></pre></td></tr></table></figure><p>在此示例中，生成器在 try / catch 块内的 yield 关键字处暂停执行。挂起时，throw（）注入 foo 错误，该错误由 yield 关键字引发。由于此错误是在生成器的 try / catch 块中引发的，因此随后仍在生成器内部时被捕获。但是，由于 yield 抛出了这个错误，生成器将不会 yield 2 。相反，生成器函数继续执行，继续到下一个循环迭代，再次遇到 yield 关键字ーー这一次，yield 值为 3。</p><blockquote><p>注意:如果生成器对象尚未开始执行，由于错误是从函数块外部抛出的，所以无法在函数内部捕获对 throw()的调用。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>迭代是基本上每种编程语言都会遇到的模式。ECMAScript6 规范通过在语言中引入迭代器和生成器这两个形式化概念，正式地确定了迭代。</p><p>迭代器是一个接口，可以由任何对象实现，并允许连续访问它生成的值。任何实现可迭代接口的对象都有默认的 Symbol.iterator 属性。默认迭代器的行为类似于迭代器工厂函数：当被调用时，生成一个实现具有迭代器接口的对象。</p><p>迭代器通过 next()方法强制生成值，该方法返回可迭代对象。该对象包含一个布尔值的 done 属性（指示是否还有更多可用值）以及一个 value 属性，其中包含从迭代器提供的当前值。该接口可以通过重复调用 next()来手动使用，也可以由原生的可迭代结构（例如 for … of 循环）自动使用。</p><p>生成器是一种特殊类型的函数，当调用它时，会生成一个生成器对象。这个生成器对象实现了可迭代对象接口，因此可以在任何需要迭代的地方使用。生成器的独特之处在于它们支持 yield 关键字，该关键字用于暂停生成器函数的执行。还可以使用 yield 关键字通过 next()方法接受输入和输出。当伴随星号时，yield 关键字将用于序列化与其配对的一个可迭代对象。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS高程 </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> 第4版 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> 生成器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高程第4版新增章节翻译：类型化数组、Map和Set</title>
      <link href="/posts/ec1d965f.html"/>
      <url>/posts/ec1d965f.html</url>
      
        <content type="html"><![CDATA[<p>今天在知乎看到了一个回答说李松峰老师已经神速的把 1000 多页翻译完了，有三名编辑负责交接。太振奋了，英文版实在看的头有点疼，自己翻译自己看的日子终于快到头了，一定要买到首发第一批！</p><p>在 Map 和 Set 章节发现了多处错误，已更正。</p><p>下述内容翻译自 Professional JavaScript for Web Developes,4th Edition（<a href="https://www.ituring.com.cn/book/2472" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 高级程序设计第四版</a>），190 页，COLLECTION REFERENCE TYPES 章节内，前半部分是普通 Array 的介绍，已经比较熟悉，主要翻译后半部分——类型化数组、Map 和 Set。</p><a id="more"></a><h3 id="类型化数组"><a href="#类型化数组" class="headerlink" title="类型化数组"></a>类型化数组</h3><p>在 ECMAScript6 中，类型化数组（TYPED ARRAYS）是一种设计用于向本地库高效传递二进制数据的结构。JavaScript 中并没有真正的“TypedArray”类型，相反，这个术语指的是一组包含数字类型的特殊数组。想要理解如何使用类型化数组，首先需要理解它的用途。</p><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p>随着 web 浏览器的普及，可以预见在浏览器内部运行复杂的 3D 应用的能力将会大受欢迎。早在 2006 年，包括 Mozilla 和 Opera 在内的浏览器厂商就开始试验一种编程平台，用于在浏览器内部无需插件就可渲染图形密集型应用。目标是开发一个 JavaScript API，可以利用 3D 图形 API 和 GPU 加速来实现在<code>&lt;canvas&gt;</code>元素上渲染复杂图形。</p><h5 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h5><p>最终实现的 JavaScript API 是基于 OpenGL for Embedded Systems（OpenGL ES）2.0 规范，该规范是 OpenGL 的一个子集，专门用于实现 2D 和 3D 计算机图形。这个新的 API 被命名为 Web Graphics Library（WebGL），在 2011 年 3 月发布了它的 1.0 版本。有了该 API，开发者就能够编写图形密集型的应用程序代码，这些代码可以被任何兼容 WebGL 的 web 浏览器原生地编译。</p><p>在 WebGL 的初始版本中，JavaScript 数组和原生数组之间的不匹配导致出现了性能问题。图形驱动的 API 通常不希望传递的数组内容是 JavaScript 默认的双浮点格式。图形驱动的 API 期望以二进制格式的数字数组格式传递，这当然与内存中的 JavaScript 数组格式不同。因此，每次在 WebGL 和 JavaScript 运行时之间传递一个数组时，WebGL 都会执行一个浪费性能的操作，即在目标环境中分配一个新数组，把当前数组的数字转换为适当的格式迭代给新数组。</p><h5 id="类型化数组的出现"><a href="#类型化数组的出现" class="headerlink" title="类型化数组的出现"></a>类型化数组的出现</h5><p>当然，上述转换操作是不合适的，Mozilla 通过实现 CanvasFloatArray 解决了这个问题，这是一个 C 语言风格的浮点数数组，提供了一个 JavaScript 接口。这种类型允许 JavaScript 运行时分配、读取和写入一个数组，该数组可以直接传递给图形驱动程序的 API。Canvasfloatarray 最终将被重塑为 Float32Array，这是目前类型化数组可用的第一个“类型”。</p><h4 id="使用-ArrayBuffers"><a href="#使用-ArrayBuffers" class="headerlink" title="使用 ArrayBuffers"></a>使用 ArrayBuffers</h4><p>Float32array 实际上是一种“视图（view）”类型，该类型允许 JavaScript 运行时访问一块分配好的内存，称为 ArrayBuffer。Arraybuffer 是所有类型化数组和视图引用的基本单元。</p><blockquote><p>Typedarraybuffer 是 ArrayBuffer 类型的一个变体，该变体可以在执行上下文环境之间传递而不生成副本。有关该类型的内容，请参阅“Workers”一章。</p></blockquote><p>Arraybuffer 是一个普通的 JavaScript 构造函数，可用于在内存中分配特定数量的字节。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 分配16字节的内存</span></span><br><span class="line">alert(buf.byteLength); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><p>数组缓冲区（Arraybuffer）一旦创建就不能调整大小。但是可以使用 slice()将现有 ArrayBuffer 的全部或部分复制到新实例中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = buf1.slice(<span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line">alert(buf2.byteLength); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>Arraybuffer 在某些方面类似于 c++malloc()，但有几个不同的地方值得注意:</p><ul><li>当 malloc()分配失败时，它返回一个空指针，如果 ArrayBuffer 分配失败，它抛出一个 error。</li><li>malloc()调用可以使用虚拟内存，因此最大的内存分配只受可寻址的系统内存大小限制。Arraybuffer 的内存分配不能超过 Number.MAXSAFEINTEGER(2^53)字节。</li><li>成功的 malloc()调用不初始化实际地址。声明一个 ArrayBuffer 将所有位初始化为 0。</li><li>在调用 free()或程序退出之前，系统不能使用 malloc()分配的堆内存。通过声明一个 ArrayBuffer 分配的堆内存仍然是可垃圾回收的ー不需要进行手动内存管理。</li></ul><p>不能通过引用缓冲区（buffer）实例来读取或写入 ArrayBuffer 的内容。若要在内部读取或写入数据，必须使用视图（view）。有多种不同类型的视图，但它们都引用存储在 ArrayBuffer 中的二进制数据。</p><h4 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h4><p>允许读写 ArrayBuffer 的第一种视图类型是 DataView。这个视图是为文件和网络 I/O 设计的；该 API 允许高度自由控制 buffer 数据的操作，但是与其他不同的视图类型相比，该类型的性能比较低。Dataview 不预设任何关于缓冲区的内容，也不可迭代。</p><p>读取和写入已经存在的 ArrayBuffer 时必须创建一个 DataView 实例。它可以使用整个或部分 buffer，并维护对 buffer 实例的引用，以及设定视图在 buffer 中的开始位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="comment">// DataView默认使用全部的ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> fullDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line">alert(fullDataView.byteOffset); <span class="comment">// 0</span></span><br><span class="line">alert(fullDataView.byteLength); <span class="comment">// 16</span></span><br><span class="line">alert(fullDataView.buffer === buf); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 构造函数中有两个可选参数：字节偏移和字节长度</span></span><br><span class="line"><span class="comment">// byteOffset=0 视图从buffer的起始位置开始</span></span><br><span class="line"><span class="comment">// byteLength=8 限制视图为前8个字节</span></span><br><span class="line"><span class="keyword">const</span> firstHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">alert(firstHalfDataView.byteOffset); <span class="comment">// 0</span></span><br><span class="line">alert(firstHalfDataView.byteLength); <span class="comment">// 8</span></span><br><span class="line">alert(firstHalfDataView.buffer === buf); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 如果不指定长度的话，DataView将会使用buffer的剩余部分</span></span><br><span class="line"><span class="comment">// byteOffset=8 视图从buffer的第9位开始</span></span><br><span class="line"><span class="comment">// byteLength默认时剩余buffer的长度</span></span><br><span class="line"><span class="keyword">const</span> secondHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">8</span>);</span><br><span class="line">alert(secondHalfDataView.byteOffset); <span class="comment">// 8</span></span><br><span class="line">alert(secondHalfDataView.byteLength); <span class="comment">// 8</span></span><br><span class="line">alert(secondHalfDataView.buffer === buf); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>要通过 DataView 读写缓冲区，你需要使用以下几点内容:</p><ul><li>要读或写位置的字节偏移量。这可以看作是 DataView 中的一种“地址”。</li><li>DataView 应使用 ElementType 在 JavaScript 运行时中的 Number 类型和缓冲区中的二进制格式之间进行转换。</li><li>内存中值的端序（endianness）。默认为 大端（big-endian）。</li></ul><h5 id="ElementType"><a href="#ElementType" class="headerlink" title="ElementType"></a>ElementType</h5><p>Dataview 对缓冲区中存储的数据类型不做任何假设。API 在读写时强制指定 ElementType，然后 DataView 将全面转换以执行读写操作。</p><p>ECMAScript 6 支持 8 种不同的 ElementType:</p><table><thead><tr><th>ELEMENTTYPE</th><th>字节数</th><th>描述</th><th>C 语言对照</th><th>值范围</th></tr></thead><tbody><tr><td>Int8</td><td>1</td><td>8 位有符号整数</td><td>signed char</td><td>–128 到 127</td></tr><tr><td>Uint8</td><td>1</td><td>8 位无符号整数</td><td>unsigned char</td><td>0 到 255</td></tr><tr><td>Int16</td><td>2</td><td>16 位有符号整数</td><td>short</td><td>–32768 到 32767</td></tr><tr><td>Uint16</td><td>2</td><td>16 位无符号整数</td><td>unsigned short</td><td>0 到 65535</td></tr><tr><td>Int32</td><td>4</td><td>32 位有符号整数</td><td>int</td><td>–2,147,483,648 到 2,147,483,647</td></tr><tr><td>Uint32</td><td>4</td><td>32 位无符号整数</td><td>unsigned int</td><td>0 到 4,294,967,295</td></tr><tr><td>Float32</td><td>4</td><td>32 位 IEEE-754 浮点数</td><td>float</td><td>–3.4E+38 到 +3.4E+38</td></tr><tr><td>Float64</td><td>8</td><td>64 位 IEEE-754 浮点数</td><td>double</td><td>–1.7E+308 到 +1.7E+308</td></tr></tbody></table><p>Dataview 公开了每种类型的 get 和 set 方法，这些方法使用 byteOffset 在 buffer 中寻址以读取和写入值。类型是可以互换使用的，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分配2字节的内存并声明一个DataView实例</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="comment">// 证明整个buffer实际所有位都是0</span></span><br><span class="line"><span class="comment">// 检查第一个和第二个字节</span></span><br><span class="line">alert(view.getInt8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line">alert(view.getInt8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 检查整个buffer</span></span><br><span class="line">alert(view.getInt16(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 把整个buffer设成一个字节</span></span><br><span class="line"><span class="comment">// 255按位表示是11111111 (2^8 – 1)</span></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="comment">// DataView将会自动的把值转换为指定的ElementType类型</span></span><br><span class="line"><span class="comment">// 255在16进制中表示为0xFF</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0xff</span>);</span><br><span class="line"><span class="comment">// 现在是个两个字节的带符号整数，结果为-1</span></span><br><span class="line">alert(view.getInt16(<span class="number">0</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h5 id="大端和小端"><a href="#大端和小端" class="headerlink" title="大端和小端"></a>大端和小端</h5><p>在前一个示例中，buffer 的字节故意全都设为相同的，以避免端序问题。“端序（Endianness）”是指由计算系统维护的字节排序约定。对于 DataViews 只支持两个约定：大端（big-endian）和小端（little-endian）。大端(也称为“网络字节顺序”)意味着最高有效字节位于第一个字节，最低有效字节位于最后一个字节。Little-endian 意味着最低有效字节保存在第一个字节中，最高有效字节保存在最后一个字节中。</p><p>执行 JavaScript 运行时系统的原生端序将约定如何读取和写入字节，但 DataView 不遵守这个约定。Dataview 是一个无偏见的内存片段接口，遵循指定的任何端序。所有 DataView API 方法都默认大端，但接受一个可选的布尔参数，该参数允许通过将 little-endian 设置为 true 来启用小端模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分配2字节的内存并声明一个DataView实例</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="comment">// 把buffer的最左位和最右位设为1</span></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">0x80</span>); <span class="comment">// 设置最左位为1</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0x01</span>); <span class="comment">// 设置最右位为1</span></span><br><span class="line"><span class="comment">// buffer内容（为了可读性而分隔开）:</span></span><br><span class="line"><span class="comment">// 0x8 0x0 0x0 0x1</span></span><br><span class="line"><span class="comment">// 1000 0000 0000 0001</span></span><br><span class="line"><span class="comment">// 按大端读取16位无符号整数</span></span><br><span class="line"><span class="comment">// 0x80是最高有效字节，0x01是最低有效字节</span></span><br><span class="line"><span class="comment">// 0x8001 = 2^15 + 2^0 = 32768 + 1 = 32769</span></span><br><span class="line">alert(view.getUint16(<span class="number">0</span>)); <span class="comment">// 32769</span></span><br><span class="line"><span class="comment">// 按小端读取16位无符号整数</span></span><br><span class="line"><span class="comment">// 0x01是最高有效字节，0x80是最低有效字节</span></span><br><span class="line"><span class="comment">// 0x0180 = 2^8 + 2^7 = 256 + 128 = 384</span></span><br><span class="line">alert(view.getUint16(<span class="number">0</span>, <span class="literal">true</span>)); <span class="comment">// 384</span></span><br><span class="line"><span class="comment">// 按大端写入16位无符号整数</span></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0004</span>);</span><br><span class="line"><span class="comment">// buffer内容（为了可读性而分隔开）:</span></span><br><span class="line"><span class="comment">// 0x0 0x0 0x0 0x4</span></span><br><span class="line"><span class="comment">// 0000 0000 0000 0100</span></span><br><span class="line">alert(view.getUint8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line">alert(view.getUint8(<span class="number">1</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 按小端写入16位无符号整数</span></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0002</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// buffer内容（为了可读性而分隔开）:</span></span><br><span class="line"><span class="comment">// 0x0 0x2 0x0 0x0</span></span><br><span class="line"><span class="comment">// 0000 0010 0000 0000</span></span><br><span class="line">alert(view.getUint8(<span class="number">0</span>)); <span class="comment">// 2</span></span><br><span class="line">alert(view.getUint8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h5 id="极端案例"><a href="#极端案例" class="headerlink" title="极端案例"></a>极端案例</h5><p>只有在有足够的 buffer 空间情况下，DataView 才能完成读写操作；否则会抛出一个 RangeError:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="comment">// 部分越过了buffer后界时尝试读取值</span></span><br><span class="line">view.getInt32(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="comment">// 越过了buffer后界时尝试读取值</span></span><br><span class="line">view.getInt32(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="comment">// 越过了buffer后界时尝试读取值</span></span><br><span class="line">view.getInt32(<span class="number">-1</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="comment">// 越过了buffer后界时尝试写入值</span></span><br><span class="line">view.setInt32(<span class="number">4</span>, <span class="number">123</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><p>当写入 buffer 时，DataView 将尽力将值强制转换为适当的类型或回退到 0。如果不能将抛出一个 error:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line">view.setInt8(<span class="number">0</span>, <span class="number">1.5</span>);</span><br><span class="line">alert(view.getInt8(<span class="number">0</span>)); <span class="comment">// 1</span></span><br><span class="line">view.setInt8(<span class="number">0</span>, [<span class="number">4</span>]);</span><br><span class="line">alert(view.getInt8(<span class="number">0</span>)); <span class="comment">// 4</span></span><br><span class="line">view.setInt8(<span class="number">0</span>, <span class="string">'f'</span>);</span><br><span class="line">alert(view.getInt8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line">view.setInt8(<span class="number">0</span>, <span class="built_in">Symbol</span>());</span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h4 id="类型化数组-1"><a href="#类型化数组-1" class="headerlink" title="类型化数组"></a>类型化数组</h4><p>类型化数组（Typed arrays）是 ArrayBuffer 视图的另一种形式。虽然在概念上类似于数据视图（Data View），但类型化数组的不同之处在于强制使用单个 ElementType 类型 并服从系统的原生端序。优点是提供了更广泛的 API 和更好的性能。类型化数组的设计是为了高效地与 WebGL 这样的本地库交换二进制数据。因为类型化数组的二进制表示对于本地操作系统来说是一种易于理解的格式，所以 JavaScript 引擎能够对类型化数组的算术运算、位运算和其他常见操作进行大幅度优化，因此它们的使用速度非常快。</p><p>类型化数组可以使用多种方式创建：从现有的 buffer 读取、用自己的 buffer 初始化、用迭代器填充或从任何类型的现有类型化数组填充。它们也可以使用<code>&lt;ElementType&gt;.from()</code>和 <code>&lt;ElementType&gt;.of()</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个12字节的buffer</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="comment">// 引用buffer创建一个Int32Array类型化数组</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(buf);</span><br><span class="line"><span class="comment">// 类型化数组能识别出每个元素需要4个字节，所以长度是3</span></span><br><span class="line">alert(ints.length); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 创建一个长度为6的Int32Array类型化数组</span></span><br><span class="line"><span class="keyword">const</span> ints2 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 每一个数字使用了4个字节，所以ArrayBuffer有24个字节</span></span><br><span class="line">alert(ints2.length); <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 与DataView类似，类型化数组有一个相关buffer的引用</span></span><br><span class="line">alert(ints2.buffer.byteLength); <span class="comment">// 24</span></span><br><span class="line"><span class="comment">// 创建一个包含[2, 4, 6, 8]的Int32Array类型化数组</span></span><br><span class="line"><span class="keyword">const</span> ints3 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line">alert(ints3.length); <span class="comment">// 4</span></span><br><span class="line">alert(ints3.buffer.byteLength); <span class="comment">// 16</span></span><br><span class="line">alert(ints3[<span class="number">2</span>]); <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 拷贝ints3创建一个Int16Array类型的类型化数组</span></span><br><span class="line"><span class="keyword">const</span> ints4 = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(ints3);</span><br><span class="line"><span class="comment">// 新的类型化数组分配他自己的内存，相同下标处的值会转化为新的表达。</span></span><br><span class="line">alert(ints4.length); <span class="comment">// 4</span></span><br><span class="line">alert(ints4.buffer.byteLength); <span class="comment">// 8</span></span><br><span class="line">alert(ints4[<span class="number">2</span>]); <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 从一个普通数组创建Int16Array类型化数组</span></span><br><span class="line"><span class="keyword">const</span> ints5 = <span class="built_in">Int16Array</span>.from([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]);</span><br><span class="line">alert(ints5.length); <span class="comment">// 4</span></span><br><span class="line">alert(ints5.buffer.byteLength); <span class="comment">// 8</span></span><br><span class="line">alert(ints5[<span class="number">2</span>]); <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 用参数创建Float32Array类型化数组</span></span><br><span class="line"><span class="keyword">const</span> floats = <span class="built_in">Float32Array</span>.of(<span class="number">3.14</span>, <span class="number">2.718</span>, <span class="number">1.618</span>);</span><br><span class="line">alert(floats.length); <span class="comment">// 3</span></span><br><span class="line">alert(floats.buffer.byteLength); <span class="comment">// 12</span></span><br><span class="line">alert(floats[<span class="number">2</span>]); <span class="comment">// 1.6180000305175781</span></span><br></pre></td></tr></table></figure><p>构造函数和实例都有一个 BYTES_PER_ELEMENT 属性，该属性返回该类型数组中每个元素的字节数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Int16Array</span>.BYTES_PER_ELEMENT); <span class="comment">// 2</span></span><br><span class="line">alert(<span class="built_in">Int32Array</span>.BYTES_PER_ELEMENT); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">1</span>),</span><br><span class="line">  floats = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">alert(ints.BYTES_PER_ELEMENT); <span class="comment">// 4</span></span><br><span class="line">alert(floats.BYTES_PER_ELEMENT); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>除非使用具体值来初始化类型化数组，否则其关联的 buffer 由 0 填充:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">4</span>);</span><br><span class="line">alert(ints[<span class="number">0</span>]); <span class="comment">// 0</span></span><br><span class="line">alert(ints[<span class="number">1</span>]); <span class="comment">// 0</span></span><br><span class="line">alert(ints[<span class="number">2</span>]); <span class="comment">// 0</span></span><br><span class="line">alert(ints[<span class="number">3</span>]); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h5 id="类型化数组行为"><a href="#类型化数组行为" class="headerlink" title="类型化数组行为"></a>类型化数组行为</h5><p>在大多数情况下，类型化数组的行为与常规数组的行为类似。类型化数组支持以下操作符、方法和属性:</p><ul><li>[]</li><li>copyWithin()</li><li>entries()</li><li>every()</li><li>fill()</li><li>filter()</li><li>find()</li><li>findIndex()</li><li>forEach()</li><li>indexOf()</li><li>join()</li><li>keys()</li><li>lastIndexOf()</li><li>length</li><li>map()</li><li>reduce()</li><li>reduceRight()</li><li>reverse()</li><li>copyWithin()</li><li>entries()</li><li>every()</li><li>fill()</li><li>filter()</li><li>find()</li><li>findIndex()</li><li>forEach()</li><li>indexOf()</li><li>join()</li><li>keys()</li><li>lastIndexOf()</li><li>length</li><li>map()</li><li>reduce()</li><li>reduceRight()</li><li>reverse(）</li></ul><p>返回新数组的方法使用时将返回具有相同元素类型的类型化数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> doubleints = ints.map(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="number">2</span> * x);</span><br><span class="line">alert(doubleints <span class="keyword">instanceof</span> <span class="built_in">Int16Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类型化数组定义了一个 Symbol.iterator，意味着也可以使用..of 循环和扩展操作符:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> int <span class="keyword">of</span> ints) &#123;</span><br><span class="line">  alert(int);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">alert(<span class="built_in">Math</span>.max(...ints)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h5 id="合并、复制和更改类型化数组"><a href="#合并、复制和更改类型化数组" class="headerlink" title="合并、复制和更改类型化数组"></a>合并、复制和更改类型化数组</h5><p>类型化的数组仍然使用 array buffer 作为存储空间，而且 buffer 不能调整大小。因此，类型化数组不支持以下方法:</p><ul><li>concat()</li><li>pop()</li><li>push()</li><li>shift()</li><li>splice()</li><li>unshift()</li></ul><p>但是，类型化数组确实提供了两种新的方法：set()和 subarray()，可以快速地从数组中复制值。</p><p>Set()将提供的数组或类型化数组中的值复制到当前类型化数组中的指定索引处:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为8的Int16Array类型化数组</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// 复制一个类型化数组到前四个值</span></span><br><span class="line"><span class="comment">// Offset偏移默认是0</span></span><br><span class="line">container.set(<span class="built_in">Int8Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">alert(container); <span class="comment">// [1,2,3,4,0,0,0,0]</span></span><br><span class="line"><span class="comment">// 复制一个普通数组到后四个值</span></span><br><span class="line"><span class="comment">// Offset为4代表着从第四个索引处插入</span></span><br><span class="line">container.set([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">4</span>);</span><br><span class="line">alert(container); <span class="comment">// [1,2,3,4,5,6,7,8]</span></span><br><span class="line"><span class="comment">// 溢出后抛出一个error</span></span><br><span class="line">container.set([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">7</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><p>subarray()执行与 set()相反的操作，返回一个值从源数组复制出来的新的类型化数组。可提供开始和结束位置两个可选参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="built_in">Int16Array</span>.of(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 复制完整的数组到一个相同类型的新数组中</span></span><br><span class="line"><span class="keyword">const</span> fullCopy = source.subarray();</span><br><span class="line">alert(fullCopy); <span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"><span class="comment">// 从第二个索引处开始复制数组</span></span><br><span class="line"><span class="keyword">const</span> halfCopy = source.subarray(<span class="number">2</span>);</span><br><span class="line">alert(halfCopy); <span class="comment">// [6, 8]</span></span><br><span class="line"><span class="comment">// 复制1到3索引位置处的数组</span></span><br><span class="line"><span class="keyword">const</span> partialCopy = source.subarray(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">alert(partialCopy); <span class="comment">// [4, 6]</span></span><br></pre></td></tr></table></figure><p>类型化数组不具备原生的连接数组的方法，但是可以利用类型化数组的 API 手动构建该方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数是应当返回的数组类型，剩余参数是需要连接的类型化数组</span></span><br><span class="line"><span class="comment">// Remaining arguments are all the typed arrays that should be concatenated</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typedArrayConcat</span>(<span class="params">typedArrayConstructor, ...typedArrays</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 计算出整个数组中的元素数目</span></span><br><span class="line">  <span class="keyword">const</span> numElements = typedArrays.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> (x.length || x) + y.length);</span><br><span class="line">  <span class="comment">// 为所有的元素提供一个空的指定类型的数组</span></span><br><span class="line">  <span class="keyword">const</span> resultArray = <span class="keyword">new</span> typedArrayConstructor(numElements);</span><br><span class="line">  <span class="comment">// 执行数组转换</span></span><br><span class="line">  <span class="keyword">let</span> currentOffset = <span class="number">0</span>;</span><br><span class="line">  typedArrays.map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">    resultArray.set(x, currentOffset);</span><br><span class="line">    currentOffset += x.length;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> resultArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> concatArray = typedArrayConcat(</span><br><span class="line">  <span class="built_in">Int32Array</span>,</span><br><span class="line">  <span class="built_in">Int8Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">  <span class="built_in">Int16Array</span>.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">  <span class="built_in">Float32Array</span>.of(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">);</span><br><span class="line">alert(concatArray); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">alert(concatArray <span class="keyword">instanceof</span> <span class="built_in">Int32Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="向上和向下溢出"><a href="#向上和向下溢出" class="headerlink" title="向上和向下溢出"></a>向上和向下溢出</h5><p>类型化数组中值不会向上或向下溢出到其他索引中，但是仍然必须考虑数组相关的元素类型。类型化数组只接受数组中每个索引可以容纳的相关位，而不考虑它对实际数值的影响。下面演示如何处理向上和向下溢出:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ints是一个长度为2的数组</span></span><br><span class="line"><span class="comment">// 每一个索引都可以容纳2进制带符号整数补码，范围从-128 (-1 * 2^7) 到 127 (2^7 – 1)。</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int8Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// unsignedInts是一个长度为2的数组</span></span><br><span class="line"><span class="comment">// 每一个索引都可以容纳无符号整数，范围从0 到 255 (2^7 – 1)。</span></span><br><span class="line"><span class="keyword">const</span> unsignedInts = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 向上溢出位不会影响到相邻的索引</span></span><br><span class="line"><span class="comment">// 每个索引只采用最低的8个有效位</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">256</span>; <span class="comment">// 0x100 100000000</span></span><br><span class="line">alert(unsignedInts); <span class="comment">// [0, 0]</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">511</span>; <span class="comment">// 0x1FF 111111111</span></span><br><span class="line">alert(unsignedInts); <span class="comment">// [0, 255]</span></span><br><span class="line"><span class="comment">// 向下溢出位将会转化为无符号的等效位</span></span><br><span class="line"><span class="comment">// 0xFF是-1，作为2进制整数补码(8位截断)。</span></span><br><span class="line"><span class="comment">// 但是255是无符号整型</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">-1</span>; <span class="comment">// 0xFF (8位截断) 11111111</span></span><br><span class="line">alert(unsignedInts); <span class="comment">// [0, 255]</span></span><br><span class="line"><span class="comment">// 2的补码上溢。</span></span><br><span class="line"><span class="comment">// 0x80表示无符号整型数128，而-128表示2进制整型数补码</span></span><br><span class="line">ints[<span class="number">1</span>] = <span class="number">128</span>; <span class="comment">// 0x80 10000000</span></span><br><span class="line">alert(ints); <span class="comment">// [0, -128]</span></span><br><span class="line"><span class="comment">// 2的补码下溢。</span></span><br><span class="line"><span class="comment">// 0xFF表示无符号整型数255，而-1表示2进制整型数补码</span></span><br><span class="line">ints[<span class="number">1</span>] = <span class="number">255</span>; <span class="comment">// 0xFF 11111111</span></span><br><span class="line">alert(ints); <span class="comment">// [0, -1]</span></span><br></pre></td></tr></table></figure><p>除了八个元素类型之外，还有一个额外的“夹紧”数组类型 Uint8ClampedArray，它可以防止向任何一个方向溢出。高于其最大值 255 的数值将四舍五入到 255，低于 0 的数值将四舍五入到 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clampedInts = <span class="keyword">new</span> <span class="built_in">Uint8ClampedArray</span>([<span class="number">-1</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">256</span>]);</span><br><span class="line">alert(clampedInts); <span class="comment">// [0, 0, 255, 255]</span></span><br></pre></td></tr></table></figure><p>根据 Brendan Eich 的说法，“Uint8ClampedArray 完全是 HTML5 canvas 元素的历史产物。除非你真的在做类似 canvas-y 的东西，否则要避免使用 Uint8ClampedArray 。”</p><h3 id="Map-类型"><a href="#Map-类型" class="headerlink" title="Map 类型"></a>Map 类型</h3><p>在 ECMAScript6 规范之前，通过使用 Object，对象属性作为键，属性引用作为值，可以有效且容易地在 JavaScript 中实现键/值存储。然而这种实现方式有一定缺陷，因此 TC39 委员会认为应该为实现真正的键/值存储定义一个规范。</p><p>Map 是 ECMAScript6 中新添加的一种集合类型，向语言中引入了真正的键/值行为。Map 的大部分内容与 Object 类型的内容重叠，但是在选择要使用 Object 和 Map 类型时应该考虑到它们之间的细微差别。</p><h4 id="基础-API"><a href="#基础-API" class="headerlink" title="基础 API"></a>基础 API</h4><p>使用 new 关键字实例化一个空的 Map 实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br></pre></td></tr></table></figure><p>如果希望在 Map 初始化就填充键值对，那么构造函数可接受一个包含键/值对数组的可迭代对象。迭代参数中的每一对键值都将按顺序插入到新创建的 Map 实例中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用嵌套数组来初始化一个Map实例</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>],</span><br><span class="line">]);</span><br><span class="line">alert(m1.size); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 使用自定义迭代器初始化一个Map实例</span></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">'key1'</span>, <span class="string">'val1'</span>];</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">'key2'</span>, <span class="string">'val2'</span>];</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">'key3'</span>, <span class="string">'val3'</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">alert(m2.size); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 无论是否提供了键值对，Map期望值都是键值对</span></span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>([[]]);</span><br><span class="line">alert(m3.has(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line">alert(m3.get(<span class="literal">undefined</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>初始化后可以使用 set()方法添加键/值对，使用 get()和 has()方法查询，使用 size 属性计数，使用 delete()和 clear()方法删除键/值对:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">alert(m.has(<span class="string">'firstName'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(m.get(<span class="string">'firstName '</span>)); <span class="comment">// undefined</span></span><br><span class="line">alert(m.size); <span class="comment">// 0</span></span><br><span class="line">m.set(<span class="string">'firstName'</span>, <span class="string">'Matt'</span>).set(<span class="string">'lastName'</span>, <span class="string">'Frisbie'</span>);</span><br><span class="line">alert(m.has(<span class="string">'firstName'</span>)); <span class="comment">// true</span></span><br><span class="line">alert(m.get(<span class="string">'firstName'</span>)); <span class="comment">// Matt</span></span><br><span class="line">alert(m.size); <span class="comment">// 2</span></span><br><span class="line">m.delete(<span class="string">'firstName'</span>); <span class="comment">// 只删除这一个键值对</span></span><br><span class="line">alert(m.has(<span class="string">'firstName'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(m.has(<span class="string">'lastName'</span>)); <span class="comment">// true</span></span><br><span class="line">alert(m.size); <span class="comment">// 1</span></span><br><span class="line">m.clear(); <span class="comment">// 删除所有的键值对</span></span><br><span class="line">alert(m.has(<span class="string">'firstName'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(m.has(<span class="string">'lastName'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(m.size); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>set() 方法返回 Map 实例，因此可以将多个 set 操作链接在一起，包括初始声明:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'key1'</span>, <span class="string">'val1'</span>);</span><br><span class="line">m.set(<span class="string">'key2'</span>, <span class="string">'val2'</span>).set(<span class="string">'key3'</span>, <span class="string">'val3'</span>);</span><br><span class="line">alert(m.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>Object 只能使用数字或字符串作为键，但是 Map 可以使用任何 JavaScript 数据类型作为键。它使用“SameValueZero”比较操作(在 ECMAScript 规范中定义，在实际语言中不可用)，与使用严格对象等价检查的键名匹配基本相似。与 Object 一样，对于值中包含的内容没有限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> functionKey = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> symbolKey = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> objectKey = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">m.set(functionKey, <span class="string">'functionValue'</span>);</span><br><span class="line">m.set(symbolKey, <span class="string">'symbolValue'</span>);</span><br><span class="line">m.set(objectKey, <span class="string">'objectValue'</span>);</span><br><span class="line">alert(m.get(functionKey)); <span class="comment">// functionValue</span></span><br><span class="line">alert(m.get(symbolKey)); <span class="comment">// symbolValue</span></span><br><span class="line">alert(m.get(objectKey)); <span class="comment">// objectValue</span></span><br><span class="line"><span class="comment">// SameValueZero检查意味着不同实例不会造成冲突</span></span><br><span class="line">alert(m.get(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>与严格等价一样，当内容或属性改变时，Map 中用于键和值的对象和其他“集合”类型保持不变:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> objKey = &#123;&#125;,</span><br><span class="line">  objVal = &#123;&#125;,</span><br><span class="line">  arrKey = [],</span><br><span class="line">  arrVal = [];</span><br><span class="line">m.set(objKey, objVal);</span><br><span class="line">m.set(arrKey, arrVal);</span><br><span class="line">objKey.foo = <span class="string">'foo'</span>;</span><br><span class="line">objVal.bar = <span class="string">'bar'</span>;</span><br><span class="line">arrKey.push(<span class="string">'foo'</span>);</span><br><span class="line">arrVal.push(<span class="string">'bar'</span>);</span><br><span class="line">alert(m.get(objKey)); <span class="comment">// &#123;bar: "bar"&#125;</span></span><br><span class="line">alert(m.get(arrKey)); <span class="comment">// ["bar"]</span></span><br></pre></td></tr></table></figure><p>使用 SameValueZero 操作可能会引发意外的冲突:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">0</span> / <span class="string">''</span>, <span class="comment">// NaN</span></span><br><span class="line">  b = <span class="number">0</span> / <span class="string">''</span>, <span class="comment">// NaN</span></span><br><span class="line">  pz = +<span class="number">0</span>,</span><br><span class="line">  nz = <span class="number">-0</span>;</span><br><span class="line">alert(a === b); <span class="comment">// false</span></span><br><span class="line">alert(pz === nz); <span class="comment">// true</span></span><br><span class="line">m.set(a, <span class="string">'foo'</span>);</span><br><span class="line">m.set(pz, <span class="string">'bar'</span>);</span><br><span class="line">alert(m.get(b)); <span class="comment">// foo</span></span><br><span class="line">alert(m.get(nz)); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：SameValueZero 操作对于 ECMAScript 规范来说是新的内容。在 Mozilla 的文档网站上有一篇关于 SameValueZero 和其他 ECMAScript 等价约定的优秀文章<code>https://developer.mozilla.org/en-US/docs/ Web/JavaScript/Equality_comparisons_and_sameness</code>。</p></blockquote><h4 id="顺序和迭代"><a href="#顺序和迭代" class="headerlink" title="顺序和迭代"></a>顺序和迭代</h4><p>与 Object 类型的一个主要区别是，Map 实例维护键值对插入的顺序，并允许按照插入顺序执行迭代操作。</p><p>Map 实例可以提供一个迭代器，该迭代器内按插入顺序排列形式为[key，value]的数组对。可以使用 entries()或 symboli.iterator 属性检索该迭代器（实际是引用了 entries()），如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>],</span><br><span class="line">]);</span><br><span class="line">alert(m.entries === m[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> m.entries()) &#123;</span><br><span class="line">  alert(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [key1,val1]</span></span><br><span class="line"><span class="comment">// [key2,val2]</span></span><br><span class="line"><span class="comment">// [key3,val3]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> m[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">  alert(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [key1,val1]</span></span><br><span class="line"><span class="comment">// [key2,val2]</span></span><br><span class="line"><span class="comment">// [key3,val3]</span></span><br></pre></td></tr></table></figure><p>因为 entries()是默认的迭代器，所以可以使用扩展操作符方便地将 Map 转换为数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>],</span><br><span class="line">]);</span><br><span class="line">alert([...m]); <span class="comment">// [[key1,val1],[key2,val2],[key3,val3]]</span></span><br></pre></td></tr></table></figure><p>forEach(callback，optthisarg)为每个键值对调用回调函数而不是迭代器。有第二个可选参数，该参数将覆盖每个回调函数内部的 this 参数的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>],</span><br><span class="line">]);</span><br><span class="line">m.forEach(<span class="function">(<span class="params">val, key</span>) =&gt;</span> alert(<span class="string">`<span class="subst">$&#123;key&#125;</span> -&gt; <span class="subst">$&#123;val&#125;</span>`</span>));</span><br><span class="line"><span class="comment">// key1 -&gt; val1</span></span><br><span class="line"><span class="comment">// key2 -&gt; val2</span></span><br><span class="line"><span class="comment">// key3 -&gt; val3</span></span><br></pre></td></tr></table></figure><p>Keys()和 values()返回一个迭代器，该迭代器按照排序顺序迭代 Map 中的所有键或所有值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">  alert(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="comment">// key3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.values()) &#123;</span><br><span class="line">  alert(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value1</span></span><br><span class="line"><span class="comment">// value2</span></span><br><span class="line"><span class="comment">// value3</span></span><br></pre></td></tr></table></figure><p>迭代器中的键和值是可变的，但不能更改 Map 中的引用。但是，并不限制键或值对象内的属性更改。如下行为不会改变键和值对于 Map 实例的关系:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'key1'</span>, <span class="string">'val1'</span>]]);</span><br><span class="line"><span class="comment">// 原始字符串键名不可替换</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">  key = <span class="string">'newKey'</span>;</span><br><span class="line">  alert(key); <span class="comment">// newKey</span></span><br><span class="line">  alert(m.get(<span class="string">'key1'</span>)); <span class="comment">// val1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> keyObj = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[keyObj, <span class="string">'val1'</span>]]);</span><br><span class="line"><span class="comment">// 键名对象的属性更改，但是这个对象在Map实例内部仍然指向相同的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">  key.id = <span class="string">'newKey'</span>;</span><br><span class="line">  alert(key); <span class="comment">// &#123;id: "newKey"&#125;</span></span><br><span class="line">  alert(m.get(keyObj)); <span class="comment">// val1</span></span><br><span class="line">&#125;</span><br><span class="line">alert(keyObj); <span class="comment">// &#123;id: "newKey"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="在-Objects-和-Map-之间选择"><a href="#在-Objects-和-Map-之间选择" class="headerlink" title="在 Objects 和 Map 之间选择"></a>在 Objects 和 Map 之间选择</h4><p>对于大多数 web 开发来说，在 Map 或者普通 Object 之间进行选择只是一个个人喜好问题，在其他方面几乎没有什么影响。然而，对于关心内存和性能的开发者来说，Object 和 Map 之间存在着显著的差异。</p><h5 id="内存文件"><a href="#内存文件" class="headerlink" title="内存文件"></a>内存文件</h5><p>不同浏览器的 Object 和 Map 的在引擎级别实现时会有明显的差异，但是存储键值对所需的内存量与键的数量成线性关系。键值对的批量添加或删除还取决于引擎如何实现该类型的内存分配。虽然结果可能因浏览器而异，但是给定一个固定的内存量，Map 能够比 Object 多存储大约 50%的键值对。</p><h5 id="插入性能"><a href="#插入性能" class="headerlink" title="插入性能"></a>插入性能</h5><p>在 Object 和 Map 中插入一个新的键值对是大致相同的操作，但是在所有的浏览器引擎中插入 Map 通常会稍微快一些。对于这两种类型来说，插入的速度不都会随 Object 或 Map 中键值对的数量线性降低。如果代码大量使用插入操作，则 Map 实例提供更好一点的性能。</p><h5 id="查找性能"><a href="#查找性能" class="headerlink" title="查找性能"></a>查找性能</h5><p>与插入操作不同，在 Object 和 Map 中查找键值对的速度上大致相当，但在某些情况下，较少数量的键值对时，Object 实例会更快。在将 Object 实例用作数组的情况下(例如，连续的整数属性)，浏览器引擎可以执行优化（例如在内存中提高布局效率）ーー这在 Map 中是不可能的。对于这两种类型，查找速度不会随 Object 或 Map 中键值对的数量线性变慢。如果您的代码大量使用查找操作，在某些情况下使用 Object 可能更为有利。</p><h5 id="删除性能"><a href="#删除性能" class="headerlink" title="删除性能"></a>删除性能</h5><p>对 Object 属性执行的删除操作的性能是臭名昭著的，这在许多浏览器引擎中仍然很常见。删除对象属性的伪解决方案包括将属性值设为 undefined 的或 null，但在许多情况下，这是不合适的折衷方案。在大多数浏览器引擎中，Map 的 delete()操作比插入和查找更快。如果代码大量使用删除操作，则 Map 类型是最合适的类型。</p><h3 id="WeakMap-类型"><a href="#WeakMap-类型" class="headerlink" title="WeakMap 类型"></a>WeakMap 类型</h3><p>在 ECMAScript6 中新添加的 WeakMap 类型是一种新的集合类型，它在语言中引入了增强的键值行为。Weakmap 类型是 Map 类型的近亲，它的 API 是 Map 类型 API 的严格子集。“弱（weak）”这个名称描述了 JavaScript 的垃圾回收器如何处理 Weakmap。</p><h4 id="基础-API-1"><a href="#基础-API-1" class="headerlink" title="基础 API"></a>基础 API</h4><p>使用 new 关键字实例化一个空的 WeakMap:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  key2 = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  key3 = &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="comment">// 使用潜逃数组实例化一个WeakMap</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([</span><br><span class="line">  [key1, <span class="string">'val1'</span>],</span><br><span class="line">  [key2, <span class="string">'val2'</span>],</span><br><span class="line">  [key3, <span class="string">'val3'</span>],</span><br><span class="line">]);</span><br><span class="line">alert(wm.get(key1)); <span class="comment">// val2</span></span><br><span class="line">alert(wm.get(key2)); <span class="comment">// val2</span></span><br><span class="line">alert(wm.get(key3)); <span class="comment">// val3</span></span><br><span class="line"><span class="comment">// 实例化过程是一个要么全有要么全无的过程，一个错误的键名会抛出一个error并中止实例化过程</span></span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([</span><br><span class="line">  [key1, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'BADKEY'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [key3, <span class="string">'val3'</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as WeakMap key</span></span><br><span class="line"><span class="keyword">typeof</span> wm2;</span><br><span class="line"><span class="comment">// ReferenceError: wm2 is not defined</span></span><br><span class="line"><span class="comment">// 使用对象封装的原始类型仍然可以使用</span></span><br><span class="line"><span class="keyword">const</span> stringKey = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'key1'</span>);</span><br><span class="line"><span class="keyword">const</span> wm3 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([stringKey, <span class="string">'val1'</span>]);</span><br><span class="line">alert(wm3.get(stringKey)); <span class="comment">// "val1"</span></span><br></pre></td></tr></table></figure><p>键值对可以在初始化后使用 set()方法添加，用 get()方法和 has()方法查询，用 delete()方法删除:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key1 = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  key2 = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line">alert(wm.has(key1)); <span class="comment">// false</span></span><br><span class="line">alert(wm.get(key1)); <span class="comment">// undefined</span></span><br><span class="line">wm.set(key1, <span class="string">'Matt'</span>).set(key2, <span class="string">'Frisbie'</span>);</span><br><span class="line">alert(wm.has(key1)); <span class="comment">// true</span></span><br><span class="line">alert(wm.get(key1)); <span class="comment">// Matt</span></span><br><span class="line">wm.delete(key1); <span class="comment">// 只删除这一个键值对</span></span><br><span class="line">alert(wm.has(key1)); <span class="comment">// false</span></span><br><span class="line">alert(wm.has(key2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>set()方法返回 WeakMap 实例，因此可以将多个 set 操作包括初始声明链接在一起:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  key2 = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  key3 = &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>().set(key1, <span class="string">'val1'</span>);</span><br><span class="line">wm.set(key2, <span class="string">'val2'</span>).set(key3, <span class="string">'val3'</span>);</span><br><span class="line">alert(wm.get(key1)); <span class="comment">// val1</span></span><br><span class="line">alert(wm.get(key2)); <span class="comment">// val2</span></span><br><span class="line">alert(wm.get(key3)); <span class="comment">// val3</span></span><br></pre></td></tr></table></figure><h4 id="弱键"><a href="#弱键" class="headerlink" title="弱键"></a>弱键</h4><p>“弱（weak）”源于 WeakMap 中的键名是“弱持有（weakly held）”的，这意味着它们不被计算为正式的引用，也就不会阻止垃圾收集。Weakmap 的一个重要区别是值引用不被弱持有。只要键名存在，键值对就会保留在映射中，并作为对该值的引用计数，从而防止对该值进行垃圾收集。</p><p>比如下面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">wm.set(&#123;&#125;, <span class="string">'val'</span>);</span><br></pre></td></tr></table></figure><p>在 set()中，将初始化一个新对象，并将其用作虚拟字符串的键。因为没有对这个对象的其他引用，所以只要执行完这一行，对象键名就可以用于垃圾收集。发生这种情况时，键值对将从 WeakMap 中消失且为空。在这个示例中，由于没有对该键值的其他引用，这个键值对删除还意味着该键值可以进行垃圾收集。</p><p>参考一个稍微不同的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> container = &#123;</span><br><span class="line">  key: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">wm.set(container.key, <span class="string">'val'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeReference</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  container.key = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，container 对象维护对 WeakMap 中键的引用，因此该对象不适用于垃圾收集。但是，一旦调用 removeReference()，对键对象的最后一个强引用将被销毁，垃圾收集机制最终将清除键值对。</p><h4 id="不可迭代的键"><a href="#不可迭代的键" class="headerlink" title="不可迭代的键"></a>不可迭代的键</h4><p>由于 WeakMap 中的键值对可以随时销毁，因此提供遍历键值对的能力是无意义的。这也排除了使用 clear()一次销毁所有键值对的需求，clear()不是 WeakMap API 的一部分。因为不允许迭代，所以也不可能从 WeakMap 实例检索值（除非您有对键对象的引用）。即使代码可以访问 WeakMap 实例，也无法检查其内容。</p><p>Weakmap 实例将键名限制只为对象的原因是为了遵守这样一个约定：即从 WeakMap 中只能通过引用键对象检索值。如果允许原始类型，WeakMap 实例将无法区分最初用于设置键值对的字符串原始类型和后来初始化的相同字符串原始类型ーー这是一种不希望出现的行为。</p><h4 id="实用性"><a href="#实用性" class="headerlink" title="实用性"></a>实用性</h4><p>Weakmap 实例与现有的 JavaScript 工具有着显著的不同，并且没有很明显地指示出应该如何使用。这个问题没有一个简单的答案，但已经出现了一些策略。</p><h5 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h5><p>Weakmap 实例为在 JavaScript 实现真正的私有变量提供了一种全新的方式。前提比较直接：私有变量将存储在 WeakMap 中，对象实例作为键名，私有成员字典作为值。</p><p>实现方式如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.idProperty = <span class="built_in">Symbol</span>(<span class="string">'id'</span>);</span><br><span class="line">    <span class="keyword">this</span>.setId(id);</span><br><span class="line">  &#125;</span><br><span class="line">  setPrivate(property, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> privateMembers = wm.get(<span class="keyword">this</span>) || &#123;&#125;;</span><br><span class="line">    privateMembers[property] = value;</span><br><span class="line">    wm.set(<span class="keyword">this</span>, privateMembers);</span><br><span class="line">  &#125;</span><br><span class="line">  getPrivate(property) &#123;</span><br><span class="line">    <span class="keyword">return</span> wm.get(<span class="keyword">this</span>)[property];</span><br><span class="line">  &#125;</span><br><span class="line">  setId(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setPrivate(<span class="keyword">this</span>.idProperty, id);</span><br><span class="line">  &#125;</span><br><span class="line">  getId() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getPrivate(<span class="keyword">this</span>.idProperty);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 123</span></span><br><span class="line">user.setId(<span class="number">456</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 456</span></span><br><span class="line"><span class="comment">// 证明这不是一个真正私有变量</span></span><br><span class="line">alert(wm.get(user)[user.idProperty]); <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>仔细观察可以发现，在这种实现中，外部代码只需要对对象实例和 WeakMap 的引用，就可以检索私有变量。为了防止这种情况，可以将 WeakMap 包装在一个闭包中以便完全隐藏 WeakMap 实例，不让外部代码看到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.idProperty = <span class="built_in">Symbol</span>(<span class="string">'id'</span>);</span><br><span class="line">      <span class="keyword">this</span>.setId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setPrivate(property, value) &#123;</span><br><span class="line">      <span class="keyword">const</span> privateMembers = wm.get(<span class="keyword">this</span>) || &#123;&#125;;</span><br><span class="line">      privateMembers[property] = value;</span><br><span class="line">      wm.set(<span class="keyword">this</span>, privateMembers);</span><br><span class="line">    &#125;</span><br><span class="line">    getPrivate(property) &#123;</span><br><span class="line">      <span class="keyword">return</span> wm.get(<span class="keyword">this</span>)[property];</span><br><span class="line">    &#125;</span><br><span class="line">    setId(id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setPrivate(<span class="keyword">this</span>.idProperty, id);</span><br><span class="line">    &#125;</span><br><span class="line">    getId(id) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getPrivate(<span class="keyword">this</span>.idProperty);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> User;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 123</span></span><br><span class="line">user.setId(<span class="number">456</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>因此，如果没有用于插入的键，就不能检索 WeakMap 中的值。尽管这会阻止前面提到的私有变量的访问模式，但在某些方面，它将代码推向了 ES6 之前的闭包私有变量模式。</p><h5 id="DOM-节点元数据"><a href="#DOM-节点元数据" class="headerlink" title="DOM 节点元数据"></a>DOM 节点元数据</h5><p>因为 WeakMap 实例不会干扰垃圾收集，所以它可用于清除无需清除的元数据关联。比如下面的例子，使用了一个普通的 Map:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>);</span><br><span class="line"><span class="comment">// 关联一些节点的元数据</span></span><br><span class="line">m.set(loginButton, &#123; <span class="attr">disabled</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><p>假设这段代码执行后，页面被 JavaScript 更改，登录按钮从 DOM 树中删除。由于在 Map 中存在一个引用，所以 DOM 节点将永久地停留在内存中，直到显式地从 Map 中删除或者 Map 被销毁。</p><p>如果使用 WeakMap，如下面的代码所示，从 DOM 中删除节点将允许垃圾收集器立即释放分配的内存(假设没有其他对象的延迟引用)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>);</span><br><span class="line"><span class="comment">// 关联一些节点的元数据</span></span><br><span class="line">wm.set(loginButton, &#123; <span class="attr">disabled</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="Set-类型"><a href="#Set-类型" class="headerlink" title="Set 类型"></a>Set 类型</h3><p>在 ECMAScript6 中新添加的 Set 是一种新的集合类型，引入了 set 行为。因为许多 API 和行为都是共享的，Set 在很多方面更像是一个扩展的 Map。</p><h4 id="基础-API-2"><a href="#基础-API-2" class="headerlink" title="基础 API"></a>基础 API</h4><p>使用 new 关键字实例化一个空的 Set 类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>如果希望在初始化时就填充，构造函数可以选择接受一个要添加到新创建的 Set 实例中的元素组成的的可迭代对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组实例化一个Set</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"val1"</span>, <span class="string">"val2"</span>, <span class="string">"val3]);</span></span><br><span class="line"><span class="string">alert(s1.size); // 3</span></span><br><span class="line"><span class="string">// 使用自定义迭代器实例化一个Set</span></span><br><span class="line"><span class="string">const s2 = new Set(&#123;</span></span><br><span class="line"><span class="string">  [Symbol.iterator]: function*() &#123;</span></span><br><span class="line"><span class="string">    yield "</span>val1<span class="string">";</span></span><br><span class="line"><span class="string">    yield "</span>val2<span class="string">";</span></span><br><span class="line"><span class="string">    yield "</span>val3<span class="string">";</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">alert(s2.size); // 3</span></span><br></pre></td></tr></table></figure><p>初始化后使用 add()方法可以添加值，使用 has()方法查询值，使用 size 属性计数，使用 delete()和 clear()方法删除值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">alert(s.has(<span class="string">'Matt'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(s.size); <span class="comment">// 0</span></span><br><span class="line">s.add(<span class="string">'Matt'</span>).add(<span class="string">'Frisbie'</span>);</span><br><span class="line">alert(s.has(<span class="string">'Matt'</span>)); <span class="comment">// true</span></span><br><span class="line">alert(s.size); <span class="comment">// 2</span></span><br><span class="line">s.delete(<span class="string">'Matt'</span>);</span><br><span class="line">alert(s.has(<span class="string">'Matt'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(s.has(<span class="string">'Frisbie'</span>)); <span class="comment">// true</span></span><br><span class="line">alert(s.size); <span class="comment">// 1</span></span><br><span class="line">s.clear(); <span class="comment">// 销毁Set实例中所有的值</span></span><br><span class="line">alert(s.has(<span class="string">'Matt'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(s.has(<span class="string">'Frisbie'</span>)); <span class="comment">// false</span></span><br><span class="line">alert(s.size); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>add()方法返回 Set 实例，因此可以将多个 add()操作（包括初始声明）连接在一起，:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">'val1'</span>);</span><br><span class="line">s.set(<span class="string">'val2'</span>).set(<span class="string">'val3'</span>);</span><br><span class="line">alert(s.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>像 Map 一样，Set 可以包含任何 JavaScript 数据类型作为值。它使用“SameValueZero”进行比较操作(在 ECMAScript 规范中定义，在实际语言中不可用)，与使用严格的对象等价来检查匹配大致相同。对于值中包含的内容没有限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> functionVal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> symbolVal = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> objectVal = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">s.add(functionVal);</span><br><span class="line">s.add(symbolVal);</span><br><span class="line">s.add(objectVal);</span><br><span class="line">alert(s.has(functionVal)); <span class="comment">// true</span></span><br><span class="line">alert(s.has(symbolVal)); <span class="comment">// true</span></span><br><span class="line">alert(s.has(objectVal)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// SameValueZero 检查意味着相同内容的不同实例不会发生冲突</span></span><br><span class="line">alert(s.has(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>与严格等价一样，当用于值的对象和其他“集合（collection）”类型的内容或属性被更改时保持不变:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> objVal = &#123;&#125;,</span><br><span class="line">  arrVal = [];</span><br><span class="line">s.add(objVal).add(arrVal);</span><br><span class="line">objVal.bar = <span class="string">'bar'</span>;</span><br><span class="line">arrVal.push(<span class="string">'bar'</span>);</span><br><span class="line">alert(s.has(objVal)); <span class="comment">// true</span></span><br><span class="line">alert(s.has(arrVal)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Add()和 delete()操作是幂等的。delete()返回一个布尔值，指示该值是否存在于 set 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">'foo'</span>);</span><br><span class="line">alert(s.size); <span class="comment">// 1</span></span><br><span class="line">s.add(<span class="string">'foo'</span>);</span><br><span class="line">alert(s.size); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 值在set种存在</span></span><br><span class="line">alert(s.delete(<span class="string">'foo'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 值在set种不存在</span></span><br><span class="line">alert(s.delete(<span class="string">'foo'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="顺序和迭代-1"><a href="#顺序和迭代-1" class="headerlink" title="顺序和迭代"></a>顺序和迭代</h4><p>Set 保持值插入的顺序，并允许按照插入顺序执行迭代操作。</p><p>Set 实例有将 Set 内容的按插入顺序排列的迭代器。可以使用 values()、别名 keys()或 symbolist.iterator 属性检索这个迭代器，这些都引用 values():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'val1'</span>, <span class="string">'val2'</span>, <span class="string">'val3'</span>]);</span><br><span class="line">alert(s.values === s[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line">alert(s.keys === s[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s.values()) &#123;</span><br><span class="line">  alert(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// val1</span></span><br><span class="line"><span class="comment">// val2</span></span><br><span class="line"><span class="comment">// val3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">  alert(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// val1</span></span><br><span class="line"><span class="comment">// val2</span></span><br><span class="line"><span class="comment">// val3</span></span><br></pre></td></tr></table></figure><p>因为 value()是默认的迭代器，所以可以使用 spread 操作符简洁地将 set 转换为数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'val1'</span>, <span class="string">'val2'</span>, <span class="string">'val3'</span>]);</span><br><span class="line">alert([...s]); <span class="comment">// [val1,val2,val3]</span></span><br></pre></td></tr></table></figure><p>entries()返回一个迭代器，该迭代器包含一个二元素数组，该数组按插入顺序包含 Set 中所有值的副本:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'val1'</span>, <span class="string">'val2'</span>, <span class="string">'val3'</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> s.entries()) &#123;</span><br><span class="line">  alert(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [val1,val1]</span></span><br><span class="line"><span class="comment">// [val2,val2]</span></span><br><span class="line"><span class="comment">// [val3,val3]</span></span><br></pre></td></tr></table></figure><p>forEach(callback，optthisarg)调用每个值的回调时，使用回调函数而不是迭代器。接受第二个可选参数，该参数将覆盖每个回调函数内部的 this 指向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'val1'</span>, <span class="string">'val2'</span>, <span class="string">'val3'</span>]);</span><br><span class="line">s.forEach(<span class="function">(<span class="params">val, dupVal</span>) =&gt;</span> alert(<span class="string">`<span class="subst">$&#123;val&#125;</span> -&gt; <span class="subst">$&#123;dupVal&#125;</span>`</span>));</span><br><span class="line"><span class="comment">// val1 -&gt; val1</span></span><br><span class="line"><span class="comment">// val2 -&gt; val2</span></span><br><span class="line"><span class="comment">// val3 -&gt; val3</span></span><br></pre></td></tr></table></figure><p>更改 Set 中值的属性不会更改 Set 实例的值的 id：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'val1'</span>]);</span><br><span class="line"><span class="comment">// 原始字符串类型值不能更改</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> m.values()) &#123;</span><br><span class="line">  value = <span class="string">'newVal'</span>;</span><br><span class="line">  alert(value); <span class="comment">// newVal</span></span><br><span class="line">  alert(s.has(<span class="string">'val1'</span>)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> valObj = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([valObj]);</span><br><span class="line"><span class="comment">// 值对象的属性改变了，但是这个对象依然存在在set中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s.values()) &#123;</span><br><span class="line">  value.id = <span class="string">'newVal'</span>;</span><br><span class="line">  alert(value); <span class="comment">// &#123;id: "newVal"&#125;</span></span><br><span class="line">  alert(s.has(valObj)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">alert(valObj); <span class="comment">// &#123;id: "newKey"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="定义形式化的-Set-操作"><a href="#定义形式化的-Set-操作" class="headerlink" title="定义形式化的 Set 操作"></a>定义形式化的 Set 操作</h4><p>Set 在许多方面感觉像是 Map，只不过 API 稍微重新排列了一下。通过其 API 仅支持自引用操作来强调这一点。许多开发者对使用 Set 操作有兴趣，这需要采用继承 Set 的方式或定义实用程序库形式手工实现。为了同时提供这两种方式，可以在子类上实现静态方法，然后在实例方法中使用这些静态方法。在执行这些操作时，需要记住以下几点:</p><ul><li><p>有些 Set 操作是相互关联的，因此最好能够实现该方法以便它能够处理任意数量的 Set 实例是。</p></li><li><p>Set 保留插入顺序，从这些方法返回的 set 应该反映处这一事实。</p></li><li><p>尽可能高效地使用内存。扩展操作符提供了很好的语法，但尽可能避免在 set 和数组之间来回切换以节省对象初始化成本。</p></li><li><p>不要修改现有的 Set 实例。union(a, b) 或 a.union(b))应该返回一个新的 Set 类型的实例。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XSet</span> <span class="keyword">extends</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  union(...sets) &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.union(<span class="keyword">this</span>, ...sets);</span><br><span class="line">  &#125;</span><br><span class="line">  intersection(...sets) &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.intersection(<span class="keyword">this</span>, ...sets);</span><br><span class="line">  &#125;</span><br><span class="line">  difference(<span class="keyword">set</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.difference(<span class="keyword">this</span>, <span class="keyword">set</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  symmetricDifference(<span class="keyword">set</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.symmetricDifference(<span class="keyword">this</span>, <span class="keyword">set</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  cartesianProduct(<span class="keyword">set</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.cartesianProduct(<span class="keyword">this</span>, <span class="keyword">set</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  powerSet() &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.powerSet(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回多个set实例的并集</span></span><br><span class="line">  <span class="keyword">static</span> union(a, ...bSets) &#123;</span><br><span class="line">    <span class="keyword">const</span> unionSet = <span class="keyword">new</span> XSet(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bSets) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> bValue <span class="keyword">of</span> b) &#123;</span><br><span class="line">        unionSet.add(bValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回多个set实例的交集</span></span><br><span class="line">  <span class="keyword">static</span> intersection(a, ...bSets) &#123;</span><br><span class="line">    <span class="keyword">const</span> intersectionSet = <span class="keyword">new</span> XSet(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> aValue <span class="keyword">of</span> intersectionSet) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bSets) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!b.has(aValue)) &#123;</span><br><span class="line">          intersectionSet.delete(aValue);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回多个set实例的补集</span></span><br><span class="line">  <span class="keyword">static</span> difference(a, b) &#123;</span><br><span class="line">    <span class="keyword">const</span> differenceSet = <span class="keyword">new</span> XSet(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> bValue <span class="keyword">of</span> b) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a.has(bValue)) &#123;</span><br><span class="line">        differenceSet.delete(bValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回多个set实例的对称差</span></span><br><span class="line">  <span class="keyword">static</span> symmetricDifference(a, b) &#123;</span><br><span class="line">    <span class="comment">// a∪b - a∩b</span></span><br><span class="line">    <span class="keyword">return</span> a.union(b).difference(a.intersection(b));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回两个set的笛卡尔积，第一个是a的元素而第二个是b的所有可能有序对的其中一个元素</span></span><br><span class="line">  <span class="keyword">static</span> cartesianProduct(a, b) &#123;</span><br><span class="line">    <span class="keyword">const</span> cartesianProductSet = <span class="keyword">new</span> XSet();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> aValue <span class="keyword">of</span> a) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> bValue <span class="keyword">of</span> b) &#123;</span><br><span class="line">        cartesianProductSet.add([aValue, bValue]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cartesianProductSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个set的幂集</span></span><br><span class="line">  <span class="keyword">static</span> powerSet(a) &#123;</span><br><span class="line">    <span class="keyword">const</span> powerSet = <span class="keyword">new</span> XSet().add(<span class="keyword">new</span> XSet());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> aValue <span class="keyword">of</span> a) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">set</span> of new XSet(powerSet)) &#123;</span><br><span class="line">        powerSet.add(<span class="keyword">new</span> XSet(<span class="keyword">set</span>).add(aValue));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return powerSet;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WeakSet-类型"><a href="#WeakSet-类型" class="headerlink" title="WeakSet 类型"></a>WeakSet 类型</h3><p>在 ECMAScript6 中新添加的 WeakSet 是一种新的集合类型。Weakset 类型是 Set 类型的近亲，它的 API 是 Set 类型 API 的严格子集。“弱（weak）”这个名称描述了 JavaScript 的垃圾收集器如何处理弱映射中的值。</p><h4 id="基础-API-3"><a href="#基础-API-3" class="headerlink" title="基础 API"></a>基础 API</h4><p>用 new 关键字实例化一个空的 WeakSet 类型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br></pre></td></tr></table></figure><p>Weakset 中的值只能是 Object 类型或者继承自 Object 类型 ー尝试使用非 Object 类型去设置值会抛出 TypeError。</p><p>如果希望在 WeakSet 初始化时就填充值，构造函数可以地接受一个可选包含有效值的对象。参数中的每个值将按照迭代的顺序插入到新创建的 WeakSet 中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">val2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">     <span class="comment">// 用嵌套数组实例化一个WeakSet</span></span><br><span class="line"><span class="keyword">const</span> ws1 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([val1, val2, val3]);</span><br><span class="line">alert(ws1.has(val1)); <span class="comment">// true</span></span><br><span class="line">alert(ws1.has(val2)); <span class="comment">// true</span></span><br><span class="line">alert(ws1.has(val3)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 实例化过程是一个要么全有要么全无的过程，一个错误的键名会抛出一个error并中止实例化过程</span></span><br><span class="line"><span class="keyword">const</span> ws2 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([val1, <span class="string">"BADVAL"</span>, val3]);</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in WeakSet</span></span><br><span class="line"><span class="keyword">typeof</span> ws2;</span><br><span class="line"><span class="comment">// ReferenceError: ws2 is not defined</span></span><br><span class="line"><span class="comment">// 使用对象封装的原始类型仍然可以使用</span></span><br><span class="line"><span class="keyword">const</span> stringVal = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"val1"</span>);</span><br><span class="line"><span class="keyword">const</span> ws3 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([stringVal]);</span><br><span class="line">alert(ws3.has(stringVal)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>初始化后可以使用 add()方法添加值，使用 has()方法查询值，使用 delete()方法删除值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> val1 = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  val2 = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;;</span><br><span class="line">alert(ws.has(val1)); <span class="comment">// false</span></span><br><span class="line">ws.add(val1).add(val2);</span><br><span class="line">alert(ws.has(val1)); <span class="comment">// true</span></span><br><span class="line">alert(ws.has(val2)); <span class="comment">// true</span></span><br><span class="line">ws.delete(val1); <span class="comment">// 只删除这一个值</span></span><br><span class="line">alert(ws.has(val1)); <span class="comment">// false</span></span><br><span class="line">alert(ws.has(val2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>add()方法返回 WeakSet 实例，因此可以将多个 add 包括初始声明操作连接在一起，:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val1 = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  val2 = &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  val3 = &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>().add(val1);</span><br><span class="line">ws.add(val2).add(val3);</span><br><span class="line">alert(ws.has(val1)); <span class="comment">// true</span></span><br><span class="line">alert(ws.has(val2)); <span class="comment">// true</span></span><br><span class="line">alert(ws.has(val3)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="弱键-1"><a href="#弱键-1" class="headerlink" title="弱键"></a>弱键</h4><p>“弱（weak）”源于 WeakSet 中的值是“弱持有（weakly held）”的，这意味着它们不被计算为正式的引用，也就不会阻止垃圾收集。</p><p>比如下面的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(&#123;&#125;);</span><br></pre></td></tr></table></figure><p>在 add()中，一个新对象被初始化并用作 WeakSet 实例的一个值。因为没有对这个对象的其他引用，所以只要这一行执行完毕，该对象值就可以被垃圾收集器释放。当这种情况发生时，这个值将从 WeakSet 中消失并且为空。</p><p>下面是一个稍微不同的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> container = &#123;</span><br><span class="line">  val: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">ws.add(container.val);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeReference</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  container.val = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，container 对象维护对 WeakSet 实例中的值的引用，因此该对象不会被垃圾收集。但是，一旦调用 removeReference()，就会销毁对 val 对象的最后一个强引用，最终垃圾收集将清除该值。</p><h4 id="不可迭代的值"><a href="#不可迭代的值" class="headerlink" title="不可迭代的值"></a>不可迭代的值</h4><p>因为 WeakSet 中的值可以在任何时候被销毁，所以提供迭代这些值的方法是无意义的。也排除了一次销毁所有值的方法，所以 clear()不是 WeakSet API 的一部分。因为迭代是不可能的，所以从 WeakSet 实例中检索值也是不可能的（除非您有对值对象的引用）。即使代码可以访问 WeakSet 实例，也无法检查其内容。</p><p>WeakSet 实例将键限制仅为对象，也就是只能通过引用值对象从 WeakSet 中检索值。如果允许原始类型，WeakSet 将无法区分最初用于设置值的原始类型字符串和稍后初始化的相同原始类型字符串ーー这是一种不希望出现的行为。</p><h4 id="实用性-1"><a href="#实用性-1" class="headerlink" title="实用性"></a>实用性</h4><p>与 WeakMap 实例相比，WeakSet 实例的实用性更为有限，但它们对于标记对象仍然很有作用。</p><p>参考下面的例子，使用了一个常规的 Set:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> disabledElements = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>);</span><br><span class="line"><span class="comment">// 添加进相关的set将节点标记为disabled</span></span><br><span class="line">disabledElements.add(loginButton);</span><br></pre></td></tr></table></figure><p>在这里，可以极快的通过查看 disabledElements 中元素来检查是否被禁用。但是，如果从 DOM 中删除该元素，该元素在 Set 中的存在将阻止垃圾回收器重新分配内存。</p><p>为了允许垃圾回收器重新分配元素的内存，可以使用 WeakSet 代替:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> disabledElements = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.querySelector(<span class="string">'#login'</span>);</span><br><span class="line"><span class="comment">// 添加进相关的set将节点标记为disabled</span></span><br><span class="line">disabledElements.add(loginButton);</span><br></pre></td></tr></table></figure><p>现在，当从 DOM 中删除 WeakSet 中的任何元素时，垃圾回收器在进行垃圾收集时将忽略它在 WeakSet 中的引用。</p><h3 id="迭代和扩展操作符"><a href="#迭代和扩展操作符" class="headerlink" title="迭代和扩展操作符"></a>迭代和扩展操作符</h3><p>ECMAScript 6 引入了迭代器和扩展运算符，在集合引用类型上下文环境中特别有用。这些新工具允许简单的互操作性、克隆和修改集合类型。</p><blockquote><p>注意:Iterators and Generators 章节提供了更多关于迭代器如何使用的内容。</p></blockquote><p>如本章前文所示，四个原生集合引用类型定义了一个默认迭代器:</p><ul><li>Array</li><li>All typed arrays</li><li>Map</li><li>Set</li></ul><p>实际上，所有支持有序迭代的类型可以传递给 for..of 循环:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterableThings = [</span><br><span class="line">  <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">  (typedArr = <span class="built_in">Int16Array</span>.of(<span class="number">3</span>, <span class="number">4</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">  ]),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">9</span>, <span class="number">10</span>]),</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterableThing <span class="keyword">of</span> iterableThings) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> iterableThing) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// [5, 6]</span></span><br><span class="line"><span class="comment">// [7, 8]</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>所有上述类型都可以使用扩展操作。扩展运算符对迭代对象执行浅拷贝，使你可以用简洁的语法克隆整个对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1 === arr2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>期望一个可迭代对象参数的构造函数可以通过一个可迭代实例参数进行克隆:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>(map1);</span><br><span class="line"><span class="built_in">console</span>.log(map1); <span class="comment">// Map &#123;1 =&gt; 2, 3 =&gt; 4&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map2); <span class="comment">// Map &#123;1 =&gt; 2, 3 =&gt; 4&#125;</span></span><br></pre></td></tr></table></figure><p>还允许进行数组一部分的构造:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">0</span>, ...arr1, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>浅拷贝机制意味着只复制对象的引用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [&#123;&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];</span><br><span class="line">arr1[<span class="number">0</span>].foo = ‘bar’;</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]); <span class="comment">// &#123; foo: ‘bar’ &#125;</span></span><br></pre></td></tr></table></figure><p>这些集合类型中的每一个都支持多种构造方法，比如 Array.of()和 Array.from()静态方法。当与扩展操作符结合时，这使得互操作性变得非常简单:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 把一个数组复制到一个类型化数组</span></span><br><span class="line"><span class="keyword">let</span> typedArr1 = <span class="built_in">Int16Array</span>.of(...arr1);</span><br><span class="line"><span class="keyword">let</span> typedArr2 = <span class="built_in">Int16Array</span>.from(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(typedArr1); <span class="comment">// Int16Array [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(typedArr2); <span class="comment">// Int16Array [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 把一个数组复制到Map实例中</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr1.map(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, ‘val’ + x]));</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map &#123;1 =&gt; ‘val 1’, 2 =&gt; ‘val 2’, 3 =&gt; ‘val 3’&#125;</span></span><br><span class="line"><span class="comment">// 把一个数组复制到set中</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">set</span> = new Set(typedArr2);</span><br><span class="line">console.log(<span class="keyword">set</span>); // Set &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// 把一个Set实例复制回数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [...set];</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS高程 </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> 第4版 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> Typed Arrays </tag>
            
            <tag> Map </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高程第4版24章翻译：网络请求和远程资源</title>
      <link href="/posts/2da22a8d.html"/>
      <url>/posts/2da22a8d.html</url>
      
        <content type="html"><![CDATA[<p>JS 红宝书英文第 4 版才刚看到 160 多页，由于最近工作有可能会用到有关 Web Sockets 相关的内容，先跳到后面学习下<code>网络请求</code>部分。</p><p>下述内容翻译自 Professional JavaScript for Web Developes,4th Edition（<a href="https://www.ituring.com.cn/book/2472" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 高级程序设计第四版</a>），871 页，Network Requests and Remote Resources（网络请求和远程资源）章节。前半部分内容借鉴了李松峰老师翻译的第三版 572 页 <code>Ajax 与 Comet</code> 章节。</p><a id="more"></a><h1 id="网络请求和远程资源"><a href="#网络请求和远程资源" class="headerlink" title="网络请求和远程资源"></a>网络请求和远程资源</h1><p>2005 年，Jesse James Garrett 发表了一篇在线文章，题为“Ajax: A new Approach to Web Applications”（ <a href="http://www.adaptivepath.com/ideas/essays/archives/000385.php" target="_blank" rel="external nofollow noopener noreferrer">http://www.adaptivepath.com/ideas/essays/archives/000385.php</a> ）。他在这篇文章里介绍了一种技术，用他的话说，就叫 Ajax，是对 Asynchronous JavaScript + XML 的简写。这一技术能够向服务器请求额外的数据而无须卸载页面，会带来更好的用户体验。Garrett 还解释了怎样使用这一技术改变自从 Web 诞生以来就一直沿用的“单击，等待”的交互模式。</p><p>Ajax 技术的核心是 XMLHttpRequest 对象（简称 XHR），这是由微软首先引入的一个特性，其他浏览器提供商后来都提供了相同的实现。在 XHR 出现之前，Ajax 式的通信必须借助一些 hack 手段来实现，大多数是使用隐藏的框架或内嵌框架。XHR 为向服务器发送请求和解析服务器响应提供了流畅的接口。能够以异步方式从服务器取得更多信息，意味着用户单击后，可以不必刷新页面也能取得新数据。也就是说，可以使用 XHR 对象取得新数据，然后再通过 DOM 将新数据插入到页面中。另外，虽然名字中包含 XML 的成分，但 Ajax 通信与数据格式无关；这种技术就是无须刷新页面即可从服务器取得数据，但不一定是 XML 数据。</p><p>实际上，Garrett 提到的这种技术已经存在很长时间了。在 Garrett 撰写那篇文章之前，人们通常将这种技术叫做远程脚本（remote cripting），而且早在 1998 年就有人采用不同的手段实现了这种浏览器与服务器的通信。再往前推，JavaScript 需要通过 Java applet 或 Flash 电影等中间层向服务器发送请求。而 XHR 则将浏览器原生的通信能力提供给了开发人员，简化了实现同样操作的任务。</p><p>XHR 对象的 API 被广泛认为使用过于复杂，但是新规范引入了 Fetch API，发展成为了 XHR 的现代化替代品。Fetch 支持 promises 和 service workers，使其成为了一个功能强大的 web 开发工具。</p><blockquote><p>注意：本章涵盖了 XMLHttpRequest 的全部内容，但总的来说，它是过时 JavaScript 规范的产物，应当只用于旧版浏览器。在开发时尽可能使用 fetch()。</p></blockquote><h2 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h2><p>IE5 是第一款引入 XHR 对象的浏览器。在 IE5 中，XHR 对象是通过 MSXML 库中的一个 ActiveX 对象实现的。因此，在 IE 中可能会遇到三种不同版本的 XHR 对象，即 MSXML2.XMLHttp、MSXML2.XMLHttp.3.0 和 MXSML2.XMLHttp.6.0。</p><p>所有现代浏览器都支持使用 XMLHttpRequest 构造函数创建的原生 XHR 对象，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><h3 id="XHR-的用法"><a href="#XHR-的用法" class="headerlink" title="XHR 的用法"></a>XHR 的用法</h3><p>在使用 XHR 对象时，要调用的第一个方法是 open()，它接受 3 个参数：要发送的请求的类型（”get”、”post”等）、请求的 URL 和表示是否异步发送请求的布尔值。下面就是调用这个方法的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.php'</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>这行代码会启动一个针对 example.php 的 GET 请求。有关这行代码，需要说明两点：一是 URL 相对于执行代码的当前页面（当然也可以使用绝对路径）；二是调用 open()方法并不会真正发送请求，而只是启动一个请求以备发送。</p><blockquote><p>注意：只能向同一个域中使用相同端口和协议的 URL 发送请求。如果 URL 与启动请求的页面有任何差别，都会引发安全错误。</p></blockquote><p>要发送特定的请求，必须像下面这样调用 send()方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.txt'</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这里的 send()方法接收一个参数，即要作为请求主体发送的数据。如果不需要通过请求主体发送数据，则必须传入 null，因为这个参数对有些浏览器来说是必需的。调用 send()之后，请求就会被分派到服务器。</p><p>由于这次请求是同步的，JavaScript 代码会等到服务器响应之后再继续执行。在收到响应后，响应的数据会自动填充 XHR 对象的属性，相关的属性简介如下。</p><ul><li>responseText：作为响应主体被返回的文本。</li><li>responseXML：如果响应的内容类型是”text/xml”或”application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档。</li><li>status：响应的 HTTP 状态。</li><li>statusText：HTTP 状态的说明。</li></ul><p>在接收到响应后，第一步是检查 status 属性，以确定响应已经成功返回。一般来说，可以将 HTTP 状态代码为 200 作为成功的标志。此时，responseText 属性的内容已经就绪，而且在内容类型正确的情况下，responseXML 也应该能够访问了。此外，状态代码为 304 表示请求的资源并没有被修改，可以直接使用浏览器中缓存的版本；当然，也意味着响应是有效的。为确保接收到适当的响应，应该像下面这样检查上述这两种状态代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.txt'</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">  alert(xhr.responseText);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据返回的状态代码，这个例子可能会显示由服务器返回的内容，也可能会显示一条错误消息。我们建议读者要通过检测 status 来决定下一步的操作，不要依赖 statusText，因为后者在跨浏览器使用时不太可靠。另外，无论内容类型是什么，响应主体的内容都会保存到 responseText 属性中；而对于非 XML 数据而言，responseXML 属性的值将为 null。</p><p>像前面这样发送同步请求当然没有问题，但多数情况下，我们还是要发送异步请求，才能让 JavaScript 继续执行而不必等待响应。此时，可以检测 XHR 对象的 readyState 属性，该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下。</p><ul><li>0：未初始化。尚未调用 open()方法。</li><li>1：启动。已经调用 open()方法，但尚未调用 send()方法。</li><li>2：发送。已经调用 send()方法，但尚未接收到响应。</li><li>3：接收。已经接收到部分响应数据。</li><li>4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。</li></ul><p>只要 readyState 属性的值由一个值变成另一个值，都会触发一次 readystatechange 事件。可以利用这个事件来检测每次状态变化后 readyState 的值。通常，我们只对 readyState 值为 4 的阶段感兴趣，因为这时所有数据都已经就绪。不过，必须在调用 open()之前指定 onreadystatechange 事件处理程序才能确保跨浏览器兼容性。下面来看一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.txt'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>以上代码利用 DOM 0 级方法为 XHR 对象添加了事件处理程序，原因是并非所有浏览器都支持 DOM 2 级方法。与其他事件处理程序不同，这里没有向 onreadystatechange 事件处理程序中传递 event 对象；必须通过 XHR 对象本身来确定下一步该怎么做。</p><blockquote><p>注意：这个例子在 onreadystatechange 事件处理程序中使用了 xhr 对象，没有使用 this 对象，原因是 onreadystatechange 事件处理程序的作用域问题。如果使用 this 对象，在有的浏览器中会导致函数执行失败，或者导致错误发生。因此，使用实际的 XHR 对象实例变量是较为可靠的一种方式。</p></blockquote><p>另外，在接收到响应之前还可以调用 abort()方法来取消异步请求，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.abort();</span><br></pre></td></tr></table></figure><p>调用这个方法后，XHR 对象会停止触发事件，而且也不再允许访问任何与响应有关的对象属性。在终止请求之后，还应该对 XHR 对象进行解引用操作。由于内存原因，不建议重用 XHR 对象。</p><h3 id="HTTP-头部信息"><a href="#HTTP-头部信息" class="headerlink" title="HTTP 头部信息"></a>HTTP 头部信息</h3><p>每个 HTTP 请求和响应都会带有相应的头部信息，其中有的对开发人员有用，有的也没有什么用。XHR 对象也提供了操作这两种头部（即请求头部和响应头部）信息的方法。</p><p>默认情况下，在发送 XHR 请求的同时，还会发送下列头部信息。</p><ul><li>Accept：浏览器能够处理的内容类型。</li><li>Accept-Charset：浏览器能够显示的字符集。</li><li>Accept-Encoding：浏览器能够处理的压缩编码。</li><li>Accept-Language：浏览器当前设置的语言。</li><li>Connection：浏览器与服务器之间连接的类型。</li><li>Cookie：当前页面设置的任何 Cookie。</li><li>Host：发出请求的页面所在的域 。</li><li>Referer：发出请求的页面的 URI。注意，HTTP 规范将这个头部字段拼写错了，而为保证与规范一致，也只能将错就错了。（这个英文单词的正确拼法应该是 referrer。）</li><li>User-Agent：浏览器的用户代理字符串。</li></ul><p>虽然不同浏览器实际发送的头部信息会有所不同，但以上列出的基本上是所有浏览器都会发送的。使用 setRequestHeader()方法可以设置自定义的请求头部信息。这个方法接受两个参数：头部字段的名称和头部字段的值。要成功发送请求头部信息，必须在调用 open()方法之后且调用 send()方法之前调用 setRequestHeader()，如下面的例子所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">'MyHeader'</span>, <span class="string">'MyValue'</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>服务器在接收到这种自定义的头部信息之后，可以执行相应的后续操作。我们建议读者使用自定义的头部字段名称，不要使用浏览器正常发送的字段名称，否则有可能会影响服务器的响应。有的浏览器允许开发人员重写默认的头部信息，但有的浏览器则不允许这样做。</p><p>调用 XHR 对象的 getResponseHeader()方法并传入头部字段名称，可以取得相应的响应头部信息。而调用 getAllResponseHeaders()方法则可以取得一个包含所有头部信息的长字符串。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myHeader = xhr.getResponseHeader(<span class="string">"MyHeader"</span>);</span><br><span class="line"><span class="keyword">let</span> allHeaders xhr.getAllResponseHeaders();</span><br></pre></td></tr></table></figure><p>在服务器端，也可以利用头部信息向浏览器发送额外的、结构化的数据。在没有自定义信息的情况下，getAllResponseHeaders()方法通常会返回如下所示的多行文本内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>: Sun, <span class="number">14</span> Nov <span class="number">2004</span> <span class="number">18</span>:<span class="number">04</span>:<span class="number">03</span> GMT</span><br><span class="line">Server: Apache/<span class="number">1.3</span><span class="number">.29</span> (Unix)</span><br><span class="line">Vary: Accept</span><br><span class="line">X-Powered-By: PHP/<span class="number">4.3</span><span class="number">.8</span></span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=iso<span class="number">-8859</span><span class="number">-1</span></span><br></pre></td></tr></table></figure><p>这种格式化的输出可以方便我们检查响应中所有头部字段的名称，而不必一个一个地检查某个字段是否存在。</p><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p>GET 是最常见的请求类型，最常用于向服务器查询某些信息。必要时，可以将查询字符串参数追加到 URL 的末尾，以便将信息发送给服务器。对 XHR 而言，位于传入 open()方法的 URL 末尾的查询字符串必须经过正确的编码才行。</p><p>使用 GET 请求经常会发生的一个错误，就是查询字符串的格式有问题。查询字符串中每个参数的名称和值都必须使用 encodeURIComponent()进行编码，然后才能放到 URL 的末尾；而且所有名-值对儿都必须由和号（&amp;）分隔，如下面的例子所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.php?name1=value1&amp;name2=value2'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>下面这个函数可以辅助向现有 URL 的末尾添加查询字符串参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addURLParam</span>(<span class="params">url, name, value</span>) </span>&#123;</span><br><span class="line">  url += url.indexOf(<span class="string">'?'</span>) == <span class="number">-1</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>;</span><br><span class="line">  url += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 addURLParam()函数接受三个参数：要添加参数的 URL、参数的名称和参数的值。这个函数首先检查 URL 是否包含问号（以确定是否已经有参数存在）。如果没有，就添加一个问号；否则，就添加一个和号。然后，将参数名称和值进行编码，再添加到 URL 的末尾。最后返回添加参数之后的 URL。</p><p>下面是使用这个函数来构建请求 URL 的示例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">'example.php'</span>;</span><br><span class="line"><span class="comment">//添加参数</span></span><br><span class="line">url = addURLParam(url, <span class="string">'name'</span>, <span class="string">'Nicholas'</span>);</span><br><span class="line">url = addURLParam(url, <span class="string">'book'</span>, <span class="string">'Professional JavaScript'</span>);</span><br><span class="line"><span class="comment">//初始化请求</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, url, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>在这里使用 addURLParam()函数可以确保查询字符串的格式良好，并可靠地用于 XHR 对象。</p><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><p>使用频率仅次于 GET 的是 POST 请求，通常用于向服务器发送应该被保存的数据。POST 请求应该把数据作为请求的主体提交，而 GET 请求传统上不是这样。POST 请求的主体可以包含非常多的数据，而且格式不限。在 open()方法第一个参数的位置传入”post”，就可以初始化一个 POST 请求，如下面的例子所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'example.php'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>发送 POST 请求的第二步就是向 send()方法中传入某些数据。由于 XHR 最初的设计主要是为了处理 XML，因此可以在此传入 XML DOM 文档，传入的文档经序列化之后将作为请求主体被提交到服务器。当然，也可以在此传入任何想发送到服务器的字符串。</p><p>默认情况下，服务器对 POST 请求和提交 Web 表单的请求并不会一视同仁。因此，服务器端必须有程序来读取发送过来的原始数据，并从中解析出有用的部分。不过，我们可以使用 XHR 来模仿表单提交：首先将 Content-Type 头部信息设置为 application/x-www-form-urlencoded，也就是表单提交时的内容类型，其次是以适当的格式创建一个字符串。第 14 章曾经讨论过，POST 数据的格式与查询字符串格式相同。如果需要将页面中表单的数据进行序列化，然后再通过 XHR 发送到服务器，那么就可以使用第 14 章介绍的 serialize()函数来创建这个字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.open(<span class="string">'post'</span>, <span class="string">'postexample.php'</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">  <span class="keyword">let</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'user-info'</span>);</span><br><span class="line">  xhr.send(serialize(form));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数可以将 ID 为”user-info”的表单中的数据序列化之后发送给服务器。而下面的示例 PHP 文件 postexample.php 就可以通过$_POST 取得提交的数据了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Type: text/plain"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">Name: <span class="subst">&#123;$_POST[‘user-name’]&#125;</span></span></span><br><span class="line"><span class="string">Email: <span class="subst">&#123;$_POST[‘user-email’]&#125;</span></span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果不设置 Content-Type 头部信息，那么发送给服务器的数据就不会出现在$_POST 超级全局变量中。这时候，要访问同样的数据，就必须借助$HTTP_RAW_POST_DATA。</p><blockquote><p>与 GET 请求相比，POST 请求消耗的资源会更多一些。从性能角度来看，以发送相同的数据计，GET 请求的速度最多可达到 POST 请求的两倍。</p></blockquote><h2 id="XMLHttpRequest-2-级"><a href="#XMLHttpRequest-2-级" class="headerlink" title="XMLHttpRequest 2 级"></a>XMLHttpRequest 2 级</h2><p>鉴于 XHR 已经得到广泛接受，成为了事实标准，W3C 也着手制定相应的标准以规范其行为。XMLHttpRequest 1 级只是把已有的 XHR 对象的实现细节描述了出来。而 XMLHttpRequest 2 级则进一步发展了 XHR。并非所有浏览器都完整地实现了 XMLHttpRequest 2 级规范，但所有浏览器都实现了它规定的部分内容。</p><h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><p>现代 Web 应用中频繁使用的一项功能就是表单数据的序列化，XMLHttpRequest 2 级为此定义了 FormData 类型。FormData 为序列化表单以及创建与表单格式相同的数据（用于通过 XHR 传输）提供了便利。下面的代码创建了一个 FormData 对象，并向其中添加了一些数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">data.append(<span class="string">'name'</span>, <span class="string">'Nicholas'</span>);</span><br></pre></td></tr></table></figure><p>这个 append()方法接收两个参数：键和值，分别对应表单字段的名字和字段中包含的值。可以像这样添加任意多个键值对。而通过向 FormData 构造函数中传入表单元素，也可以用表单元素的数据预先向其中填入键值对：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>创建了 FormData 的实例后，可以将它直接传给 XHR 的 send()方法，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'postexample.php'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'user-info'</span>);</span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));</span><br></pre></td></tr></table></figure><p>使用 FormData 的方便之处体现在不必明确地在 XHR 对象上设置请求头部。XHR 对象能够识别传入的数据类型是 FormData 的实例，并配置适当的头部信息。</p><h3 id="超时设定"><a href="#超时设定" class="headerlink" title="超时设定"></a>超时设定</h3><p>IE8 为 XHR 对象添加了一个 timeout 属性，表示请求在等待响应多少毫秒之后就终止。在给 timeout 设置一个数值后，如果在规定的时间内浏览器还没有接收到响应，那么就会触发 timeout 事件，进而会调用 ontimeout 事件处理程序。这项功能后来也被收入了 XMLHttpRequest 2 级规范中。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        alert(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="comment">//假设由ontimeout 事件处理程序处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'timeout.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.timeout = <span class="number">1000</span>; <span class="comment">//将超时设置为1 秒钟</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Request did not return in a second.'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这个例子示范了如何使用 timeout 属性。将这个属性设置为 1000 毫秒，意味着如果请求在 1 秒钟内还没有返回，就会自动终止。请求终止时，会调用 ontimeout 事件处理程序。但此时 readyState 可能已经改变为 4 了，这意味着会调用 onreadystatechange 事件处理程序。可是，如果在超时终止请求之后再访问 status 属性，就会导致错误。为避免浏览器报告错误，可以将检查 status 属性的语句封装在一个 try-catch 语句当中。</p><h3 id="overrideMimeType-方法"><a href="#overrideMimeType-方法" class="headerlink" title="overrideMimeType()方法"></a>overrideMimeType()方法</h3><p>Firefox 最早引入了 overrideMimeType()方法，用于重写 XHR 响应的 MIME 类型。这个方法后来也被纳入了 XMLHttpRequest 2 级规范。因为返回响应的 MIME 类型决定了 XHR 对象如何处理它，所以提供一种方法能够重写服务器返回的 MIME 类型是很有用的。</p><p>比如，服务器返回的 MIME 类型是 text/plain，但数据中实际包含的是 XML。根据 MIME 类型，即使数据是 XML，responseXML 属性中仍然是 null。通过调用 overrideMimeType()方法，可以保证把响应当作 XML 而非纯文本来处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'text.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.overrideMimeType(<span class="string">'text/xml'</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这个例子强迫 XHR 对象将响应当作 XML 而非纯文本来处理。调用 overrideMimeType()必须在 send()方法之前，才能保证重写响应的 MIME 类型。</p><h2 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h2><p>Progress Events 规范是 W3C 的一个工作草案，定义了与客户端服务器通信有关的事件。这些事件最早其实只针对 XHR 操作，但目前也被其他 API 借鉴。有以下 6 个进度事件。</p><ul><li>loadstart：在接收到响应数据的第一个字节时触发。</li><li>progress：在接收响应期间持续不断地触发。</li><li>error：在请求发生错误时触发。</li><li>abort：在因为调用 abort()方法而终止连接时触发。</li><li>load：在接收到完整的响应数据时触发。</li><li>loadend：在通信完成或者触发 error、abort 或 load 事件后触发。</li></ul><p>每个请求都从触发 loadstart 事件开始，接下来是一或多个 progress 事件，然后触发 error、 abort 或 load 事件中的一个，最后以触发 loadend 事件结束。</p><p>这些事件大都很直观，但其中两个事件有一些细节需要注意。</p><h3 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h3><p>Firefox 在实现 XHR 对象的某个版本时，曾致力于简化异步交互模型。最终，Firefox 实现中引入了 load 事件，用以替代 readystatechange 事件。响应接收完毕后将触发 load 事件，因此也就没有必要去检查 readyState 属性了。而 onload 事件处理程序会接收到一个 event 对象，其 target 属性就指向 XHR 对象实例，因而可以访问到 XHR 对象的所有方法和属性。然而，并非所有浏览器都为这个事件实现了适当的事件对象。结果，开发人员还是要像下面这样被迫使用 XHR 对象变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'altevents.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>只要浏览器接收到服务器的响应，不管其状态如何，都会触发 load 事件。而这意味着你必须要检查 status 属性，才能确定数据是否真的已经可用了。Firefox、Opera、Chrome 和 Safari 都支持 load 事件。</p><h3 id="progress-事件"><a href="#progress-事件" class="headerlink" title="progress 事件"></a>progress 事件</h3><p>Mozilla 对 XHR 的另一个革新是添加了 progress 事件，这个事件会在浏览器接收新数据期间周期性地触发。而 onprogress 事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但包含着三个额外的属性：lengthComputable、position 和 totalSize。其中，lengthComputable 是一个表示进度信息是否可用的布尔值，position 表示已经接收的字节数，totalSize 表示根据 Content-Length 响应头部确定的预期字节数。有了这些信息，我们就可以为用户创建一个进度指示器了。下面展示了为用户创建进度指示器的一个示例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = createXHR();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">    alert(xhr.responseText);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> divStatus = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span><br><span class="line">  <span class="keyword">if</span> (event.lengthComputable) &#123;</span><br><span class="line">    divStatus.innerHTML =</span><br><span class="line">      <span class="string">'Received '</span> + event.position + <span class="string">' of '</span> + event.totalSize + <span class="string">' bytes'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'altevents.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>为确保正常执行，必须在调用 open()方法之前添加 onprogress 事件处理程序。在前面的例子中，每次触发 progress 事件，都会以新的状态信息更新 HTML 元素的内容。如果响应头部中包含 Content-Length 字段，那么也可以利用此信息来计算从响应中已经接收到的数据的百分比。</p><h2 id="跨源资源共享"><a href="#跨源资源共享" class="headerlink" title="跨源资源共享"></a>跨源资源共享</h2><p>通过 XHR 实现 Ajax 通信的一个主要限制，来源于跨域安全策略。默认情况下，XHR 对象只能访问与包含它的页面位于同一个域中的资源。这种安全策略可以预防某些恶意行为。但是，实现合理的跨域请求对开发某些浏览器应用程序也是至关重要的。</p><p>CORS（Cross-Origin Resource Sharing，跨源资源共享）定义了在必须访问跨源资源时，浏览器与服务器应该如何沟通。CORS 背后的基本思想，就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p><p>比如一个简单的使用 GET 或 POST 发送的请求，它没有自定义的头部，而主体内容是 text/plain。在发送该请求时，需要给它附加一个额外的 Origin 头部，其中包含请求页面的源信息（协议、域名和端口），以便服务器根据这个头部信息来决定是否给予响应。下面是 Origin 头部的一个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Origin: http:&#x2F;&#x2F;www.nczonline.net</span><br></pre></td></tr></table></figure><p>如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源信息（如果是公共资源，可以回发”*“）。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;www.nczonline.net</span><br></pre></td></tr></table></figure><p>如果没有这个头部，或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器会处理请求。注意，请求和响应都不包含 cookie 信息。</p><p>现代浏览器都通过 XMLHttpRequest 对象实现了对 CORS 的原生支持。在尝试打开不同来源的资源时，无需额外编写代码就可以触发这个行为。要请求位于另一个域中的资源，使用标准的 XHR 对象并在 open()方法中传入绝对 URL 即可，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'Request was unsuccessful: '</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.somewhere-else.com/page/'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>通过跨域 XHR 对象可以访问 status 和 statusText 属性，而且还支持同步请求。跨域 XHR 对象也有一些限制，但为了安全这些限制是必需的。以下就是这些限制。</p><ul><li>不能使用 setRequestHeader()设置自定义头部。</li><li>不能发送和接收 cookie。</li><li>调用 getAllResponseHeaders()方法总会返回空字符串。</li></ul><p>由于无论同源请求还是跨源请求都使用相同的接口，因此对于本地资源，最好使用相对 URL，在访问远程资源时再使用绝对 URL。这样做能消除歧义，避免出现限制访问头部或本地 cookie 信息等问题。</p><h3 id="Preflighted-Reqeusts"><a href="#Preflighted-Reqeusts" class="headerlink" title="Preflighted Reqeusts"></a>Preflighted Reqeusts</h3><p>CORS 通过一种叫做 Preflighted Requests 的透明服务器验证机制支持开发人员使用自定义的头部、GET 或 POST 之外的方法，以及不同类型的主体内容。在使用下列高级选项来发送请求时，就会向服务器发送一个 Preflight 请求。这种请求使用 OPTIONS 方法，发送下列头部。</p><ul><li>Origin：与简单的请求相同。</li><li>Access-Control-Request-Method：请求自身使用的方法。</li><li>Access-Control-Request-Headers：（可选）自定义的头部信息，多个头部以逗号分隔。</li></ul><p>以下是一个带有自定义头部 NCZ 的使用 POST 方法发送的请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Origin: http:&#x2F;&#x2F;www.nczonline.net</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: NCZ</span><br></pre></td></tr></table></figure><p>发送这个请求后，服务器可以决定是否允许这种类型的请求。服务器通过在响应中发送如下头部与浏览器进行沟通。</p><ul><li>Access-Control-Allow-Origin：与简单的请求相同。</li><li>Access-Control-Allow-Methods：允许的方法，多个方法以逗号分隔。</li><li>Access-Control-Allow-Headers：允许的头部，多个头部以逗号分隔。</li><li>Access-Control-Max-Age：应该将这个 Preflight 请求缓存多长时间（以秒表示）。</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;www.nczonline.net</span><br><span class="line">Access-Control-Allow-Methods: POST, GET</span><br><span class="line">Access-Control-Allow-Headers: NCZ</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure><p>Preflight 请求结束后，结果将按照响应中指定的时间缓存起来。而为此付出的代价只是第一次发送这种请求时会多一次 HTTP 请求。</p><h3 id="带凭据的请求"><a href="#带凭据的请求" class="headerlink" title="带凭据的请求"></a>带凭据的请求</h3><p>默认情况下，跨源请求不提供凭据（cookie、HTTP 认证及客户端 SSL 证明等）。通过将 withCredentials 属性设置为 true，可以指定某个请求应该发送凭据。如果服务器接受带凭据的请求，会用下面的 HTTP 头部来响应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure><p>如果发送的是带凭据的请求，但服务器的响应中没有包含这个头部，那么浏览器就不会把响应交给 JavaScript（于是，responseText 中将是空字符串，status 的值为 0，而且会调用 onerror()事件处理程序）。另外，服务器还可以在 Preflight 响应中发送这个 HTTP 头部，表示允许源发送带凭据的请求。</p><h2 id="其他跨域技术"><a href="#其他跨域技术" class="headerlink" title="其他跨域技术"></a>其他跨域技术</h2><p>在 CORS 出现以前，要实现跨域 Ajax 通信颇费一些周折。开发人员想出了一些办法，利用 DOM 中能够执行跨域请求的功能，在不依赖 XHR 对象的情况下也能发送某种请求。虽然 CORS 技术已经无处不在，但开发人员自己发明的这些技术仍然被广泛使用，毕竟这样不需要修改服务器端代码。</p><h3 id="图像-Ping"><a href="#图像-Ping" class="headerlink" title="图像 Ping"></a>图像 Ping</h3><p>上述第一种跨域请求技术是使用<code>&lt;img&gt;</code>标签。我们知道，一个网页可以从任何网页中加载图像，不用担心跨域不跨域。这也是在线广告跟踪浏览量的主要方式。正如第 13 章讨论过的，也可以动态地创建图像，使用它们的 onload 和 onerror 事件处理程序来确定是否接收到了响应。</p><p>动态创建图像经常用于图像 Ping。图像 Ping 是与服务器进行简单、单向的跨域通信的一种方式。请求的数据是通过查询字符串形式发送的，而响应可以是任意内容，但通常是像素图或 204 响应。通过图像 Ping，浏览器得不到任何具体的数据，但通过侦听 load 和 error 事件，它能知道响应是什么时候接收到的。来看下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Done!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = <span class="string">'http://www.example.com/test?name=Nicholas'</span>;</span><br></pre></td></tr></table></figure><p>这里创建了一个 Image 的实例，然后将 onload 和 onerror 事件处理程序指定为同一个函数。这样无论是什么响应，只要请求完成，就能得到通知。请求从设置 src 属性那一刻开始，而这个例子在请求中发送了一个 name 参数。</p><p>图像 Ping 最常用于跟踪用户点击页面或动态广告曝光次数。图像 Ping 有两个主要的缺点，一是只能发送 GET 请求，二是无法访问服务器的响应文本。因此，图像 Ping 只能用于浏览器与服务器间的单向通信。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP 是 JSON with padding（填充式 JSON 或参数式 JSON）的简写，是应用 JSON 的一种特殊方法，在 Web 服务中非常流行。JSONP 看起来与 JSON 差不多，只不过是被包含在函数调用中的 JSON，就像下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(&#123; &quot;name&quot;: &quot;Nicholas&quot; &#125;);</span><br></pre></td></tr></table></figure><p>JSONP 由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的 JSON 数据。下面是一个典型的 JSONP 请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;freegeoip.net&#x2F;json&#x2F;?callback&#x3D;handleResponse</span><br></pre></td></tr></table></figure><p>这个 URL 是在请求一个 JSONP 地理定位服务。通过查询字符串来指定 JSONP 服务的回调参数是很常见的，就像上面的 URL 所示，这里指定的回调函数的名字叫 handleResponse()。</p><p>JSONP 是通过动态<code>&lt;script&gt;</code>元素来使用的，使用时可以为 src 属性指定一个跨域 URL。这里的<code>&lt;script&gt;</code>元素与<code>&lt;img&gt;</code>元素类似，都有能力不受限制地从其他域加载资源。因为 JSONP 是有效的 JavaScript 代码，所以在请求完成后，即在 JSONP 响应加载到页面中以后，就会立即执行。来看一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string">You're at IP address <span class="subst">$&#123;response.ip&#125;</span>, which is in</span></span><br><span class="line"><span class="string"><span class="subst">$&#123;response.city&#125;</span>, <span class="subst">$&#123;response.region_name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">'http://freegeoip.net/json/?callback=handleResponse'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</span><br></pre></td></tr></table></figure><p>这个例子通过查询地理定位服务来显示你的 IP 地址和位置信息。<br>JSONP 之所以在开发人员中极为流行，主要原因是它非常简单易用。与图像 Ping 相比，它的优点在于能够直接访问响应文本，支持在浏览器与服务器之间双向通信。不过，JSONP 也有两点不足。<br>首先，JSONP 是从其他域中加载代码执行。如果其他域不安全，很可能会在响应中夹带一些恶意代码，而此时除了完全放弃 JSONP 调用之外，没有办法追究。因此在使用不是你自己运维的 Web 服务时，一定得保证它安全可靠。</p><p>其次，要确定 JSONP 请求是否失败并不容易。虽然 HTML5 给<code>&lt;script&gt;</code>元素新增了一个 onerror 事件处理程序，但目前还没有得到任何浏览器支持。为此，开发人员不得不使用计时器检测指定时间内是否接收到了响应。但就算这样也不能尽如人意，毕竟不是每个用户上网的速度和带宽都一样。</p><h2 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h2><p>Fetch API 可以执行与 XMLHttpRequest 对象相同的所有任务，但是使用起来更简单，具有更现代化的接口，并且可以被现代 Web 工具（例如 Web Worker）使用。XMLHttpRequest 是否异步是可选的，但 Fetch API 的所有请求都是严格异步的。Fetch API 是 WHATWG 标准规范，可以在<a href="https://fetch.spec.whatwg.org/上找到。该规范有一段比较准确：“Fetch标准定义了请求，响应以及绑定它们的过程：fetching。”" target="_blank" rel="external nofollow noopener noreferrer">https://fetch.spec.whatwg.org/上找到。该规范有一段比较准确：“Fetch标准定义了请求，响应以及绑定它们的过程：fetching。”</a></p><p>Fetch API 本身是用于在 JavaScript 中请求资源的高级工具，但该 API 在 service workers 的领域中也很重要，因为它提供了一个接口，用于拦截，重定向和更改通过 fetch（）发出的请求。</p><h3 id="基础-API-使用范围"><a href="#基础-API-使用范围" class="headerlink" title="基础 API 使用范围"></a>基础 API 使用范围</h3><p>fetch()方法可在任何全局范围内使用，包括在主页面，模块和内部 workers。调用 fetch 将使浏览器向提供的 URL 发送请求。</p><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p>fetch()方法只有一个必需的输入参数，大多数情况下，该参数将是您希望获取的资源的 URL。该方法返回一个 promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = fetch(<span class="string">'/bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r); <span class="comment">// Promise &lt;pending&gt;</span></span><br></pre></td></tr></table></figure><p>对此 URL(相对路径、绝对路径)的解释方式与 XHR 请求的解释相同。</p><p>当请求完成并且资源可用时，promise 将解析为 Response 对象，该对象用作获取任何资源的 API 封装器。Response 对象提供了许多属性和方法来检查响应，并将 payload 转化为有效形式，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'bar.txt'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Response &#123; type: "basic", url: ... &#125;</span></span><br></pre></td></tr></table></figure><h4 id="读取响应"><a href="#读取响应" class="headerlink" title="读取响应"></a>读取响应</h4><p>读取响应内容的最简单方法是使用 text()方法访问原始文本格式。此方法返回一个 promise，用于解析用获取资源的完整内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'bar.txt'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.text().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Contents of bar.txt!</span></span><br></pre></td></tr></table></figure><p>这种 promise 的结构通常扁平化来使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'bar.txt'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.text().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Contents of bar.txt!</span></span><br></pre></td></tr></table></figure><h4 id="处理状态代码和请求失败"><a href="#处理状态代码和请求失败" class="headerlink" title="处理状态代码和请求失败"></a>处理状态代码和请求失败</h4><p>FetchAPI 允许您检查 Response 对象的状态代码和状态文本，分别可以通过 status 和 statusText 属性访问。成功获取资源通常会生成响应代码 200，如下例所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/bar'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status); <span class="comment">// 200</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.statusText); <span class="comment">// OK</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请求一个不存在的资源通常会产生一个响应代码 404:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/does-not-exist'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status); <span class="comment">// 404</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.statusText); <span class="comment">// Not Found</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请求引发服务器错误的 URL,通常会产生响应代码 500:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/throw-server-error'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status); <span class="comment">// 500</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.statusText); <span class="comment">// Internal Server Error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在重定向方面,Fetch()的行为可以显式设置（详见本章后面部分），但是默认行为是跟随重定向并返回一个响应，该响应并不是响应代码 300-399 之间。当 fetch 跟随重定向时，响应对象上的 redirected 属性设置为 true，但仍然会显示响应代码为 200:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/permanent-redirect'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 默认行为是跟随重定向，直到到达终端URL。</span></span><br><span class="line">  <span class="comment">// 这个例子至少会引发两个往返的网络请求:</span></span><br><span class="line">  <span class="comment">// &lt;原始url&gt;/永久重定向- &gt; &lt;重定向url&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.status); <span class="comment">// 200</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.statusText); <span class="comment">// OK</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.redirected); <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在所有这些示例中，注意正在执行 fetch promise 的 resolved 回调函数——即使请求可能被视为失败，比如 500 状态。即使服务器发送任何类型的响应，fetch() promise 都解析为 resolve。这种表现是没错的:系统级网络协议已经完成了一次成功的往返消息传输。具体什么是”成功的”请求，应该根据响应的处理方式来定义。</p><p>通常情况下，响应代码 200 系列认为是成功的，其他任何响应代码都认为是失败。为了区分这两者，当响应代码位于 200-299 之间时，Response 对象会标识 ok 属性为 true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/bar'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status); <span class="comment">// 200</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.ok); <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line">fetch(<span class="string">'/does-not-exist'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status); <span class="comment">// 404</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.ok); <span class="comment">// false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>真正的 fetch()失败（例如没有服务器响应的浏览器超时）将解析为 reject:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/hangs-forever'</span>).then(</span><br><span class="line">  (response) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// (浏览器超时后)</span></span><br><span class="line"><span class="comment">// TypeError: "NetworkError when attempting to fetch resource."</span></span><br></pre></td></tr></table></figure><p>由于诸如 违反 CORS、网络不稳定、违反 HTTPS 协议以及其他的违反浏览器/网络策略等原因，请求的 promise 会解析为 reject。</p><p>当使用 URL 属性发送请求时，你可以检查 fetch()使用的完整 URL:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求发起自 foo.com/bar/baz</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location.href); <span class="comment">// https://foo.com/bar/baz</span></span><br><span class="line">fetch(<span class="string">'qux'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url));</span><br><span class="line"><span class="comment">// https://foo.com/bar/qux</span></span><br><span class="line">fetch(<span class="string">'/qux'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url));</span><br><span class="line"><span class="comment">// https://foo.com/qux</span></span><br><span class="line">fetch(<span class="string">'//qux.com'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url));</span><br><span class="line"><span class="comment">// https://qux.com</span></span><br><span class="line">fetch(<span class="string">'https://qux.com'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="built_in">console</span>.log(response.url));</span><br><span class="line"><span class="comment">// https://qux.com</span></span><br></pre></td></tr></table></figure><h4 id="自定义-Fetch-选项"><a href="#自定义-Fetch-选项" class="headerlink" title="自定义 Fetch 选项"></a>自定义 Fetch 选项</h4><p>当只与 URL 一起使用时，fetch()将使用最小的请求头发送一个 GET 请求。要配置请求的发送方式，可以将 init 对象作为 fetch()的可选第二个参数传递。init 对象可选的键和对应的值如下表所示：</p><table><thead><tr><th>键名</th><th>键值</th></tr></thead><tbody><tr><td>body</td><td>为使用 body 的请求指定 body 字段。<br>必须是 Blob、BufferSource、FormData、URLSearchParams、ReadableStream 或 string 之一的实例。</td></tr><tr><td>cache</td><td>用于控制执行 fetch 时浏览器与 HTTP 缓存的交互方式。对于要跟随的缓存重定向，请求必须跟随重定向值，并且必须遵守同源限制。键值必须是下面的 string 值:<br>default<br>- 从 fetch ()返回一个新的缓存命中。不发送请求。<br>- 过期的缓存命中将发送带条件的请求。如果响应发生更改，缓存值就被更新，然后从 fetch ()返回缓存的值。<br>- 缓存缺失将发送请求并缓存响应。响应从 fetch ()返回。<br>no-store<br>- 浏览器在不检查缓存的情况下发送请求。<br>- 响应不会被缓存，而是从 fetch ()返回。<br>reload<br>- 浏览器在不检查缓存的情况下发送请求。<br>- 响应被缓存，并从 fetch ()返回。<br>no-cache<br>- 新的缓存命中或过期的缓存命中都会发送一个条件请求。如果响应已更改，缓存的值将被更新，然后从 fetch ()返回更新后的缓存值。<br>- 缓存缺失将发送请求并缓存响应。响应从 fetch ()返回。<br>force-cache<br>- 从 fetch ()返回新的或过期的缓存命中。不发送请求。<br>- 缓存缺失将发送请求并缓存响应。响应从 fetch ()返回。<br>only-if-cached<br>- 只能在请求模式为 same-origin 的情况下使用。<br>- 从 fetch ()返回新的或过时的缓存命中。不发送请求。<br>- 缓存缺失将返回状态代码 504 的响应（网关超时）。<br>默认值为 default</td></tr><tr><td>credentials</td><td>用于指定是否以及如何将 cookie 包含在发出的请求中。类似于 XMLHttpRequest 的 withCredentials 标志。<br>必须是下列字符串值之一:<br>- omit: 不发送 cookies.<br>- same-origin: 只有在请求的 URL 与执行 fetch 的脚本为同一个源时发送 cookies<br>- include: Cookies 同时包含在 same-origin 和 cross-origin 的请求中<br>在支持凭证管理 API 的浏览器中，也可以是 FederatedCredential 实例或 PasswordCredential 实例<br>默认为 same-origin。</td></tr><tr><td>headers</td><td>用于为指定请求头。<br>必须是 Headers 对象实例或包含请求头键值对的普通对象实例。<br>默认为没有键值对的 Headers 对象。这并不意味着请求没有头部; 当请求被正式发送，浏览器仍然可以添加头部。这个差异对 JavaScript 来说是隐藏的，但是可以仍然可以在浏览器控制台的 network inspector 中观察到。</td></tr><tr><td>integrity</td><td>用于强制子资源完整性。<br>必须是包含子资源完整性标识符的字符串。<br>默认为空字符串。</td></tr><tr><td>keepalive</td><td>用于指示浏览器允许请求在页面生存周期之后继续存在。这对于在 fetch 请求后页面关闭时向服务器报告事件或分析指标非常有用<br>带有 keepalive 标志的 fetch 请求可以替代 Navigator.sendBeacon ()。<br>必须是布尔值。<br>默认为 false。</td></tr><tr><td>method</td><td>用于指定请求的 HTTP 方法。<br>值以下字符串值之一:<br>GET<br>POST<br>PUT<br>PATCH<br>DELETE<br>HEAD<br>OPTIONS<br>CONNECT<br>TRACE<br>默认是 GET.</td></tr><tr><td>mode</td><td>用于指定请求的模式。该模式确定来自跨源请求是否有效，客户端可读取的响应量是多少。违反指定模式的请求将抛出一个 error。<br>必须是下列字符串值之一:<br>- cors: 允许符合 CORS 协议的跨源请求。响应将是一个“ 经过 CORS 过滤的响应” ，即响应中可获得的 headers 经过了浏览器强制的白名单过滤。<br>- no-cors: 跨域请求时不需要预请求（只含有 CORS 安全名单请求头的 HEAD，GET 和 POST）。响应类型将是不透明的，意味着响应的内容不可读。<br>- same-origin: 不允许任何种类的跨源请求。<br>- navigate: 用于支持 HTML 导航，仅在 documents 中导航时创建。你可能永远都不需要使用这种模式。<br>当通过构造函数手动创建请求实例时，默认值为 cors。否则，默认为 no-cors。</td></tr><tr><td>redirect</td><td>用于指定重定向响应（定义为响应状态代码 301,302、303、307 或 308）应如何处理。<br>必须是下列 string 值之一:<br>follow:将跟随请求重定向，并且将非重定向响应的最终 URL 将作为最终响应返回。<br>error: 请求重定向将抛出错误。<br>manual: 请求重定向时不会跟随，而且当暴露预期的重定向时返回 opaqueredirect 类型的响应。这允许手动跟踪重定向。<br>默认值是 follow。</td></tr><tr><td>referrer</td><td>用于指定 HTTP Referer 请求头。<br>必须是下列字符串值之一:<br>- no-referrer: 将 no-referrer 作为 HTTP referrer 值发送。<br>- client/about: client: 发送当前 URL 或 no-referer (取决于 Referrer 策略)作为实际的 HTTP referrer 值。<br>- URL: 把欺骗的 URL 作为 HTTP Referer 值。欺骗的 Url 源 必须与执行脚本的源相匹配。<br>默认值是 client/about:client。</td></tr><tr><td>referrer-Policy</td><td>用于指定 HTTP Referer 请求头<br>必须是下列 string 值之一:<br>no-referrer<br>- 在请求中完全忽略了 Referer 请求头。<br>no-referrer-when-downgrade<br>- 对于从安全的 HTTPS 环境发送到 HTTP URL 的请求，省略 Referer 请求头。<br>- 对于所有其他请求，Referer 请求头被设置为完整的 URL。<br>origin<br>- 对于所有请求，Referer 请求头设置为源 URL。<br>same-origin<br>- 对于跨源请求，省略 Referer 请求头。<br>- 对于同源请求，Referer 请求头被设置为完整的 URL。<br>strict-origin<br>- 对于从安全的 HTTPS 环境发送到 HTTP URL 的请求，省略 Referer 请求头。<br>- 对于所有其他请求，Referer 请求头设置为源 URL。<br>origin-when-cross-origin<br>- 对于跨源请求，Referer 请求头设置为源 URL。<br>- 对于同源请求，Referer 请求头被设置为完整的 URL。<br>strict-origin-when-cross-origin<br>- 对于从安全的 HTTPS 环境发送到 HTTP URL 的请求，省略 Referer 请求头。<br>- 对于所有其他跨源请求，Referer 请求头被设置为源 URL。<br>- 对于同源请求，Referer 请求头被设置为完整的 URL。<br>unsafe-url<br>- 对于所有请求，Referer 请求头被设置为完整的 URL。<br>默认为“no-referrer-when-downgrade”。<br></td></tr><tr><td>signal</td><td>是否能通过关联的 Abortcontroller 来打断正在进行的 fetch.<br>必须是 AbortSignal 的实例。<br>默认为非关联的 Abotsignal 实例。</td></tr></tbody></table><h3 id="常见的-Fetch-模式"><a href="#常见的-Fetch-模式" class="headerlink" title="常见的 Fetch 模式"></a>常见的 Fetch 模式</h3><p>与 XMLHttpRequest 一样，fetch()既用于检索数据，也用于发送数据。使用 init 对象，fetch()可以配置为在请求主体中发送各种可序列化的数据类型。</p><h4 id="发送-JSON-数据"><a href="#发送-JSON-数据" class="headerlink" title="发送 JSON 数据"></a>发送 JSON 数据</h4><p>一个简单的 JSON 字符串可以发送到服务器，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> payload = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  foo: <span class="string">'bar'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> jsonHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">fetch(<span class="string">'/send-me-json'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>, <span class="comment">// 必须使用一个能发送请求体的HTTP方法</span></span><br><span class="line">  body: payload,</span><br><span class="line">  headers: jsonHeaders,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="在请求体中发送参数"><a href="#在请求体中发送参数" class="headerlink" title="在请求体中发送参数"></a>在请求体中发送参数</h4><p>因为请求体支持任何字符串值，所以也很容易将参数作为序列化的请求体字符串发送:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> payload = <span class="string">'foo=bar&amp;baz=qux'</span>;</span><br><span class="line"><span class="keyword">let</span> paramHeaders = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">fetch(<span class="string">'/send-me-params'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>, <span class="comment">// 必须使用一个能发送请求体的HTTP方法</span></span><br><span class="line">  body: payload,</span><br><span class="line">  headers: paramHeaders,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="发送文件"><a href="#发送文件" class="headerlink" title="发送文件"></a>发送文件</h4><p>因为请求体支持 FormData 实例，fetch()将很容易地序列化并发送从文件选取器表单输入中选取的文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imageFormData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">let</span> imageInput = <span class="built_in">document</span>.querySelector(<span class="string">"input[type='file']"</span>);</span><br><span class="line">imageFormData.append(<span class="string">'image'</span>, imageInput.files[<span class="number">0</span>]);</span><br><span class="line">fetch(<span class="string">'/img-upload'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: imageFormData,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下述的 fetch()实现也可以支持多个文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imageFormData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">let</span> imageInput = <span class="built_in">document</span>.querySelector(<span class="string">"input[type='file'][multiple]"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imageInput.files.length; ++i) &#123;</span><br><span class="line">  imageFormData.append(<span class="string">'image'</span>, imageInput.files[i]);</span><br><span class="line">&#125;</span><br><span class="line">fetch(<span class="string">'/img-upload'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: imageFormData,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Loading-Files-as-Blobs-894-以-Blobs-形式加载文件"><a href="#Loading-Files-as-Blobs-894-以-Blobs-形式加载文件" class="headerlink" title="Loading Files as Blobs 894 以 Blobs 形式加载文件"></a>Loading Files as Blobs 894 以 Blobs 形式加载文件</h4><p>Fetch API 能够以 Blob 的形式提供响应，而 Blob 又与多个浏览器 API 兼容。一个常用的方式是显式地将图像文件加载到内存中并将其附加到 HTML 的 image 元素。为此，response 对象有一个 Blob()方法，该方法返回一个解析为 Blob 实例的 promise。然后可以传递给 URL.createObjectUrl()，为 image 元素的 src 属性提供一个有效值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imageElement = <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>);</span><br><span class="line">fetch(<span class="string">'my-image.png'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.blob())</span><br><span class="line">  .then(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    imageElement.src = URL.createObjectURL(blob);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="发送跨源请求"><a href="#发送跨源请求" class="headerlink" title="发送跨源请求"></a>发送跨源请求</h4><p>请求来自不同源的资源需要具有 CORS 请求头，以便浏览器解析它。如果没有请求，跨源请求将失败并抛出 error。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'//cross-origin.com'</span>);</span><br><span class="line"><span class="comment">// TypeError: Failed to fetch</span></span><br><span class="line"><span class="comment">// 被请求的资源不存在'Access-Control-Allow-Origin'请求头</span></span><br></pre></td></tr></table></figure><p>如果代码不需要获得响应，则可以发送带 no-cors 的 fetch。在这种情况下，响应 type 属性将是 opaque,，因此无法检查它。这种策略对于发送 ping 或者仅仅缓存响应供以后使用的情况非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'//cross-origin.com'</span>, &#123; <span class="attr">method</span>: <span class="string">'no-cors'</span> &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(response.type)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// opaque</span></span><br></pre></td></tr></table></figure><h4 id="终止请求"><a href="#终止请求" class="headerlink" title="终止请求"></a>终止请求</h4><p>Fetch API 支持通过 abortcontroller/abortsignal 来中止请求。调用 Abortcontroller.Abort()将终止所有网络传输，因此当希望停止传输大量 payload 时非常有用。中止正在进行的 fetch()将产生一个带着 error 的 reject。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> abortController = <span class="keyword">new</span> AbortController();</span><br><span class="line">fetch(<span class="string">'wikipedia.zip'</span>, &#123; <span class="attr">signal</span>: abortController.signal &#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'aborted!'</span>);</span><br><span class="line"><span class="comment">// 10ms后中止fetch</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> abortController.abort(), <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 中止!</span></span><br></pre></td></tr></table></figure><h3 id="Headers-对象"><a href="#Headers-对象" class="headerlink" title="Headers 对象"></a>Headers 对象</h3><p>Headers 对象用作所有传出请求头和传入响应头的容器。每个传出的 Request 实例都包含一个可通过 Request.<br>prototype.headers 访问的空 Headers 实例。每个传入的 Response 实例都包含一个可通过 Response.prototype.Headers 访问的 Headers 实例，这两个实例都是可变属性。您还可以通过 new Headers()构造函数创建一个新的实例。</p><h4 id="Headers-和-Map-的相似性"><a href="#Headers-和-Map-的相似性" class="headerlink" title="Headers 和 Map 的相似性"></a>Headers 和 Map 的相似性</h4><p>Headers 对象与 Map 对象有很高程度的重叠。这是非常有意义的，因为 HTTP 请求头基本上是序列化的键值对，它们的 JavaScript 表示是中间接口。Header 和 Map 类型共享许多实例方法:get()、set()、has()和 delete()，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Headers();</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">// 设置 key</span></span><br><span class="line">h.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line">m.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">// 检查 key</span></span><br><span class="line"><span class="built_in">console</span>.log(h.has(<span class="string">'foo'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(m.has(<span class="string">'foo'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(h.has(<span class="string">'qux'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(m.has(<span class="string">'qux'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">'foo'</span>)); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">'foo'</span>)); <span class="comment">// bar</span></span><br><span class="line"><span class="comment">// 替换值</span></span><br><span class="line">h.set(<span class="string">'foo'</span>, <span class="string">'baz'</span>);</span><br><span class="line">m.set(<span class="string">'foo'</span>, <span class="string">'baz'</span>);</span><br><span class="line"><span class="comment">// 获取替换后的值</span></span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">'foo'</span>)); <span class="comment">// baz</span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">'foo'</span>)); <span class="comment">// baz</span></span><br><span class="line"><span class="comment">// 删除值</span></span><br><span class="line">h.delete(<span class="string">'foo'</span>);</span><br><span class="line">m.delete(<span class="string">'foo'</span>);</span><br><span class="line"><span class="comment">// 检查值是否被删除</span></span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">'foo'</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">'foo'</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这两种类型都可以通过迭代来初始化，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> seed = [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]];</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Headers(seed);</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(seed);</span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">'foo'</span>)); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="string">'foo'</span>)); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>他们还具有相同的 keys(),、values()和 entries() 迭代器接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> seed = [</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  [<span class="string">'baz'</span>, <span class="string">'qux'</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Headers(seed);</span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(seed);</span><br><span class="line"><span class="built_in">console</span>.log(...h.keys()); <span class="comment">// foo, baz</span></span><br><span class="line"><span class="built_in">console</span>.log(...m.keys()); <span class="comment">// foo, baz</span></span><br><span class="line"><span class="built_in">console</span>.log(...h.values()); <span class="comment">// bar, qux</span></span><br><span class="line"><span class="built_in">console</span>.log(...m.values()); <span class="comment">// bar, qux</span></span><br><span class="line"><span class="built_in">console</span>.log(...h.entries()); <span class="comment">// ['foo', 'bar'], ['baz', 'qux']</span></span><br><span class="line"><span class="built_in">console</span>.log(...m.entries()); <span class="comment">// ['foo', 'bar'], ['baz', 'qux']</span></span><br></pre></td></tr></table></figure><h4 id="Headers-对象的独特点"><a href="#Headers-对象的独特点" class="headerlink" title="Headers 对象的独特点"></a>Headers 对象的独特点</h4><p>Headers 对象不是 Map 的完整复制。Headers 对象可以使用键值对的对象进行初始化，而 Map 不能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> seed = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Headers(seed);</span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">'foo'</span>)); <span class="comment">// bar</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(seed);</span><br><span class="line"><span class="comment">// TypeError: object is not iterable</span></span><br></pre></td></tr></table></figure><p>一个 HTTP 请求头可以分配多个值，Headers 对象通过 append()方法支持这一点。当与 Header 实例中尚不存在的值一起使用时，append()的行为与 set()完全相同。后面的用法将连接以逗号分隔的 header 值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Headers();</span><br><span class="line">h.append(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">'foo'</span>)); <span class="comment">// "bar"</span></span><br><span class="line">h.append(<span class="string">'foo'</span>, <span class="string">'baz'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(h.get(<span class="string">'foo'</span>)); <span class="comment">// "bar, baz"</span></span><br></pre></td></tr></table></figure><h4 id="Headers-安全"><a href="#Headers-安全" class="headerlink" title="Headers 安全"></a>Headers 安全</h4><p>在某些情况下，并不是所有的 HTTP 请求头都可以被客户端改变，而 Headers 对象会使用保护措施来强制执行这一点。不同的保护措施设置将改变 set()、append()和 delete()的行为方式。违反保护限制将抛出一个 TypeError。</p><p>受保护措施限制，Headers 实例将根据其出处有不同的行为。在 JavaScript 中不能确定 Headers 实例的保护措施设置。下面的表格描述了各种可能的保护措施设置以及每种设置的行为含义。</p><table><thead><tr><th>保护措施</th><th>应用场景</th><th>限制</th></tr></thead><tbody><tr><td>none</td><td>当通过构造函数 Headers 创建实例后开启</td><td>无</td></tr><tr><td>request</td><td>当通过构造函数实例化一个 Request 对象，并且 mode 不为 no-cors 时开启</td><td>部分受限制的请求头字段不允许修改(<a href="https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name</a>)</td></tr><tr><td>request-no-cors</td><td>当通过构造函数实例化一个 Request 对象，并且 mode 为 no-cors 时开启</td><td>不是简单请求头时不允许修改(<a href="https://developer.mozilla.org/en-US/docs/Glossary/simple_header" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/simple_header</a>)</td></tr><tr><td>response</td><td>当通过构造函数实例化一个 Response 对象时开启</td><td>部分受限制的响应头字段不允许修改(<a href="https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_response_header_name" target="_blank" rel="external nofollow noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_response_header_name</a>)</td></tr><tr><td>immutable</td><td>当通过 error()或 redirect()静态方法实例化一个 Response 对象时开启</td><td>不允许任何响应头修改</td></tr></tbody></table><h3 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h3><p>如其名称所示，Request 对象是对所 fetch 资源的请求的接口。此接口含有请求的性质以及使用请求体的不同方式的信息。</p><blockquote><p>注意：本章的“Requests, Responses 和 Body 混入”部分介绍了涉及请求体的属性和方法。</p></blockquote><h4 id="创建-Request-对象"><a href="#创建-Request-对象" class="headerlink" title="创建 Request 对象"></a>创建 Request 对象</h4><p>Request 对象可以通过构造函数实例化。它需要一个输入参数，通常是一个 URL:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br><span class="line"><span class="comment">// Request &#123;...&#125;</span></span><br></pre></td></tr></table></figure><p>Request 构造函数还接受第二个可选参数—一个 init 对象，这个 init 对象与 Fetch()完全相同。正如前面在“自定义 Fetch 选项”一节中所描述的那样，在 init 中未指定的值将在 Request 实例中被分配默认值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个全默认值的Request对象:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Request(<span class="string">''</span>));</span><br><span class="line"><span class="comment">// Request &#123;</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// cache: "default"</span></span><br><span class="line"><span class="comment">// credentials: "same-origin"</span></span><br><span class="line"><span class="comment">// destination: ""</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// integrity: ""</span></span><br><span class="line"><span class="comment">// keepalive: false</span></span><br><span class="line"><span class="comment">// method: "GET"</span></span><br><span class="line"><span class="comment">// mode: "cors"</span></span><br><span class="line"><span class="comment">// redirect: "follow"</span></span><br><span class="line"><span class="comment">// referrer: "about:client"</span></span><br><span class="line"><span class="comment">// referrerPolicy: ""</span></span><br><span class="line"><span class="comment">// signal: AbortSignal &#123;aborted: false, onabort: null&#125;</span></span><br><span class="line"><span class="comment">// url: "&lt;current URL&gt;"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 创建一个使用init对象指定值的Request对象:</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span> &#125;));</span><br><span class="line"><span class="comment">// Request &#123;</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// cache: "default"</span></span><br><span class="line"><span class="comment">// credentials: "same-origin"</span></span><br><span class="line"><span class="comment">// destination: ""</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// integrity: ""</span></span><br><span class="line"><span class="comment">// keepalive: false</span></span><br><span class="line"><span class="comment">// method: "POST"</span></span><br><span class="line"><span class="comment">// mode: "cors"</span></span><br><span class="line"><span class="comment">// redirect: "follow"</span></span><br><span class="line"><span class="comment">// referrer: "about:client"</span></span><br><span class="line"><span class="comment">// referrerPolicy: ""</span></span><br><span class="line"><span class="comment">// signal: AbortSignal &#123;aborted: false, onabort: null&#125;</span></span><br><span class="line"><span class="comment">// url: "https://foo.com/"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="复制-Request-对象"><a href="#复制-Request-对象" class="headerlink" title="复制 Request 对象"></a>复制 Request 对象</h4><p>FetchAPI 提供了两种略有不同的制作 Request 对象副本的方法：使用 Request 构造函数和使用 clone()方法。</p><p>将一个 Request 实例作为输入参数传递给 Request 构造函数会生成该 request 的一个副本:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>);</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Request(r1);</span><br><span class="line"><span class="built_in">console</span>.log(r2.url); <span class="comment">// https://foo.com/</span></span><br></pre></td></tr></table></figure><p>init 对象内的值将覆盖源对象的值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>);</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Request(r1, &#123; <span class="attr">method</span>: <span class="string">'POST'</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(r1.method); <span class="comment">// GET</span></span><br><span class="line"><span class="built_in">console</span>.log(r2.method); <span class="comment">// POST</span></span><br></pre></td></tr></table></figure><p>这种策略并不总是能得到准确的复制。最值得注意的是，它将第一个请求体标记为已使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: <span class="string">'foobar'</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Request(r1);</span><br><span class="line"><span class="built_in">console</span>.log(r1.bodyUsed); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(r2.bodyUsed); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果源对象的 origin 与创建新对象的 origin 不同，就会清除 referrer 属性。此外，如果源对象的 mode 是 navigate，则将其转换为 same-origin。</p><p>克隆 Request 对象的第二种方法是使用 clone()方法，该方法创建一个精确的副本，没有机会重写任何值。与第一种方法不同，它不会将请求体标记为使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: <span class="string">'foobar'</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> r2 = r1.clone();</span><br><span class="line"><span class="built_in">console</span>.log(r1.url); <span class="comment">// https://foo.com/</span></span><br><span class="line"><span class="built_in">console</span>.log(r2.url); <span class="comment">// https://foo.com/</span></span><br><span class="line"><span class="built_in">console</span>.log(r1.bodyUsed); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(r2.bodyUsed); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果 bodyUsed 请求属性为 false，因为尚未读取请求体，两种方法都不允许克隆 Request。一旦请求体被读取，尝试克隆将抛出一个 TypeError。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>);</span><br><span class="line">r.clone();</span><br><span class="line"><span class="keyword">new</span> Request(r);</span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line">r.text(); <span class="comment">// 把bodyUsed字段设为false</span></span><br><span class="line">r.clone();</span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'clone' on 'Request': Request body is already used</span></span><br><span class="line"><span class="keyword">new</span> Request(r);</span><br><span class="line"><span class="comment">// TypeError: Failed to construct 'Request': Cannot construct a Request with a Request object that has already been used.</span></span><br></pre></td></tr></table></figure><h4 id="fetch-使用-Request-对象"><a href="#fetch-使用-Request-对象" class="headerlink" title="fetch()使用 Request 对象"></a>fetch()使用 Request 对象</h4><p>事实上，Fetch()和 Request 构造函数具有相同的函数签名，这并非偶然。在调用 fetch()时，传参可以不传一个 url，而是传一个已经创建的 Request 实例。与 Request 构造函数一样，fetch()的 init 对象中值将覆盖 Request 实例提供的同名值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>);</span><br><span class="line"><span class="comment">// 向foo.com发送一个GET请求</span></span><br><span class="line">fetch(r);</span><br><span class="line"><span class="comment">// 向foo.com发送一个POST请求</span></span><br><span class="line">fetch(r, &#123; <span class="attr">method</span>: <span class="string">'POST'</span> &#125;);</span><br></pre></td></tr></table></figure><p>在内部，fetch 复制了所提供的 Request 对象。同复制一个 Request 相同，调用 fetch 时不能复制一个带有已使用请求体的 Request 对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: <span class="string">'foobar'</span> &#125;);</span><br><span class="line">r.text();</span><br><span class="line">fetch(r);</span><br><span class="line"><span class="comment">// TypeError: Cannot construct a Request with a Request object that has already been used.</span></span><br></pre></td></tr></table></figure><p>重要的是，在 fetch 过程中使用 Request 也可以标记请求体已使用。因此，对于带有请求体的 Request，fetch 只能执行一次。(不包含请求体的 Request 不受此限制)。这一点在这里得到了证明:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: <span class="string">'foobar'</span> &#125;);</span><br><span class="line">fetch(r);</span><br><span class="line">fetch(r);</span><br><span class="line"><span class="comment">// TypeError: Cannot construct a Request with a Request object that has already been used.</span></span><br></pre></td></tr></table></figure><p>为了使包含请求体的同一个 Request 对象能在多次 fetch 中被调用，在调用第一次 fetch()之前必须先 clone():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">body</span>: <span class="string">'foobar'</span> &#125;);</span><br><span class="line"><span class="comment">// 3次都是成功的</span></span><br><span class="line">fetch(r.clone());</span><br><span class="line">fetch(r.clone());</span><br><span class="line">fetch(r);</span><br></pre></td></tr></table></figure><h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><p>正如其名称所示，Response 对象是所 fetch 的资源返回响应的接口。此接口含有关于响应的性质以及使用响应体的不同方式的信息。</p><blockquote><p>注意：本章的“Requests, Responses 和 Body 混入”部分介绍了涉及响应体的属性和方法。</p></blockquote><h4 id="创建-Response-对象"><a href="#创建-Response-对象" class="headerlink" title="创建 Response 对象"></a>创建 Response 对象</h4><p>无需争论，Response 对象可以通过构造函数来实例化。因为下述例子并不代表实际的 HTTP 响应，所以属性将用默认值填充：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response();</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: true</span></span><br><span class="line"><span class="comment">// redirected: false</span></span><br><span class="line"><span class="comment">// status: 200</span></span><br><span class="line"><span class="comment">// statusText: "OK"</span></span><br><span class="line"><span class="comment">// type: "default"</span></span><br><span class="line"><span class="comment">// url: ""</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>Response 构造函数接收的第一个可选参数是响应体。这个响应体（可以为 null）与 init 对象相同，如前面“自定义 Fetch 选项”一节中所述，第二个可选参数 init 对象应该填充下表中的任意键值对。</p><table><thead><tr><th>键名</th><th>键值</th></tr></thead><tbody><tr><td>headers</td><td>必须是 Headers 对象实例或包含 Headers 键值对的普通对象实例。<br>默认为没有键值对的 Headers 对象。</td></tr><tr><td>status</td><td>指示 HTTP 响应状态代码的整数。默认值为 200。</td></tr><tr><td>statusText</td><td>描述 HTTP 响应状态的字符串。默认为空字符串</td></tr></tbody></table><p>响应体和 init 可用于构建 Response，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">'foobar'</span>, &#123;</span><br><span class="line">  status: <span class="number">418</span>,</span><br><span class="line">  statusText: <span class="string">"I'm a teapot"</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: false</span></span><br><span class="line"><span class="comment">// redirected: false</span></span><br><span class="line"><span class="comment">// status: 418</span></span><br><span class="line"><span class="comment">// statusText: "I'm a teapot"</span></span><br><span class="line"><span class="comment">// type: "default"</span></span><br><span class="line"><span class="comment">// url: ""</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>对于大多数应用来说，最常见的生成 Response 对象的方式是调用 fetch()；这将返回一个 resolve 为 Response 对象的 promise，该对象表示真实的 HTTP 响应。下面的代码显示了一个响应对象示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: true</span></span><br><span class="line"><span class="comment">// redirected: false</span></span><br><span class="line"><span class="comment">// status: 200</span></span><br><span class="line"><span class="comment">// statusText: "OK"</span></span><br><span class="line"><span class="comment">// type: "basic"</span></span><br><span class="line"><span class="comment">// url: "https://foo.com/"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>Response 类上还具有两个用于生成 Response 对象的静态方法 Response.Redirect()和 Response.error()。Response.Redirect()接受一个 URL 和重定向状态代码(301、302、303、307 或 308)，然后返回一个重定向的 Response 对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Response.redirect(<span class="string">'https://foo.com'</span>, <span class="number">301</span>));</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: false</span></span><br><span class="line"><span class="comment">// redirected: false</span></span><br><span class="line"><span class="comment">// status: 301</span></span><br><span class="line"><span class="comment">// statusText: ""</span></span><br><span class="line"><span class="comment">// type: "default"</span></span><br><span class="line"><span class="comment">// url: ""</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>提供的状态代码必须符合重定向的条件，否则将抛出 error:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Response.redirect(<span class="string">'https://foo.com'</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">// RangeError: Failed to execute 'redirect' on 'Response': Invalid status code</span></span><br></pre></td></tr></table></figure><p>还可以使用 Response.error()。这个静态方法产生的响应是从网络错误中得到的，该错误将导致 fetch() 的 promise 为 project。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Response.error());</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: false</span></span><br><span class="line"><span class="comment">// redirected: false</span></span><br><span class="line"><span class="comment">// status: 0</span></span><br><span class="line"><span class="comment">// statusText: ""</span></span><br><span class="line"><span class="comment">// type: "error"</span></span><br><span class="line"><span class="comment">// url: ""</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="读取-Response-状态信息"><a href="#读取-Response-状态信息" class="headerlink" title="读取 Response 状态信息"></a>读取 Response 状态信息</h4><p>Response 对象提供了一组只读属性，描述请求的完成情况，如下表所示。</p><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td>headers</td><td>与响应关联的 Headers 对象。</td></tr><tr><td>ok</td><td>布尔值，表示 HTTP 状态码的性质，状态码为 200-299 返回 true，其他状态代码为 false。</td></tr><tr><td>redirected</td><td>布尔值，指示响应是否至少经过一个重定向。</td></tr><tr><td>status</td><td>表示响应 HTTP 状态码的整数。</td></tr><tr><td>statusText</td><td>包含与 HTTP 状态码关联的规范描述的字符串。此值来自可选的 HTTP Reason-Phrase 字段，因此如果服务器拒绝带着 Reason-Phrase 响应，此值则为空字符串。</td></tr><tr><td>type</td><td>包含响应类型的字符串。包含以下字符串值之一:<br>- basic: 表示标准的同源响应。<br>- cors: 表示标准的跨源响应。<br>- error: 表示响应对象是通过 Response.error ()创建的。<br>- opaque: 表示带 no-cors 的 fetch 的跨源响应。<br>- opaqueredirect: 表示对 redirect 设置为 manual 请求的响应。</td></tr><tr><td>url</td><td>一个包含响应 URL 的字符串。对于重定向后的响应，将会是非重定向的最终响应的 URL。</td></tr></tbody></table><p>下面展示了返回 200、302、404 和 500 的 URL 的典型响应内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'//foo.com'</span>).then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: true</span></span><br><span class="line"><span class="comment">// redirected: false</span></span><br><span class="line"><span class="comment">// status: 200</span></span><br><span class="line"><span class="comment">// statusText: "OK"</span></span><br><span class="line"><span class="comment">// type: "basic"</span></span><br><span class="line"><span class="comment">// url: "https://foo.com/"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">fetch(<span class="string">'//foo.com/redirect-me'</span>).then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: true</span></span><br><span class="line"><span class="comment">// redirected: true</span></span><br><span class="line"><span class="comment">// status: 200</span></span><br><span class="line"><span class="comment">// statusText: "OK"</span></span><br><span class="line"><span class="comment">// type: "basic"</span></span><br><span class="line"><span class="comment">// url: "https://foo.com/redirected-url/"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">fetch(<span class="string">'//foo.com/does-not-exist'</span>).then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: false</span></span><br><span class="line"><span class="comment">// redirected: true</span></span><br><span class="line"><span class="comment">// status: 404</span></span><br><span class="line"><span class="comment">// statusText: "Not Found"</span></span><br><span class="line"><span class="comment">// type: "basic"</span></span><br><span class="line"><span class="comment">// url: "https://foo.com/does-not-exist/"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">fetch(<span class="string">'//foo.com/throws-error'</span>).then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// Response &#123;</span></span><br><span class="line"><span class="comment">// body: (...)</span></span><br><span class="line"><span class="comment">// bodyUsed: false</span></span><br><span class="line"><span class="comment">// headers: Headers &#123;&#125;</span></span><br><span class="line"><span class="comment">// ok: false</span></span><br><span class="line"><span class="comment">// redirected: true</span></span><br><span class="line"><span class="comment">// status: 500</span></span><br><span class="line"><span class="comment">// statusText: "Internal Server Error"</span></span><br><span class="line"><span class="comment">// type: "basic"</span></span><br><span class="line"><span class="comment">// url: "https://foo.com/throws-error/"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="复制-Response-对象"><a href="#复制-Response-对象" class="headerlink" title="复制 Response 对象"></a>复制 Response 对象</h4><p>复制 Response 对象的主要方式是使用 clone()方法，该方法创建精确的副本且不能重写任何值，也不会标记请求体的 bodyUsed 为 true:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Response(<span class="string">'foobar'</span>);</span><br><span class="line"><span class="keyword">let</span> r2 = r1.clone();</span><br><span class="line"><span class="built_in">console</span>.log(r1.bodyUsed); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(r2.bodyUsed); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>如果 bodyUsed 属性为 false，也就是意味着尚未读取响应体，则不允许复制 Response。一旦主体被读取，尝试复制将抛出一个 TypeError。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">'foobar'</span>);</span><br><span class="line">r.clone();</span><br><span class="line"><span class="comment">// No error</span></span><br><span class="line">r.text(); <span class="comment">// 设置bodyUsed字段为false</span></span><br><span class="line">r.clone();</span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'clone' on 'Response': Response body is already used</span></span><br></pre></td></tr></table></figure><p>只有具有响应体的 Response 才能执行读取 body 的操作(不包含响应体的 Response 不受此限制)，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">'foobar'</span>);</span><br><span class="line">r.text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar</span></span><br><span class="line">r.text().then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'text' on 'Response': body stream is locked</span></span><br></pre></td></tr></table></figure><p>为了使同一个 Response 对象能多次读取 body，在执行第一次读取之前必须调用 clone():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Response(<span class="string">'foobar'</span>);</span><br><span class="line">r.clone().text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar</span></span><br><span class="line">r.clone().text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar</span></span><br><span class="line">r.text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar</span></span><br></pre></td></tr></table></figure><p>或者，也可以通过使用原响应体创建一个新的 Response 实例来执行伪复制操作。重要的是，这个策略不会将第一个 Response 标记为已读，但是响应体在两个 Response 之间共享:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> r1 = <span class="keyword">new</span> Response(<span class="string">'foobar'</span>);</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="keyword">new</span> Response(r1.body);</span><br><span class="line"><span class="built_in">console</span>.log(r1.bodyUsed); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(r2.bodyUsed); <span class="comment">// false</span></span><br><span class="line">r2.text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar</span></span><br><span class="line">r1.text().then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'text' on 'Response': body stream is locked</span></span><br></pre></td></tr></table></figure><h3 id="Requests-Responses-和-Body-混入"><a href="#Requests-Responses-和-Body-混入" class="headerlink" title="Requests, Responses 和 Body 混入"></a>Requests, Responses 和 Body 混入</h3><p>Request 和 Response 都使用了 Fetch API 的 body 混入，以适应两种类型的 payload。这个混入为每个类型提供了一个只读 body（作为一个 ReadableStream 来实现），其中的只读 bodyUsed Boolean 值，用于指示 body 流是否被读取，以及一些将读取流并将结果转换为特定的 JavaScripy 对象类型的方法。</p><p>通常，将 Request 或 Response body 作为流使用的主要原因有如下两个：第一、网络延迟是 payload 大小的一个因素；第二、流 API 本身对于处理 payload 具有内在的帮助。在几乎所有其他情况下，当一次性使用所有资源时，所 fetch 资源的 body 是最有用的。</p><p>Body 混入提供了五种不同的方法，可以将 ReadableStream 刷新到内存中的单个缓冲区中，然后将缓冲区强制转换为特定的 JavaScript 对象类型，最后在 promise 中生成。这个 promise 将一直等到 body 流报告完成，缓冲区被解析之后再解析。这意味着必须等待所 fetch 的资源在客户端上完全加载后才能访问其内容。</p><h4 id="Body-text"><a href="#Body-text" class="headerlink" title="Body.text()"></a>Body.text()</h4><p>Body.text()方法返回一个 promise，该 promise 将 resolve 一个以 UTF-8 字符串来解析的已刷新缓冲区。在 Response 对象中使用 Body.text()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.text())</span><br><span class="line">  .then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// &lt;!doctype html&gt;&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="comment">// &lt;head&gt;</span></span><br><span class="line"><span class="comment">// &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>在 Request 对象中使用 Body.text()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="string">'barbazqux'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">request.text().then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// barbazqux</span></span><br></pre></td></tr></table></figure><h4 id="Body-json"><a href="#Body-json" class="headerlink" title="Body.json()"></a>Body.json()</h4><p>Json()方法返回一个 promise，这个 promise 将 resolve 一个解码为 JSON 来解析的已刷新缓冲区。在 Response 对象中使用 Body.json()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com/foo.json'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// &#123;"foo": "bar"&#125;</span></span><br></pre></td></tr></table></figure><p>在 Request 对象中使用 Body.json()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">bar</span>: <span class="string">'baz'</span> &#125;),</span><br><span class="line">&#125;);</span><br><span class="line">request.json().then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// &#123;bar: 'baz'&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Body-formData"><a href="#Body-formData" class="headerlink" title="Body.formData()"></a>Body.formData()</h4><p>浏览器可以将 FormData 对象序列化/反序列化为一个 body:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFormData = <span class="keyword">new</span> FormData();</span><br><span class="line">myFormData.append(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br></pre></td></tr></table></figure><p>当通过 HTTP 传输时，WebKit 内核的浏览器可能会将其如下序列化:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundarydR9Q2kOzE6nbN7eR</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"foo"</span></span><br><span class="line">bar</span><br><span class="line">------WebKitFormBoundarydR9Q2kOzE6nbN7eR--</span><br></pre></td></tr></table></figure><p>Formdata()方法返回一个 promise，该 promise 将 resolve 一个解码为 Formdata 实例的已刷新缓冲区。在 Response 对象中使用 Body.formData()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com/form-data'</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.formData())</span><br><span class="line">.then(<span class="function">(<span class="params">formData</span>) =&gt;</span> <span class="built_in">console</span>.log(formData.get(<span class="string">'foo'</span>));</span><br><span class="line"><span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>在 Request 对象中使用 Body.formData()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFormData = <span class="keyword">new</span> FormData();</span><br><span class="line">myFormData.append(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>,</span><br><span class="line">&#123; <span class="attr">method</span>:<span class="string">'POST'</span>, <span class="attr">body</span>: myFormData &#125;);</span><br><span class="line">request.formData()</span><br><span class="line">.then(<span class="function">(<span class="params">formData</span>) =&gt;</span> <span class="built_in">console</span>.log(formData.get(<span class="string">'foo'</span>));</span><br><span class="line"><span class="comment">// bar</span></span><br></pre></td></tr></table></figure><h4 id="Body-arrayBuffer"><a href="#Body-arrayBuffer" class="headerlink" title="Body.arrayBuffer()"></a>Body.arrayBuffer()</h4><p>有时可能需要检查和修改 body payload 作为原始二进制数据。对于这样的任务，可以使用 body.ArrayBuffer()将 body 转换为 ArrayBuffer 实例。此方法返回一个 promise，该 promise 将会 resolve 一个 ArrayBuffer 形式的刷新缓冲区。在 Response 对象中使用 Body.arrayBuffer()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.arrayBuffer())</span><br><span class="line">  .then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// ArrayBuffer(...) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>在 Request 对象中使用 Body.arrayBuffer()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="string">'abcdefg'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Logs the encoded string binary values as integers</span></span><br><span class="line">request.arrayBuffer().then(<span class="function">(<span class="params">buf</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Int8Array</span>(buf)));</span><br><span class="line"><span class="comment">// Int8Array(7) [97, 98, 99, 100, 101, 102, 103]</span></span><br></pre></td></tr></table></figure><h4 id="Body-blob"><a href="#Body-blob" class="headerlink" title="Body.blob()"></a>Body.blob()</h4><p>有时可能需要 body payload 作为原始二进制数据且不需要检查或修改。对于这样的任务，可以使用 Body.blob()直接使用 Blob 的实例。此方法返回一个 promise，该 promise 将会 resolve 一个 Blob 形式的刷新缓冲区。在 Response 对象中使用 Body.blob()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.blob())</span><br><span class="line">  .then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// Blob(...) &#123;size:..., type: "..."&#125;</span></span><br></pre></td></tr></table></figure><p>在 Request 对象中使用 Body.blob()的示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="string">'abcdefg'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">request.blob().then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// Blob(7) &#123;size: 7, type: "text/plain;charset=utf-8"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="一次性流"><a href="#一次性流" class="headerlink" title="一次性流"></a>一次性流</h4><p>因为 Body 混入构建在可读流（ReadableStream）之上，也就意味着 Body 流只能读取一次。所以所有的 Body 混入方法只能被调用一次，后续调用混入方法的尝试将抛出 error。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span></span><br><span class="line">  response.blob().then(<span class="function"><span class="params">()</span> =&gt;</span> response.blob())</span><br><span class="line">);</span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'blob' on 'Response': body stream is locked</span></span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="string">'foobar'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">request.blob().then(<span class="function"><span class="params">()</span> =&gt;</span> request.blob());</span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'blob' on 'Request': body stream is locked</span></span><br></pre></td></tr></table></figure><p>即使仅在读取流的过程中，所有的这些方法也将在调用后立即将在 ReadableStream 锁定，并阻止第二个读取器访问该流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://foo.com'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.blob(); <span class="comment">// 第一次调用时锁定流</span></span><br><span class="line">  response.blob(); <span class="comment">// 第二次调用试图去锁定流，失败</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'blob' on 'Response': body stream is locked</span></span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="string">'foobar'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">request.blob(); <span class="comment">// 第一次调用时锁定流</span></span><br><span class="line">request.blob(); <span class="comment">// 第二次调用试图去锁定流，失败</span></span><br><span class="line"><span class="comment">// TypeError: Failed to execute 'blob' on 'Request': body stream is locked</span></span><br></pre></td></tr></table></figure><p>作为 Body 混入的一部分，bodyUsed 布尔属性指示 ReadableStream 是否被使用过，也就是读取器已经锁住了流上。这并不代表流肯定已经完成。属性如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> Request(<span class="string">'https://foo.com'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  body: <span class="string">'foobar'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> response = <span class="keyword">new</span> Response(<span class="string">'foobar'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(request.bodyUsed); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(response.bodyUsed); <span class="comment">// false</span></span><br><span class="line">request.text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar</span></span><br><span class="line">response.text().then(<span class="built_in">console</span>.log); <span class="comment">// foobar</span></span><br><span class="line"><span class="built_in">console</span>.log(request.bodyUsed); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(response.bodyUsed); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="使用-ReadableStream-Body"><a href="#使用-ReadableStream-Body" class="headerlink" title="使用 ReadableStream Body"></a>使用 ReadableStream Body</h4><p>许多 JavaScript 程序将网络视为整体操作；请求被一次性创建和发送，响应是一个统一且一次性的 payload。这个约定隐藏了底层的复杂性，使得涉及网络的代码很容易编写。</p><p>由于 TCP/IP 的特性，传输的数据以数据块的形式到达终点，最大速度受到网络的限制。接收的终点数据块在到达时分配内存并写入内容。Fetch API 允许您实时读取和操作通过 ReadableStream 到达的数据。</p><blockquote><p>注意：本节中的例子将去<a href="https://Fetch.spec.whatwg.org/网站上请求Fetch标准的HTML。这个页面有大约1MB，这是一个足够大的payload，以至于本节中的Stream示例将以多个数据块的形式到达。" target="_blank" rel="external nofollow noopener noreferrer">https://Fetch.spec.whatwg.org/网站上请求Fetch标准的HTML。这个页面有大约1MB，这是一个足够大的payload，以至于本节中的Stream示例将以多个数据块的形式到达。</a></p></blockquote><p>在 Stream API 中定义的 ReadableStream 有一个 getReader()方法，该方法生成一个 ReadableStreamDefaultReader，可用于异步检索到达的 body 数据块。body 数据流的每个块都作为一个 Uint8Array 提供。</p><p>下面的代码调用读取器上的 read()来记录第一个可用数据块:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://fetch.spec.whatwg.org/'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.body)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = body.getReader();</span><br><span class="line">    <span class="built_in">console</span>.log(reader); <span class="comment">// ReadableStreamDefaultReader &#123;&#125;</span></span><br><span class="line">    reader.read().then(<span class="built_in">console</span>.log);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br></pre></td></tr></table></figure><p>为了使 payload 在可用时可以全部检索，可以递归地调用 read()方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://fetch.spec.whatwg.org/'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.body)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = body.getReader();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">processNextChunk</span>(<span class="params">&#123; value, done &#125;</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">      <span class="keyword">return</span> reader.read().then(processNextChunk);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reader.read().then(processNextChunk);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Async 函数非常适合用与 fetch()配合使用。这种递归实现可以使用 Async/await 展开:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://fetch.spec.whatwg.org/'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.body)</span><br><span class="line">  .then(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reader = body.getReader();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; value, done &#125; = <span class="keyword">await</span> reader.read();</span><br><span class="line">      <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>另外，read()方法与 Iterable 接口非常相似，因此可以很容易将其转换为 for-await-of 循环:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://fetch.spec.whatwg.org/'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.body)</span><br><span class="line">  .then(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reader = body.getReader();</span><br><span class="line">    <span class="keyword">let</span> asyncIterable = &#123;</span><br><span class="line">      [<span class="built_in">Symbol</span>.asyncIterator]() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          next() &#123;</span><br><span class="line">            <span class="keyword">return</span> reader.read();</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (chunk <span class="keyword">of</span> asyncIterable) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: Uint8Array&#123;&#125;, done: false &#125;</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>还可以进一步简化为更轻量的 generator 函数。此外，通过允许部分 stream 读取，这个实现可以变得更加健壮。如果 stream 完成或抛出一个 error，读取器应该打开锁以允许其他的 stream 读取器从它停止的地方继续:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">streamGenerator</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reader = stream.getReader();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; value, done &#125; = <span class="keyword">await</span> reader.read();</span><br><span class="line">      <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">yield</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reader.releaseLock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fetch(<span class="string">'https://fetch.spec.whatwg.org/'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.body)</span><br><span class="line">  .then(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (chunk <span class="keyword">of</span> streamGenerator(body)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在这些示例中，如果当前的 Uint8Array 块超出范围，则浏览器标记可以进行垃圾收集。这可以使在适合连续和分段检查的大型 payload 的场景中潜在地节省大量内存。</p><p>缓冲区的大小以及浏览器是否在等缓冲区填满再推入 stream，取决于 JavaScript 运行时的实现。浏览器理想的做法是尽可能等待并填满已分配的缓冲区，但同时通过尽可能高频发送(有时是未填满的)缓冲区来保持 stream 填满。</p><p>浏览器可能会根据带宽或网络延迟等因素来调整数据块缓冲区的大小。此外，如果浏览器决定不等待网络，它可能决定向 stream 发送一个部分填充的缓冲区。最后，代码应该准备好处理以下内容:</p><ul><li>可变大小的 Uint8Array 块</li><li>Uint8Array 块被部分填充</li><li>数据块以未知间隔到达</li></ul><p>默认情况下，数据块将以 Uint8Array 格式到达。由于数据块终止时不考虑已编码的内容，因此可能存在多字节字符分割到了在两个单独的顺序块这种类似的情况。手动解决这个问题的方法有很多，大多数情况下，Encoding API 提供了很方便的解决方案。</p><p>要将 Uint8Array 转换为可读的文本，可以向 TextDecoder 传递一个缓冲区并返回转换后的值。设置 stream:true 配置允许它在内存中保留前一个缓冲区，这样在两个块之间连接的内容可以被正确解码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="keyword">new</span> TextDecoder();</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">streamGenerator</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reader = stream.getReader();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; value, done &#125; = <span class="keyword">await</span> reader.read();</span><br><span class="line">      <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">yield</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reader.releaseLock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fetch(<span class="string">'https://fetch.spec.whatwg.org/'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.body)</span><br><span class="line">  .then(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (chunk <span class="keyword">of</span> streamGenerator(body)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(decoder.decode(chunk, &#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// &lt;!doctype html&gt;&lt;html lang="en"&gt; ...</span></span><br><span class="line"><span class="comment">// whether a &lt;a data-link-type="dfn" href="#concept-header" ...</span></span><br><span class="line"><span class="comment">// result to &lt;var&gt;rangeValue&lt;/var&gt;. ...</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>因为可以使用 ReadableStream 创建 Response 对象，所以 Response 可以读取 stream，然后将其管道到新创建的、可以使用 Body 的方法（比如 text()）的辅助流 。这允许检查和操作的流内容。这种双流技术如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://fetch.spec.whatwg.org/'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.body)</span><br><span class="line">  .then(<span class="function">(<span class="params">body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = body.getReader();</span><br><span class="line">    <span class="comment">// create secondary stream</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReadableStream(&#123;</span><br><span class="line">      <span class="keyword">async</span> start(controller) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; value, done &#125; = <span class="keyword">await</span> reader.read();</span><br><span class="line">            <span class="keyword">if</span> (done) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Push the body stream's chunk onto the secondary stream</span></span><br><span class="line">            controller.enqueue(value);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          controller.close();</span><br><span class="line">          reader.releaseLock();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">secondaryStream</span>) =&gt;</span> <span class="keyword">new</span> Response(secondaryStream))</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.text())</span><br><span class="line">  .then(<span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// &lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt; ...</span></span><br></pre></td></tr></table></figure><h2 id="Beacon-API"><a href="#Beacon-API" class="headerlink" title="Beacon API"></a>Beacon API</h2><p>为了最大限度地传输关于页面的信息，许多分析工具需要在页面生命周期的尽可能晚的时间点将观测数据或分析数据发送到服务器。因此，最佳模式是在浏览器的 unload 事件上发送网络请求。此事件表明正在发生页面关闭，并且该页面上不会产生更多有用的信息。</p><p>当 unload 事件被触发时，分析工具希望停止收集信息，并尝试将现有的信息发送到服务器。这就出现了一个问题，因为 unload 事件对浏览器来说意味着没有理由分派挂起的网络请求(因为页面无论如何都会被关闭)。例如，在 unload 处理程序中创建的任何异步请求都将被浏览器取消。因此，异步 XMLHttpRequest 或 fetch()不适合此任务。分析工具虽然可以使用同步 XMLHttpRequest 来强制传递请求，但这样做会导致用户体验感变差。由于浏览器暂停等待请求返回，浏览器在等待 unload 处理程序内的请求完成时会延迟到下一页的导航。</p><p>为了解决这个问题，W3C 引入了附加的 Beacon API。向 navigator 对象添加了一个 sendBeacon()方法。这个简单的方法接受一个 URL 和一个 payload，并发送一个 POST 请求。可选的 payload 可以是 ArrayBufferView、Blob、DOMString 或 FormData 实例。请求排队后如果成功地进行最终传输，则该方法返回 true，否则为 false。</p><p>用法如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送POST请求</span></span><br><span class="line"><span class="comment">// URL: 'https://example.com/analytics-reporting-url'</span></span><br><span class="line"><span class="comment">// Request Payload: '&#123;foo: "bar"&#125;'</span></span><br><span class="line">navigator.sendBeacon(</span><br><span class="line">  <span class="string">'https://example.com/analytics-reporting-url'</span>,</span><br><span class="line">  <span class="string">'&#123;foo: "bar"&#125;'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这个方法虽然看起来像是是 POST 请求的语法糖，但是 Beacon 有几个显著的特点:</p><ul><li>Sendbeacon()并不局限于页面生命周期的末尾，它可以在任何时候使用。</li><li>调用 sendBeacon()后，浏览器将请求添加到内部请求队列中。浏览器会迅速尝试在队列中发送请求。</li><li>浏览器保证会尝试发送请求，即使浏览器已经销毁了原始页面。</li><li>响应代码、超时和任何其他网络故障都是完全不可见的，不能用代码处理。</li><li>在调用 sendBeacon()时与所有相关的 cookie 一起发送。</li></ul><h2 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h2><p>Web Sockets 的目标是通过单一的长期连接提供与服务器的双向通信。在 JavaScript 中创建 Web Socket 时，会先向服务器发送 HTTP 请求以启动连接。当服务器响应时，连接使用 HTTP Upgrade header 从 HTTP 切换到 WebSocket 协议。这意味着 Web Sockets 不能用标准 HTTP 服务器实现，必须使用支持该协议的专用服务器才能正常工作。</p><p>因为 Web Sockets 使用自定义协议，所以 URL 方案略有不同。不使用<code>http://</code>或<code>https://</code>方案，对于不安全的连接有 ws://，对于安全的连接有 wss://。在指定 Web Socket URL 时，必须包含该方案，因为将来可能会支持其他方案。</p><p>在 HTTP 上使用自定义协议的优点是可以在客户端和服务器之间发送很少量的数据，而不受 HTTP 字节开销的限制。因为带宽和延迟是移动应用的一个常见问题，所以使用较小的数据包使 WebSockets 成为移动端的理想选择。使用自定义协议的缺点是定义协议的时间比 JavaScript API 要长。所有主流浏览器都支持 Web sockets。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>要创建一个新的 WebSocket，需要实例化一个 WebSocket 对象并传入提供连接的 URLl:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://www.example.com/server.php'</span>);</span><br></pre></td></tr></table></figure><p>注意，必须将 URL 的绝对路径传给 WebSocket 构造函数。Web Sockets 不受同源策略限制，因此可以打开到任何站点的连接。是否与来自特定源的页面进行通信完全取决于服务器。(服务器可以使用握手包中的信息来确定请求从何处发出。)</p><p>一旦 WebSocket 对象被实例化，浏览器就会尝试创建连接。与 XHR 类似，WebSocket 有一个 readyState 属性，用于指示当前状态。然而数值含义与 XHR 不同，如下所示:</p><ul><li>WebSocket.OPENING (0)—连接正在建立.</li><li>WebSocket.OPEN (1)—连接已经建立.</li><li>WebSocket.CLOSING (2)—连接正在关闭.</li><li>WebSocket.CLOSE (3)—连接已经关闭.</li></ul><p>Websocket 没有 readystatechange 事件；但是，有其他事件对应于不同的状态。readystate 始终从 0 开始。</p><p>可以随时使用 close()方法关闭 Web Socket 连接:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.close();</span><br></pre></td></tr></table></figure><p>在调用 close()时，readyState 立即变更为 2（正在关闭），并在完成后转换为 3。</p><h3 id="发送-接收数据"><a href="#发送-接收数据" class="headerlink" title="发送/接收数据"></a>发送/接收数据</h3><p>打开 Web Socket 后，通过连接既可以发送数据，也可以接收数据。要向服务器发送数据，使用 send()方法并传递一个字符串、ArrayBuffer 或 Blob，如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/server.php"</span>);</span><br><span class="line"><span class="keyword">let</span> stringData = <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">let</span> arrayBufferData = <span class="built_in">Uint8Array</span>.from([<span class="string">'f'</span>, <span class="string">'o'</span> <span class="string">'o'</span>]);</span><br><span class="line"><span class="keyword">let</span> blobData = <span class="keyword">new</span> Blob([<span class="string">'f'</span>, <span class="string">'o'</span> <span class="string">'o'</span>]);</span><br><span class="line">socket.send(stringData);</span><br><span class="line">socket.send(arrayBufferData.buffer);</span><br><span class="line">socket.send(blobData);</span><br></pre></td></tr></table></figure><p>当服务器向客户端发送消息时，将在 WebSocket 对象上触发一个 message 事件。message 事件的工作方式类似于其他消息传递协议，payload 可通过 event.data 属性获得:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = event.data;</span><br><span class="line">  <span class="comment">// do something with data</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>与通过 send()发送到服务器的数据类似，event.data 中返回的数据可以作为 ArrayBuffer 或 Blob 形式获取。这是由 WebSocket 对象的 binaryType 属性控制的，它可以是“blob”或“arraybuffer”。</p><h3 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h3><p>WebSocket 对象在连接生命周期中还会触发另外三个事件:</p><ul><li>open—当连接成功后触发</li><li>error—发生错误时触发，连接不能保持。</li><li>close—连接关闭时触发</li></ul><p>Websocket 对象不支持 DOM Level2 事件监听器，因此您需要为每个对象使用 DOM Level0 风格的事件监听:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://www.example.com/server.php'</span>);</span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Connection established.'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Connection error.'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Connection closed.'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这三个事件中，只有 close 事件具有关于 event 对象的附加信息。event 对象上还有三个附加属性：wasClean，一个指示连接是否干净关闭的布尔值；code，一个从服务器发送的数字状态代码；reason，一个包含从服务器发送的消息的字符串。可以将这些信息展示给用户或者进行记录分析:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">`as clean? <span class="subst">$&#123;event.wasClean&#125;</span> Code=<span class="subst">$&#123;event.code&#125;</span> Reason=<span class="subst">$&#123;event.reason&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>事实上，在 Ajax 安全方面已经发表了很多文章，有很多书都是专门讨论这个话题的。大型 Ajax 应用程序的安全考虑因素很多，但是通常需要了解一些关于 Ajax 安全性的基本知识。</p><p>首先，任何可以通过 Ajax 访问的 URL 也可以通过浏览器或服务器访问。思考以下 URL 的例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/getuserinfo.php?id=<span class="number">23</span></span><br></pre></td></tr></table></figure><p>如果向这个 URL 发出请求，可能会返回 ID 为 23 的用户的一些数据。没有什么可以阻止其他人将 URL 中的 id 更改为 24、56 或任何其他值。getuserinfo.php 文件必须知道请求者是否有权限访问被请求的数据；否则，服务器在用户数据方面是完全开放的。</p><p>当一个未经授权的系统能够访问一个资源时，它被认为是一个跨站请求伪造（CSRF）。未经授权的系统使自己在处理请求的服务器眼里看起来是合法的。从善意的漏洞证明到恶意的数据窃取或破坏攻击，无论多大或多小的 Ajax 应用会都受到 CSRF 攻击的影响。</p><p>通过 Ajax 安全访问 URL 的常用方法是验证发送者对资源的访问权限。可以通过以下方式实现:</p><ul><li>需要 SSL 来访问可以通过 Ajax 请求到的资源</li><li>要求在每个请求中都发送一个计算过的 token</li></ul><p>以下方法对 CSRF 的防御是无效的:</p><ul><li>要求使用 POST 而不是 GET ー这很容易改变。</li><li>使用 referrer 作为判断来源的依据ー referrer 很容易修改。</li><li>基于 cookie 信息的验证ーー同样很容易修改。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Ajax 是一种在不刷新当前页面的情况下从服务器检索数据的方法，有以下特点：</p><ul><li>响应 Ajax 的核心对象是 XMLHttpRequest(XHR)对象。</li><li>这个对象作为从服务器中检索 XML 数据的 JavaScript 方法，它是由微软创建的，并在 Internet Explorer 5 首次引入。</li><li>从那时起，Firefox、Safari、Chrome 和 Opera 都复制了这个实现，W3C 编写了定义 XHR 行为的规范，使 XHR 成为 Web 标准。</li><li>尽管在实现上存在一些差异，但在所有浏览器中 XHR 对象的基本用法都是相对规范化的，因此可以安全地用于 Web 应用中。</li></ul><p>Xhr 的主要约束之一是同源策略，同源指的是使用相同的端口、协议和域名。除非使用了经过批准的跨域解决方案，否则在同源之外尝试访问资源会导致安全性错误。这个解决方案被称为跨域资源共享(CORS)，并且通过 XHR 对象得到了原生的支持。尽管不如 CORS 健壮，图像 ping 和 JSONP 也是用于跨域通信的技术。</p><p>FetchAPI 是作为现有 XHR 对象的端到端代替方法引入的。Fetch API 提供了优越的基于 promise 的结构、更直观的接口以及对 Stream API 的完善支持。</p><p>WebSockets 是与服务器的双向通信通道。与其他解决方案不同，WebSockets 使用自定义协议而不是 HTTP，该协议旨在快速传递小块数据。这需要一个不同的网络服务器，但提供了速度优势。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS高程 </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> 第4版 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> 网络请求 </tag>
            
            <tag> 远程资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高程第4版新增章节翻译：变量</title>
      <link href="/posts/eb18ff5d.html"/>
      <url>/posts/eb18ff5d.html</url>
      
        <content type="html"><![CDATA[<p>去年下半年，红宝书新发布了第四版，删减了一些老旧内容，并一直更新到了 ES2019，传说第三版译者李松峰老师正在翻译中，今年下半年可以出中文版。现在迫不及待地提前学习就只能看英文原版，边学边把部分新增章节翻译下。</p><p>下述内容来自 Professional JavaScript for Web Developes,4th Edition（<a href="https://www.ituring.com.cn/book/2472" target="_blank" rel="external nofollow noopener noreferrer">JavaScript 高级程序设计第四版</a>），29 页，VARIABLES（变量）章节。</p><a id="more"></a><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>ECMAScript 变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。声明一个变量时可以使用三种关键词：var（所有 ECMAScript 版本可用）、const 和 let（ECMASCript6 引入）。</p><h3 id="var-关键词"><a href="#var-关键词" class="headerlink" title="var 关键词"></a>var 关键词</h3><p>使用 var 操作符（注意 var 是一个关键字），后跟一个变量名（即一个标识符），如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br></pre></td></tr></table></figure><p>这行代码定义了一个名为 message 的变量，该变量可以用来保存任何值（像这样未经过初始化的变量，会保存一个特殊的值——undefined，相关内容在之后章节讨论）。ECMAScript 支持直接初始化变量，因此在定义变量的同时就可以设置变量的值，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">'hi'</span>;</span><br></pre></td></tr></table></figure><p>在此，变量 message 中保存了一个字符串值“hi”，像这样初始化变量并不会把它标记为字符串类型，初始化的过程就是给变量赋一个值那么简单。因此，可以在修改变量值的同时修改值的类型，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">'hi'</span>;</span><br><span class="line">message = <span class="number">100</span>; <span class="comment">// 有效，但不推荐</span></span><br></pre></td></tr></table></figure><p>在这个例子中，变量 message 一开始保存了一个字符串值“hi”，然后该值又被一个数字值 100 取代。虽然我们不建议修改变量所保存值的类型，但这种操作在 ECMAScript 中完全有效。</p><h4 id="声明作用域"><a href="#声明作用域" class="headerlink" title="声明作用域"></a>声明作用域</h4><p>有一点必须注意，即用 var 操作符定义的变量将成为定义该变量的函数作用域中的局部变量。也就是说，如果在函数中使用 var 定义一个变量，那么这个变量在函数退出后就会被销毁，，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">'hi'</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// 错误！</span></span><br></pre></td></tr></table></figure><p>这里，变量 message 是在函数中使用 var 定义的。当函数被调用时，就会创建该变量并为其赋值。在此之后，这个变量又会立即被销毁，因此例子中的下一行代码就会导致错误。不过，可以像下面这样省略 var 操作符，从而创建一个全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  message = <span class="string">'hi'</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(message); <span class="comment">// "hi"</span></span><br></pre></td></tr></table></figure><p>这个例子省略了 var 操作符，因而 message 就成了全局变量。这样，只要调用过一次 test()函数，这个变量就有了定义，就可以在函数外部的任何地方被访问到。</p><blockquote><p>注意：虽然省略 var 操作符可以定义全局变量，但这也不是我们推荐的做法。因为在局部作用域中定义的全局变量很难维护，而且如果有意地忽略了 var 操作符，也会由于相应变量不会马上就有定义而导致不必要的混乱。给未经声明的变量赋值在严格模式下会导致抛出 ReferenceError 错误。</p></blockquote><p>可以使用一条语句定义多个变量，只要像下面这样把每个变量（初始化或不初始化均可）用逗号分隔开即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">'hi'</span>,</span><br><span class="line">  found = <span class="literal">false</span>,</span><br><span class="line">  age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><p>这个例子定义并初始化了 3 个变量。同样由于 ECMAScript 是松散类型的，因而使用不同类型初始化变量的操作可以放在一条语句中来完成。虽然代码里的换行和变量缩进不是必需的，但这样做可以提升可读性。</p><p>在严格模式下，不能定义名为 eval 或 arguments 的变量，否则会导致语法错误。</p><h4 id="var-声明提升"><a href="#var-声明提升" class="headerlink" title="var 声明提升"></a>var 声明提升</h4><p>当使用 var 时，由于变量声明会被提升到函数作用域的顶部，所以下述代码是可行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>由于 ECMAScript 运行时会按照下述的逻辑来执行，所以不会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  age = <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>解释器会把所有的变量声明拉到所在定义域的顶部，这就叫声明提升。这也允许你使用多个 var 来声明同一个变量而不会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">36</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure><h3 id="let-声明"><a href="#let-声明" class="headerlink" title="let 声明"></a>let 声明</h3><p>let 操作符的使用与 var 类似，但也有一些重要的不同。最需要注意的就是在声明时 let 是块级作用域，而 var 是函数作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Matt'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError: age is not defined</span></span><br></pre></td></tr></table></figure><p>在这里，因为 let 声明变量的作用域不会延伸到块的外部，所以使用 let 声明的变量不能在 if 代码块外引用。块级作用域是函数作用域的严格子集，所以 var 声明时的任何限制同样也适用于 let 声明。</p><p>在块级作用域内，不允许出现对同一个变量的多次 let 声明，否则会导致如下错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age; <span class="comment">// SyntaxError; identifier 'age' has already been declared</span></span><br></pre></td></tr></table></figure><p>当然，JavaScript 引擎将会持续追踪变量声明时所使用的标识符和所在的块级作用域，所以在嵌套内使用相同的标识符时，不会当成重复声明而报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Nicholas'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 'Nicholas'</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Matt'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// 'Matt'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 30</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复声明的错误不是一个有序函数，不会被 if 和 var 混用影响。不同的关键词不会声明出不同的变量类型——只会影响到与变量相关的作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">let</span> name; <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">var</span> age; <span class="comment">// SyntaxError</span></span><br></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>let 和 var 的另外一个重要的不同点就是 let 不会声明提升：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Matt'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age没有被提升</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// ReferenceError: age is not defined</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br></pre></td></tr></table></figure><p>当解析代码时，JavaScript 引擎仍然能提前识别出代码块中后出现的 let 声明，但是无论如何都不能在真正使用 let 声明前使用变量。在声明前执行的片段被称作为“暂时性死区（TDZ）”，任何试图去引用变量的操作都会抛出 ReferenceError 错误。</p><h4 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h4><p>与 var 关键词不同，当在全局环境中使用 let 时，变量不会附加到 window 对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Matt'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// 'Matt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>无论如何，在页面的生命周期内，使用 let 在全局块级作用域中声明的变量一直存在。因此为了避免抛出 SyntaxError 的错误，必须确定你的页面不会再试图声明该变量。</p><h4 id="条件声明"><a href="#条件声明" class="headerlink" title="条件声明"></a>条件声明</h4><p>当使用 var 声明变量时，由于声明提升，JavaScript 引擎会将多余的多个声明组合成一个声明并放在函数作用域顶部。但由于 let 声明在块级作用域内，所以检查之前变量是否被声明过并条件性的声明变量是不可行的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> name = <span class="string">'Nicholas'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> age = <span class="number">26</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 由于不能确定页面内之前声明了什么变量，所以假定变量还未声明</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> name = <span class="string">'Matt'</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 不会出现问题，因为会把多个声明组合成一个声明。</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 不需要检查之前name是否声明过</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> age = <span class="number">36</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 由于“age”之前已经声明过，所以会抛出一个错误</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 let 声明会被包裹在条件块代码中，所以使用 try/catch 语句或者 typeof 操作符也解决不了问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> name = <span class="string">'Nicholas'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> age = <span class="number">36</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">// 由于不能确定页面内之前声明了什么变量，所以假定变量还未声明</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name !== <span class="string">'undefined'</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="comment">// 由于“name”被限制在了if&#123;&#125;块级作用域中，所以下述变量分配会表现为全局变量</span></span></span><br><span class="line"><span class="actionscript">  name = <span class="string">'Matt'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">try</span> (age) &#123;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">// 如果age没有被声明，将会抛出错误</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">catch</span>(error) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="comment">// 由于“age”被限制在了catch&#123;&#125;块级作用域中，所以下述变量分配会表现为全局变量</span></span></span><br><span class="line">  age = 26;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于上述原因，在使用 ES6 声明关键词时不能依赖于条件声明。</p><blockquote><p>注意：不能使用 let 进行条件声明是有积极作用的，在代码中使用条件声明不是一个好习惯。条件声明会使代码流更难理解，如果你发现自己经常使用条件声明，ES6 是非常好的改变机会，你会有更好的方式去实现代码。</p></blockquote><h4 id="循环中的-let-声明"><a href="#循环中的-let-声明" class="headerlink" title="循环中的 let 声明"></a>循环中的 let 声明</h4><p>在 let 语法出现之前，for 循环中的迭代变量会溢出到循环体外部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>切换到 let 声明后，迭代变量只会作用到 for 循环体的作用域内部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>使用 var 声明时，经常会遇到迭代变量单一声明和修改的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 期望输出的结果 0, 1, 2, 3, 4</span></span><br><span class="line"><span class="comment">// 真正输出的结果 5, 5, 5, 5, 5</span></span><br></pre></td></tr></table></figure><p>发生的原因是循环结束的时候，迭代变量仍然被设为导致循环结束的值：5。当 timeout 稍后执行时，所有的 timeout 会引用相同的值，因此打印出来全是最终值。</p><p>当使用 let 声明迭代变量时，Javascript 引擎会真正的给每个循环体声明一个迭代变量。每一个 setTimeOut 会引用一个单独的实例，因此将会打印出期望输出的结果：当循环执行时使用当前循环的迭代变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印出 0, 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><p>这个每次迭代单独声明的行为对所有风格的 for 循环都适用，包括 for-in 和 for-of 循环。</p><h3 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h3><p>const 的表现与 let 大部分是相同的，除了非常重要的一点区别——const 声明的变量在声明之后不能重新赋值，否则会导致运行时错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span>;</span><br><span class="line">age = <span class="number">36</span>; <span class="comment">// TypeError: assignment to a constant</span></span><br><span class="line"><span class="comment">// const也不允许多次声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Matt'</span>;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Nicholas'</span>; <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 仍然是块级作用域</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Matt'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Nicholas'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><p>const 声明只会强制指向的变量的引用。如果一个 const 变量引用了一个对象，那么修改对象内部的属性不会违反 const 的限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">'Matt'</span>; <span class="comment">// 可行</span></span><br></pre></td></tr></table></figure><p>在 for 循环中，尽管 JavaScript 引擎会对 let 声明的迭代变量创建一个新的实例，并且 const 变量和 let 变量的表现相似，但在循环体中并不能使用 const 来声明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;&#125; <span class="comment">// TypeError: assignment to constant variable</span></span><br></pre></td></tr></table></figure><p>然而，如果你想声明一个不会改变的迭代变量，const 是可以使用的——这恰好是因为每次迭代都声明了一个新变量。这对 for-of 和 for-in 循环的情况是非常重要的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> j = <span class="number">7</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7, 7, 7, 7, 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a, b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure><h3 id="声明风格和最佳实践"><a href="#声明风格和最佳实践" class="headerlink" title="声明风格和最佳实践"></a>声明风格和最佳实践</h3><p>ECMAScript6 中 let 和 const 的引入提高了声明作用域和语法的精确度，从客观上为该语言带来了更好的工具。众所周知，由于 var 声明的异常行为导致 JavaScript 的问题数不胜数。在引入这些新关键字之后，出现了一些越来越常见的可以提高代码质量的模式。</p><h4 id="不使用-var"><a href="#不使用-var" class="headerlink" title="不使用 var"></a>不使用 var</h4><p>在使用 let 和 const 之后，大部分的开发者可以发现在自己代码的任何地方都将不再需要 var。将变量声明限制为仅让 let 和 const 出现的模式，由于对变量作用域，声明局部性和 const 正确使用的细心管理，将有助于提高代码库质量。</p><h4 id="优先使用-const"><a href="#优先使用-const" class="headerlink" title="优先使用 const"></a>优先使用 const</h4><p>使用 const 声明允许浏览器运行时可以强制一个变量为常量，还可以使用静态代码分析工具来预见非法的赋值操作。因此，许多开发者认为默认情况下将变量声明为 const 是最合适的，除非他们明确知道需要在某个时候重新赋值。这使开发者可以更具体地推断出永远不会改变的值，并在代码执行试图执行重新赋值的情况下快速检测错误行为。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JS高程 </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> JavaScript高级程序设计 </tag>
            
            <tag> 第4版 </tag>
            
            <tag> 变量 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode编辑器的快捷键</title>
      <link href="/posts/ff496e4d.html"/>
      <url>/posts/ff496e4d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>已经被微软收购了的世界最大同性交友网站 Github，最近收购了 npm，巨硬公司天下无敌，VSCode 一统天下 🙂。</p></blockquote><p>列出几个比较有用的快捷键，最后翻译下 VSCode 官方给的快捷键可打印 pdf 版。</p><a id="more"></a><h2 id="键盘映射"><a href="#键盘映射" class="headerlink" title="键盘映射"></a>键盘映射</h2><p>首先在 VSCode 的设置中有一个“键映射”：</p><p><img src="/posts/ff496e4d/%E9%94%AE%E7%9B%98%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E6%98%A0%E5%B0%84.jpg" alt></p><p>在键盘映射中，有 Vim、Sublime、Atom、IDEA、Notepad++、Eclipse、Visual Studio、Emacs 和 Delphi 多种编辑器的映射插件，便于习惯其他编辑器的同学很方便的适应 VSCode。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>同样在上图设置中，可以打开“键盘快捷方式”，在这里列出了所有的 VSCode 编辑器中内置的和插件中添加的快捷方式。</p><p><img src="/posts/ff496e4d/%E5%86%85%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%9F%A5%E7%9C%8B.jpg" alt></p><h3 id="几个提高效率的快捷键"><a href="#几个提高效率的快捷键" class="headerlink" title="几个提高效率的快捷键"></a>几个提高效率的快捷键</h3><h4 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h4><p>Ctrl+Shift+P, F1：显示命令面板<br>Ctrl+P：快速打开文件<br>Ctrl+, ：用户设置<br>Ctrl+K Ctrl+S：键盘快捷键</p><h4 id="基础编辑"><a href="#基础编辑" class="headerlink" title="基础编辑"></a>基础编辑</h4><p>Alt+ ↑ / ↓ ：向上/向下移动本行<br>Shift+Alt + ↓ / ↑：向上/向下复制本行<br>Ctrl+Shift+\：跳到匹配的括号位置<br>Ctrl+K Ctrl+[：折叠所有的下级区域<br>Ctrl+K Ctrl+]：展开所有的下级区域</p><h4 id="多光标和选择"><a href="#多光标和选择" class="headerlink" title="多光标和选择"></a>多光标和选择</h4><p>Ctrl+Alt+ ↑ / ↓：在上/下面插入光标<br>Ctrl+U：撤销最后的光标操作<br>Shift+Alt+I：选择的每一行的最后插入光标<br>Ctrl+L：选择本行</p><h4 id="富语言编辑"><a href="#富语言编辑" class="headerlink" title="富语言编辑"></a>富语言编辑</h4><p>Ctrl+K Ctrl+F：格式化选区<br>F12：跳转到定义位置<br>Alt+F12：速览定义位置<br>Ctrl+K F12：在侧边打开定义<br>Ctrl+.：快速修复<br>Shift+F12：速览引用位置</p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>Ctrl+Tab：打开下一个文件<br>Ctrl+Shift+Tab：打开上一个文件<br>Ctrl+K R：在资源管理器中打开活动文件</p><h2 id="官方-pdf-版快捷键翻译"><a href="#官方-pdf-版快捷键翻译" class="headerlink" title="官方 pdf 版快捷键翻译"></a>官方 pdf 版快捷键翻译</h2><p>VSCode 官方可打印 pdf 版快捷键链接如下：<a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" target="_blank" rel="external nofollow noopener noreferrer">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></p><p>造福下人民，把 pdf 翻译成了中文：</p><p><a href="./ff496e4d/keyboard-shortcuts-windows.pdf">pdf 文件下载链接 📋</a></p><p><img src="/posts/ff496e4d/%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%88%AA%E5%9B%BE.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS中的防抖与节流</title>
      <link href="/posts/7c2664a3.html"/>
      <url>/posts/7c2664a3.html</url>
      
        <content type="html"><![CDATA[<p>在做前端可视化的某些内容轮播时，使用点击事件会用到节流（立即执行），防止动画执行时被多次点击事件打断导致某些奇怪错误。总结记录下<code>防抖（debounce）</code>和<code>节流（throttle）</code>及他们的不同效果的用法。</p><a id="more"></a><h2 id="防抖和节流定义的区别"><a href="#防抖和节流定义的区别" class="headerlink" title="防抖和节流定义的区别"></a>防抖和节流定义的区别</h2><p>首先分析一下防抖和节流的区别：</p><ul><li><code>防抖（debounce）</code>同样也是稀释高频事件的执行频率，但是防抖是设置了一个<code>延迟时间</code>来执行回调函数，如果在延迟期间内再次触发事件，会重新计算延迟时间，可分为立即执行和非立即执行两种版本。</li><li><code>节流（throttle）</code>比较容易理解，如果想稀释高频事件的回调函数的执行频率，就设置一个<code>周期时间</code>，在一个周期内回调函数只能执行一次，可分为有头有尾、有头无尾、无头有尾三种。</li></ul><blockquote><p>注意 1：箭头函数没有自身的 <code>arguments</code> 和 <code>this</code>，需要去上下文中寻找。所以本文中 <code>setTimeout</code> 的回调均使用的箭头函数，<code>arguments</code> 和 <code>this</code> 在它的上层作用域中。</p></blockquote><blockquote><p>注意 2：<code>debounce</code> 和 <code>throttle</code> 函数都是返回了一个 <code>debounced</code> 或 <code>throttled</code> 作为真正的回调函数。<code>debounced</code> 和 <code>throttled</code> 都利用了闭包在 <code>debounce</code> 和 <code>throttle</code> 存放一些“通用”变量。</p></blockquote><h2 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h2><p>先放出防抖的代码，<code>debounce</code> 接受三个参数，分别是回调函数 <code>func</code>，延迟时间 <code>wait</code> 和是否立即执行 <code>immediate</code>，又给防抖函数的 <code>return</code> 添加了一个取消防抖 <code>cancel</code> 的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 防抖函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>func 回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span>  </span>wait 等待时间 ms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>immediate 是否立即执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: result func返回的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutID, result;</span><br><span class="line">  <span class="keyword">let</span> debounced = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.clearTimeout(timeoutID);</span><br><span class="line">    <span class="keyword">if</span> (immediate === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!timeoutID) result = func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timeoutID = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 取消防抖</span></span><br><span class="line">  debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.clearTimeout(timeoutID);</span><br><span class="line">    timeoutID = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>逐步分析防抖函数的逻辑，按 <code>immediate</code> 参数可以分为<code>立即执行</code>和<code>非立即执行</code>两种：</p><h3 id="非立即执行"><a href="#非立即执行" class="headerlink" title="非立即执行"></a>非立即执行</h3><p>当默认情况，也就是 <code>immediate</code> 为 <code>false</code> 的情况下，假设执行回调函数为 <code>debounce(foo,10000,false)</code>，用一个类似伪代码形式模拟步骤，来分析执行逻辑。</p><p>由于非立即执行时 <code>func.apply(this, arguments)</code>返回结果是异步的，所以只能返回 <code>undefined</code>。</p><h4 id="事件第一次触发"><a href="#事件第一次触发" class="headerlink" title="事件第一次触发"></a>事件第一次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最开始闭包拿到的timeoutID为undefined</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(<span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// 给timeoutID分配一个随机ID randomID1</span></span><br><span class="line">randomID1 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line"><span class="comment">// 由于setTimeout是异步的，只能返回undefined</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h4 id="事件第一次触发后-10s-内的第二次触发"><a href="#事件第一次触发后-10s-内的第二次触发" class="headerlink" title="事件第一次触发后 10s 内的第二次触发"></a>事件第一次触发后 10s 内的第二次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用第一次触发时分配的timeoutID（randomID1），清除掉了上次定义的setTimeout</span></span><br><span class="line"><span class="comment">// 导致第一次触发中的foo.apply(this, arguments)没有被执行</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(randomID1);</span><br><span class="line"><span class="comment">// 给timeoutID分配一个随机ID randomID2，又重新定义了10s延时</span></span><br><span class="line">randomID2 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line"><span class="comment">// 由于setTimeout是异步的，只能返回undefined</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 第二次触发后的10s时执行了func.apply(this, arguments)</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="事件第二次触发后-10s-外的第三次触发"><a href="#事件第二次触发后-10s-外的第三次触发" class="headerlink" title="事件第二次触发后 10s 外的第三次触发"></a>事件第二次触发后 10s 外的第三次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用第二次触发时分配的timeoutID（randomID2），清除掉了上次定义的setTimeout</span></span><br><span class="line"><span class="comment">// 但其实不清除的话也不会影响，因为上一次的func.apply(this, arguments)已经执行完了</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(randomID2);</span><br><span class="line"><span class="comment">// 给timeoutID分配一个随机ID randomID3，又重新定义了10s延时</span></span><br><span class="line">randomID3 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line"><span class="comment">// 由于setTimeout是异步的，只能返回undefined</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h3><p>当 <code>immediate</code> 为 <code>false</code> 的情况下，假设执行回调函数为 <code>debounce(foo,10000,true)</code>，继续使用伪代码形式模拟步骤。</p><p>立即执行的防抖函数中 <code>func.apply(this, arguments)</code>是同步执行的，可以拿到 <code>result</code>。</p><h4 id="事件第一次触发-1"><a href="#事件第一次触发-1" class="headerlink" title="事件第一次触发"></a>事件第一次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最开始闭包拿到的timeoutID为undefined</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(<span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// timeoutID为undefined，条件为真，立即执行result = func.apply(this, arguments)</span></span><br><span class="line"><span class="comment">// 并用闭包返回了结果executedResult1</span></span><br><span class="line">executedResult1 = foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">// 给timeoutID分配一个随机ID randomID1</span></span><br><span class="line">randomID1 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  randomID1 = <span class="literal">null</span>;</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><h4 id="事件第一次触发后-10s-内的第二次触发-1"><a href="#事件第一次触发后-10s-内的第二次触发-1" class="headerlink" title="事件第一次触发后 10s 内的第二次触发"></a>事件第一次触发后 10s 内的第二次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用第一次触发时分配的timeoutID（randomID1），清除掉了上次定义的setTimeout</span></span><br><span class="line"><span class="comment">// 导致第一次触发中的timeoutID = null语句没有被执行</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(randomID1);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// timeoutID为randomID1，条件为假，不执行result = func.apply(this, arguments)</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 给timeoutID分配一个随机ID randomID2，又重新定义了10s延时</span></span><br><span class="line">randomID2 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  randomID2 = <span class="literal">null</span>;</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 第二次触发后的10s时执行了timeoutID = null,让randomID2 = null</span></span><br></pre></td></tr></table></figure><h4 id="事件第二次触发后-10s-外的第三次触发-1"><a href="#事件第二次触发后-10s-外的第三次触发-1" class="headerlink" title="事件第二次触发后 10s 外的第三次触发"></a>事件第二次触发后 10s 外的第三次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用第二次触发时分配的timeoutID（randomID2），清除掉了上次定义的setTimeout</span></span><br><span class="line"><span class="comment">// 但其实不清除的话也不会影响，因为上一次的timeoutID = null语句已经执行完了</span></span><br><span class="line"><span class="built_in">window</span>.clearTimeout(randomID2);</span><br><span class="line"><span class="comment">// timeoutID为null，条件为真，立即执行result = func.apply(this, arguments)</span></span><br><span class="line"><span class="comment">// 并用闭包返回了结果executedResult3</span></span><br><span class="line">executedResult3 = foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">// 给timeoutID分配一个随机ID randomID3，又重新定义了10s延时</span></span><br><span class="line">randomID3 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  randomID3 = <span class="literal">null</span>;</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><h2 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h2><p>节流的代码如下，<code>throttle</code> 接受三个参数，分别是回调函数 <code>func</code>，延迟时间 <code>wait</code> 和是否开头或结尾执行的 <code>options</code>，同样给节流函数的 <code>return</code> 添加了一个取消防抖 <code>cancel</code> 的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 节流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>func 回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span>  </span>wait 等待时间 ms</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>options leading代表是否开头执行，tailing代表是否结尾执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">func, wait, options = &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">true</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutID;</span><br><span class="line">  <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">    <span class="keyword">let</span> remaining = wait - (now - previous);</span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timeoutID) &#123;</span><br><span class="line">        clearTimeout(timeoutID);</span><br><span class="line">        timeoutID = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      previous = now;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeoutID &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        timeoutID = <span class="literal">null</span>;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 取消节流</span></span><br><span class="line">  throttled.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeoutID);</span><br><span class="line">    previous = <span class="number">0</span>;</span><br><span class="line">    timeoutID = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样逐步分析节流函数的逻辑，按 <code>options</code> 参数可以分为<code>有头有尾</code>、<code>有头无尾</code>、<code>无头有尾</code>三种（<code>无头无尾</code>会有 bug）。</p><h3 id="有头有尾"><a href="#有头有尾" class="headerlink" title="有头有尾"></a>有头有尾</h3><p>假设执行回调函数为 <code>throttle(foo,10000,{ leading: true, trailing: true })</code>，继续使用伪代码形式模拟步骤。</p><p>一步步比较简洁，不再详细解释。</p><h4 id="事件第一次触发-2"><a href="#事件第一次触发-2" class="headerlink" title="事件第一次触发"></a>事件第一次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nowStamp1 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">let</span> remainingStamp1 = <span class="number">10000</span> - (nowStamp1 - <span class="number">0</span>);</span><br><span class="line"><span class="comment">// remainingStamp1&lt;0 ,为真</span></span><br><span class="line">previousStamp1 = nowStamp1;</span><br><span class="line">fool.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><h4 id="事件第一次触发后-10s-内的第二次触发-2"><a href="#事件第一次触发后-10s-内的第二次触发-2" class="headerlink" title="事件第一次触发后 10s 内的第二次触发"></a>事件第一次触发后 10s 内的第二次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nowStamp2 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">let</span> remainingStamp2 = <span class="number">10000</span> - (nowStamp2 - nowStamp1);</span><br><span class="line"><span class="comment">// timeoutID为undefined，trailing为true，继续执行</span></span><br><span class="line">timeoutID2 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  previousStamp2 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  timeoutID2 = <span class="literal">null</span>;</span><br><span class="line">  foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><h4 id="事件第一次触发后-10s-外且第二次触发-10-秒内的第三次触发"><a href="#事件第一次触发后-10s-外且第二次触发-10-秒内的第三次触发" class="headerlink" title="事件第一次触发后 10s 外且第二次触发 10 秒内的第三次触发"></a>事件第一次触发后 10s 外且第二次触发 10 秒内的第三次触发</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nowStamp3 = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">let</span> remainingStamp3 = <span class="number">10000</span> - (nowStamp3 - previousStamp1);</span><br><span class="line"><span class="comment">// remainingStamp3&lt;0 ,为真，继续执行</span></span><br><span class="line">clearTimeout(timeoutID2);</span><br><span class="line">timeoutID2 = <span class="literal">null</span>;</span><br><span class="line">previousStamp3 = nowStamp3;</span><br><span class="line">foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><h3 id="有头无尾"><a href="#有头无尾" class="headerlink" title="有头无尾"></a>有头无尾</h3><p>其实在<code>有头有尾</code>中已经把<code>有头无尾</code>解释的差不多，<code>有头无尾</code>利用的是<code>时间戳</code>来判断，不涉及到异步 <code>setTimeout</code>，单纯的有头无尾可以写成:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt; wait) &#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      pre = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无头有尾"><a href="#无头有尾" class="headerlink" title="无头有尾"></a>无头有尾</h3><p>同样，单纯的<code>无头有尾</code>利用的是纯异步 <code>setTimeout</code>，也可以简写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutID;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!timeoutID) &#123;</span><br><span class="line">      timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        timeoutID = <span class="literal">null</span>;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h2><p>借鉴一下<a href="https://blog.csdn.net/Polaris_tl/article/details/99300458" target="_blank" rel="external nofollow noopener noreferrer">Polaris_tl</a>博客中的展示方式，清晰的展示一下几种不同<code>防抖</code>和<code>节流</code>效果的对比：</p><p><img src="/posts/7c2664a3/%E6%95%88%E6%9E%9C%E5%AF%B9%E6%AF%94.gif" alt="效果对比"></p><center>不同防抖和节流的效果对比</center><p>展示代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>防抖和节流效果对比<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        font-family: 'Microsoft YaHei';</span><br><span class="line"><span class="css">        <span class="selector-tag">font-size</span>: 1<span class="selector-class">.2em</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">      div &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        background-color: lightcyan;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        margin-top: 4px;</span><br><span class="line">        margin-bottom: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">      p &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 30px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        background-color: pink;</span><br><span class="line">        margin: 2px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    防抖(非立即执行)：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1_1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    防抖(立即执行)：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1_2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    节流(有头有尾)：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d2_1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    节流(有头无尾)：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d2_2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    节流(无头有尾)：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d2_3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * @description: 防抖函数</span><br><span class="line"><span class="javascript">     * @param &#123;<span class="built_in">Function</span>&#125; func 回调函数</span></span><br><span class="line"><span class="javascript">     * @param &#123;<span class="built_in">Number</span>&#125;  wait 等待时间 ms</span></span><br><span class="line"><span class="javascript">     * @param &#123;<span class="built_in">Boolean</span>&#125; immediate 是否立即执行</span></span><br><span class="line"><span class="actionscript">     * @<span class="keyword">return</span>: result func返回的结果</span></span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> debounce = <span class="function"><span class="keyword">function</span><span class="params">(func, wait, immediate = false)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> timeoutID, result;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> debounced = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.clearTimeout(timeoutID);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (immediate === <span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!timeoutID) result = func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">          timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            timeoutID = <span class="literal">null</span>;</span></span><br><span class="line">          &#125;, wait);</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line">          &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> result;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 取消防抖</span></span></span><br><span class="line"><span class="actionscript">      debounced.cancel = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.clearTimeout(timeoutID);</span></span><br><span class="line"><span class="actionscript">        timeoutID = <span class="literal">null</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> debounced;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    /**</span><br><span class="line">     * @description: 节流函数</span><br><span class="line"><span class="javascript">     * @param &#123;<span class="built_in">Function</span>&#125; func 回调函数</span></span><br><span class="line"><span class="javascript">     * @param &#123;<span class="built_in">Number</span>&#125;  wait 等待时间 ms</span></span><br><span class="line"><span class="javascript">     * @param &#123;<span class="built_in">Object</span>&#125; options leading代表是否开头执行，tailing代表是否结尾执行</span></span><br><span class="line"><span class="actionscript">     * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> throttle = (</span></span><br><span class="line">      func,</span><br><span class="line">      wait,</span><br><span class="line"><span class="actionscript">      options = &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">true</span> &#125;</span></span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> timeoutID;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> previous = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> remaining = wait - (now - previous);</span></span><br><span class="line"><span class="handlebars"><span class="xml">        if (remaining <span class="tag">&lt;<span class="name">=</span> <span class="attr">0</span> || <span class="attr">remaining</span> &gt;</span> wait) &#123;</span></span></span><br><span class="line">          if (timeoutID) &#123;</span><br><span class="line">            clearTimeout(timeoutID);</span><br><span class="line"><span class="actionscript">            timeoutID = <span class="literal">null</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">          previous = now;</span><br><span class="line"><span class="javascript">          func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeoutID &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span></span><br><span class="line"><span class="javascript">          timeoutID = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="actionscript">            timeoutID = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line">          &#125;, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 取消节流</span></span></span><br><span class="line"><span class="actionscript">      throttled.cancel = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        clearTimeout(timeoutID);</span><br><span class="line">        previous = 0;</span><br><span class="line"><span class="actionscript">        timeoutID = <span class="literal">null</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> throttled;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="comment">//辅助函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> addElement = <span class="function"><span class="keyword">function</span><span class="params">(f)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> node = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span></span><br><span class="line">      f.appendChild(node);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//定义事件函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> debounce_fn1 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      addElement(d1_1);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> debounce_fn2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      addElement(d1_2);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> throttle_fn1 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      addElement(d2_1);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> throttle_fn2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      addElement(d2_2);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> throttle_fn3 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">      addElement(d2_3);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//注册事件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">    body.addEventListener(<span class="string">'mousemove'</span>, debounce(debounce_fn1, <span class="number">500</span>, <span class="literal">false</span>));</span></span><br><span class="line"><span class="actionscript">    body.addEventListener(<span class="string">'mousemove'</span>, debounce(debounce_fn2, <span class="number">500</span>, <span class="literal">true</span>));</span></span><br><span class="line">    body.addEventListener(</span><br><span class="line"><span class="actionscript">      <span class="string">'mousemove'</span>,</span></span><br><span class="line"><span class="actionscript">      throttle(throttle_fn1, <span class="number">500</span>, &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">true</span> &#125;)</span></span><br><span class="line">    );</span><br><span class="line">    body.addEventListener(</span><br><span class="line"><span class="actionscript">      <span class="string">'mousemove'</span>,</span></span><br><span class="line"><span class="actionscript">      throttle(throttle_fn2, <span class="number">500</span>, &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">false</span> &#125;)</span></span><br><span class="line">    );</span><br><span class="line">    body.addEventListener(</span><br><span class="line"><span class="actionscript">      <span class="string">'mousemove'</span>,</span></span><br><span class="line"><span class="actionscript">      throttle(throttle_fn3, <span class="number">500</span>, &#123; leading: <span class="literal">false</span>, trailing: <span class="literal">true</span> &#125;)</span></span><br><span class="line">    );</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
            <tag> 立即执行 </tag>
            
            <tag> 非立即执行 </tag>
            
            <tag> 有头有尾 </tag>
            
            <tag> 有头无尾 </tag>
            
            <tag> 无头有尾 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMA-262规范第6节中Specification Types翻译</title>
      <link href="/posts/28742d18.html"/>
      <url>/posts/28742d18.html</url>
      
        <content type="html"><![CDATA[<p>前面的文章—<a href="https://linjingyi.cn/posts/be1c11d1.html">ECMA-262 规范第 6 节中 Language Types 翻译</a>—翻译了 ECMA-262 规范的 ECMAScript Data Types and Values 章节的前半部分 Language Types，下面翻译后半部分 Specification Types。</p><a id="more"></a><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><h3 id="规范类型"><a href="#规范类型" class="headerlink" title="规范类型"></a>规范类型</h3><p>规范类型对应于算法中用于描述 ECMAScript 语言构造和 ECMAScript 语言类型的语义的元值。 规范类型包括 Reference、List、Completion、 Property Descriptor、 Lexical Environment、Environment Record 和 Data Block。 规范类型值是人造产物，不一定对应于 ECMAScript 实现中的任何特定实体。 规范类型值可以用来描述 ECMAScript 表达式计算的中间结果，但是这些值不能被存储为对象的属性或 ECMAScript 语言变量的值。</p><h4 id="List-和-Record-规范类型"><a href="#List-和-Record-规范类型" class="headerlink" title="List 和 Record 规范类型"></a>List 和 Record 规范类型</h4><p>List 类型用于解释在 new 表达式、函数调用和其他需要简单有序值列表的算法中对参数列表(参见 12.3.6)的求值。 List 类型的值只是包含单个值的列表元素的有序序列。 这些序列可以是任意长度的。 可以使用 0-origin 索引随机访问列表的元素。 为了计数方便，可以使用类似数组的语法来访问 List 元素。 例如，arguments[2]是表示 List 参数的第 3 个元素的简写。</p><p>本规范中为了符号更方便，可以使用语法表示一个新的 List 值。 例如，« 1, 2 » 定义了一个 List 值，它有两个元素，每个元素都被初始化为一个特定的值。 一个新的空 List 可以表示为« »。</p><p>Record 类型用于描述本规范算法中的数据聚合。 Record 类型值由一个或多个命名字段组成。 每个字段的值要么是 ECMAScript 值，要么是由与 Record 类型关联的名称表示的抽象值。 字段名总是用双括号括起来，例如[[Value]]。</p><p>在本规范中，为了符号更方便，可以使用类似对象的语法来表示 Record 值。 例如，{[[ Field1]] : 42，[[ Field2]] : false，[[ Field3]] : empty }定义了一个 Record 值，该值有三个字段，每个字段都被初始化为一个特定的值。 字段名称顺序不重要。 任何未显式列出的字段都被认为是不存在的。</p><p>在规范文本和算法中，点符号可用于指代 record 值的特定字段。 例如，如果 R 是上一段中显示的 record，那么 R.[[Field2]]就是“名为[[Field2]]的 R 字段”的简写。</p><p>常用的 Record 字段组合的模式可以命名，该名称可以用作文本 Record 值的前缀，用于标识所描述的特定类型的聚合。 例如: PropertyDescriptor {[[ Value ]] : 42，[[[ Writable ]]] : false，[[ Configurable ]] : true }。</p><h4 id="Set-和-Relation-规范类型"><a href="#Set-和-Relation-规范类型" class="headerlink" title="Set 和 Relation 规范类型"></a>Set 和 Relation 规范类型</h4><p>Set 类型用于解释内存模型中使用的无序元素集合。 Set 类型的值是元素的简单集合，其中任何元素都不会出现超过一次。 元素可以添加到Sets中，也可以从Sets中移除。 Sets可以相互合并、交叉或减去。</p><p>Relation类型用于解释Sets上的约束。 Relation 类型的值是有序对值（来自值域）的Sets。 例如，关于事件的 Relation 是一组事件的有序对。 对于一个Relation R 和的两个值 a 和 b（来自R的值域），a R b 简写为“有序对(a，b)是 R 的一个成员”。 当一个Relation是满足某些条件的最少Relation时，它对这些条件是最小的。</p><p>严格半序是满足下列条件的Relation值 R。</p><ul><li>对于 R 域中的所有 a、 b 和 c:<ul><li>不是a R a的情况, 并且</li><li>如果a R b 且b R c, 则a R c.</li></ul></li></ul><blockquote><p>注意 1：上述两个性质按顺序称为非自反性和传递性。</p></blockquote><p>严格全序是满足下列条件的Relation值 R。</p><ul><li>对于 R 域中的所有 a、 b 和 c:<ul><li>a 等同于b 或者说是 a R b 或b R a, 并且</li><li>不是a R a的情况 ，并且</li><li>如果a R b 且b R c，那么a R c.</li></ul></li></ul><blockquote><p>注意 2：上述三个性质依次称为总体性、非自反性和传递性。</p></blockquote><h4 id="Completion-Record-规范类型"><a href="#Completion-Record-规范类型" class="headerlink" title="Completion Record 规范类型"></a>Completion Record 规范类型</h4><p>Completion 类型是一个 Record，在执行非本地控制权转移时用于解释执行值的运行时传递和控制流，例如statements的行为(break<code>,</code>continue<code>,</code>return和throw)。</p><p> Completion 类型的值是 Record 值，其字段由表8定义。 这些值称为Completion Records。 </p><center>表 8: Completion Record 字段</center><table><thead><tr><th>Field Name</th><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>[[Type]]</td><td>normal, break, continue, return或throw</td><td>发生的completion的类型</td></tr><tr><td>[[Value]]</td><td>任意 <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-language-types" target="_blank" rel="external nofollow noopener noreferrer">ECMAScript 语言类型值</a> 或 空值</td><td>产生的值</td></tr><tr><td>[[Target]]</td><td>任意ECMAScript String类型值 或空值</td><td>定向控制传输的目标label。</td></tr></tbody></table><p>“abrupt completion”这个术语指的是任何带有[[Type]]值的非正常完成。</p><h5 id="Await"><a href="#Await" class="headerlink" title="Await"></a>Await</h5><p>下述的算法步骤：</p><ol><li>Let completion be <a href="http://www.ecma-international.org/ecma-262/#await" target="_blank" rel="external nofollow noopener noreferrer">Await</a>(value).</li></ol><p>等同于下述算法步骤：</p><ol><li>Let asyncContext be the <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li>Let promise be ? <a href="http://www.ecma-international.org/ecma-262/#sec-promise-resolve" target="_blank" rel="external nofollow noopener noreferrer">PromiseResolve</a>(<a href="http://www.ecma-international.org/ecma-262/#sec-promise-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Promise%</a>, « value »).</li><li>Let stepsFulfilled be the algorithm steps defined in <a href="http://www.ecma-international.org/ecma-262/#await-fulfilled" target="_blank" rel="external nofollow noopener noreferrer">Await Fulfilled Functions</a>.</li><li>Let onFulfilled be <a href="http://www.ecma-international.org/ecma-262/#sec-createbuiltinfunction" target="_blank" rel="external nofollow noopener noreferrer">CreateBuiltinFunction</a>(stepsFulfilled, « [[AsyncContext]] »).</li><li>Set onFulfilled.[[AsyncContext]] to asyncContext.</li><li>Let stepsRejected be the algorithm steps defined in <a href="http://www.ecma-international.org/ecma-262/#await-rejected" target="_blank" rel="external nofollow noopener noreferrer">Await Rejected Functions</a>.</li><li>Let onRejected be <a href="http://www.ecma-international.org/ecma-262/#sec-createbuiltinfunction" target="_blank" rel="external nofollow noopener noreferrer">CreateBuiltinFunction</a>(stepsRejected, « [[AsyncContext]] »).</li><li>Set onRejected.[[AsyncContext]] to asyncContext.</li><li>Perform ! <a href="http://www.ecma-international.org/ecma-262/#sec-performpromisethen" target="_blank" rel="external nofollow noopener noreferrer">PerformPromiseThen</a>(promise, onFulfilled, onRejected).</li><li>Remove asyncContext from the <a href="http://www.ecma-international.org/ecma-262/#execution-context-stack" target="_blank" rel="external nofollow noopener noreferrer">execution context stack</a> and restore the <a href="http://www.ecma-international.org/ecma-262/#sec-execution-contexts" target="_blank" rel="external nofollow noopener noreferrer">execution context</a> that is at the top of the <a href="http://www.ecma-international.org/ecma-262/#execution-context-stack" target="_blank" rel="external nofollow noopener noreferrer">execution context stack</a> as the <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li>Set the code evaluation state of asyncContext such that when evaluation is resumed with a <a href="http://www.ecma-international.org/ecma-262/#sec-completion-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Completion</a> completion, the following steps of the algorithm that invoked <a href="http://www.ecma-international.org/ecma-262/#await" target="_blank" rel="external nofollow noopener noreferrer">Await</a> will be performed, with completion available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of asyncContext.</li></ol><p>其中，除了completion之外，上述步骤中的所有变量都是临时的，只有在与 Await 相关的步骤中变量才可见。</p><blockquote><p>注意：可以与? 和! 前缀结合使用，例如</p><ol><li>Let result be ? <a href="http://www.ecma-international.org/ecma-262/#await" target="_blank" rel="external nofollow noopener noreferrer">Await</a>(value).</li></ol><p>与下述步骤等同：</p><ol><li>Let result be <a href="http://www.ecma-international.org/ecma-262/#await" target="_blank" rel="external nofollow noopener noreferrer">Await</a>(value).</li><li><a href="http://www.ecma-international.org/ecma-262/#sec-returnifabrupt" target="_blank" rel="external nofollow noopener noreferrer">ReturnIfAbrupt</a>(result).</li></ol></blockquote><h6 id="Await-Fulfilled-函数"><a href="#Await-Fulfilled-函数" class="headerlink" title="Await Fulfilled 函数"></a>Await Fulfilled 函数</h6><p>Await fulfilled 函数是一个匿名的内置函数，它作为 Await 规范工具的一部分用于将promise fulfillment值作为正常completion交付给caller。 每个Await fulfilled的函数都有一个[[ AsyncContext ]]内部插槽。 </p><p>当使用参数值调用Await fulfilled的函数时，将采取以下步骤:</p><ol><li>Let F be the <a href="http://www.ecma-international.org/ecma-262/#active-function-object" target="_blank" rel="external nofollow noopener noreferrer">active function object</a>.</li><li>Let asyncContext be F.[[AsyncContext]].</li><li>Let prevContext be the <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li><a href="http://www.ecma-international.org/ecma-262/#sec-suspend" target="_blank" rel="external nofollow noopener noreferrer">Suspend</a> prevContext.</li><li>Push asyncContext onto the <a href="http://www.ecma-international.org/ecma-262/#execution-context-stack" target="_blank" rel="external nofollow noopener noreferrer">execution context stack</a>; asyncContext is now the <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li>Resume the suspended evaluation of asyncContext using <a href="http://www.ecma-international.org/ecma-262/#sec-normalcompletion" target="_blank" rel="external nofollow noopener noreferrer">NormalCompletion</a>(value) as the result of the operation that suspended it.</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: When we reach this step, asyncContext has already been removed from the <a href="http://www.ecma-international.org/ecma-262/#execution-context-stack" target="_blank" rel="external nofollow noopener noreferrer">execution context stack</a> and prevContext is the currently <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li>Return undefined.</li></ol><p>Await fulfilled函数的“ length”属性值是1。</p><h6 id="Await-Rejected-函数"><a href="#Await-Rejected-函数" class="headerlink" title="Await Rejected 函数"></a>Await Rejected 函数</h6><p>Await rejected 函数是一个匿名的内置函数，用作 Await 规范工具的一部分，将promise rejection的reason作为一个abrupt throw completion交付给调用者。 每个 Await rejected 函数都有一个[[ AsyncContext ]]内部插槽。</p><p>当使用参数reason调用 Await rejected 函数时，将采取以下步骤:</p><ol><li>Let F be the <a href="http://www.ecma-international.org/ecma-262/#active-function-object" target="_blank" rel="external nofollow noopener noreferrer">active function object</a>.</li><li>Let asyncContext be F.[[AsyncContext]].</li><li>Let prevContext be the <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li><a href="http://www.ecma-international.org/ecma-262/#sec-suspend" target="_blank" rel="external nofollow noopener noreferrer">Suspend</a> prevContext.</li><li>Push asyncContext onto the <a href="http://www.ecma-international.org/ecma-262/#execution-context-stack" target="_blank" rel="external nofollow noopener noreferrer">execution context stack</a>; asyncContext is now the <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li>Resume the suspended evaluation of asyncContext using <a href="http://www.ecma-international.org/ecma-262/#sec-throwcompletion" target="_blank" rel="external nofollow noopener noreferrer">ThrowCompletion</a>(reason) as the result of the operation that suspended it.</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: When we reach this step, asyncContext has already been removed from the <a href="http://www.ecma-international.org/ecma-262/#execution-context-stack" target="_blank" rel="external nofollow noopener noreferrer">execution context stack</a> and prevContext is the currently <a href="http://www.ecma-international.org/ecma-262/#running-execution-context" target="_blank" rel="external nofollow noopener noreferrer">running execution context</a>.</li><li>Return undefined.</li></ol><p>Await rejected函数的“length”属性值是1。</p><h5 id="NormalCompletion"><a href="#NormalCompletion" class="headerlink" title="NormalCompletion"></a>NormalCompletion</h5><p>抽象操作 NormalCompletion 只有一个参数，例如:</p><ol><li>Return <a href="http://www.ecma-international.org/ecma-262/#sec-normalcompletion" target="_blank" rel="external nofollow noopener noreferrer">NormalCompletion</a>(argument).</li></ol><p>是如下定义的简写形式：</p><ol><li>Return <a href="http://www.ecma-international.org/ecma-262/#sec-completion-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Completion</a> { [[Type]]: normal, [[Value]]: argument, [[Target]]: empty }.</li></ol><h5 id="ThrowCompletion"><a href="#ThrowCompletion" class="headerlink" title="ThrowCompletion"></a>ThrowCompletion</h5><p>带有一个参数的抽象操作 ThrowCompletion，例如:</p><ol><li>Return <a href="http://www.ecma-international.org/ecma-262/#sec-throwcompletion" target="_blank" rel="external nofollow noopener noreferrer">ThrowCompletion</a>(argument).</li></ol><p>是如下定义的简写形式：</p><ol><li>Return <a href="http://www.ecma-international.org/ecma-262/#sec-completion-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Completion</a> { [[Type]]: throw, [[Value]]: argument, [[Target]]: empty }.</li></ol><h5 id="UpdateEmpty-completionRecord-value"><a href="#UpdateEmpty-completionRecord-value" class="headerlink" title="UpdateEmpty ( completionRecord, value )"></a>UpdateEmpty ( completionRecord, value )</h5><p>带completionRecord 和 value参数的 UpdateEmpty 抽象操作执行以下步骤:</p><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: If completionRecord.[[Type]] is either return or throw, then completionRecord.[[Value]] is not empty.</li><li>If completionRecord.[[Value]] is not empty, return <a href="http://www.ecma-international.org/ecma-262/#sec-completion-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Completion</a>(completionRecord).</li><li>Return <a href="http://www.ecma-international.org/ecma-262/#sec-completion-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Completion</a> { [[Type]]: completionRecord.[[Type]], [[Value]]: value, [[Target]]: completionRecord.[[Target]] }.</li></ol><h4 id="Reference-规范类型"><a href="#Reference-规范类型" class="headerlink" title="Reference 规范类型"></a>Reference 规范类型</h4><blockquote><p>注意：Reference 类型用于解释诸如 delete、 typeof、赋值操作符、 super 关键字和其他语言特性等操作符的行为。 例如，赋值的左操作数应该产生引用。</p></blockquote><p>Reference 是已解析的名称或属性绑定。 Reference 由三个组件组成: 基础值组件、引用名称组件和布尔值严格引用标志。 基础值组件是undefined、 Object、 Boolean、 String、 Symbol、 Number 或 Environment Record。 undefined的基础值组件表示Reference无法解析为绑定。 引用名称组件是 String 或 Symbol 值。 </p><p>Super Reference 是一个 Reference，用于表示使用 Super 关键字表示的名称绑定。Super Reference有一个附加的 thisValue 组件，它的基础值组件永远不会是 Environment Record。 </p><p>本规范使用下列抽象操作对reference 进行操作:</p><h5 id="GetBase-V"><a href="#GetBase-V" class="headerlink" title="GetBase ( V )"></a>GetBase ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.</li><li>Return the base value component of V.</li></ol><h5 id="GetReferencedName-V"><a href="#GetReferencedName-V" class="headerlink" title="GetReferencedName ( V )"></a>GetReferencedName ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.</li><li>Return the referenced name component of V.</li></ol><h5 id="IsStrictReference-V"><a href="#IsStrictReference-V" class="headerlink" title="IsStrictReference ( V )"></a>IsStrictReference ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.Return the strict reference flag of V.</li></ol><h5 id="HasPrimitiveBase-V"><a href="#HasPrimitiveBase-V" class="headerlink" title="HasPrimitiveBase ( V )"></a>HasPrimitiveBase ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V’s base value component) is Boolean, String, Symbol, or Number, return true; otherwise return false.</li></ol><h5 id="IsPropertyReference-V"><a href="#IsPropertyReference-V" class="headerlink" title="IsPropertyReference ( V )"></a>IsPropertyReference ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.</li><li>If either the base value component of V is an Object or <a href="http://www.ecma-international.org/ecma-262/#sec-hasprimitivebase" target="_blank" rel="external nofollow noopener noreferrer">HasPrimitiveBase</a>(V) is true, return true; otherwise return false.</li></ol><h5 id="IsUnresolvableReference-V"><a href="#IsUnresolvableReference-V" class="headerlink" title="IsUnresolvableReference ( V )"></a>IsUnresolvableReference ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.</li><li>If the base value component of V is undefined, return true; otherwise return false.</li></ol><h5 id="IsSuperReference-V"><a href="#IsSuperReference-V" class="headerlink" title="IsSuperReference ( V )"></a>IsSuperReference ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.</li><li>If V has a thisValue component, return true; otherwise return false.</li></ol><h5 id="GetValue-V"><a href="#GetValue-V" class="headerlink" title="GetValue ( V )"></a>GetValue ( V )</h5><ol><li><p><a href="http://www.ecma-international.org/ecma-262/#sec-returnifabrupt" target="_blank" rel="external nofollow noopener noreferrer">ReturnIfAbrupt</a>(V).</p></li><li><p>If <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is not <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>, return V.</p></li><li><p>Let base be <a href="http://www.ecma-international.org/ecma-262/#sec-getbase" target="_blank" rel="external nofollow noopener noreferrer">GetBase</a>(V).</p></li><li><p>If <a href="http://www.ecma-international.org/ecma-262/#sec-isunresolvablereference" target="_blank" rel="external nofollow noopener noreferrer">IsUnresolvableReference</a>(V) is true, throw a ReferenceError exception.</p></li><li><p>If[IsPropertyReference(<a href="http://www.ecma-international.org/ecma-262/#sec-ispropertyreference)(V)" target="_blank" rel="external nofollow noopener noreferrer">http://www.ecma-international.org/ecma-262/#sec-ispropertyreference)(V)</a> is true, then</p><p>If<a href="http://www.ecma-international.org/ecma-262/#sec-hasprimitivebase" target="_blank" rel="external nofollow noopener noreferrer">HasPrimitiveBase</a>(V) is true, then</p><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: In this case, base will never be undefined or null.</li><li>Set base to ! <a href="http://www.ecma-international.org/ecma-262/#sec-toobject" target="_blank" rel="external nofollow noopener noreferrer">ToObject</a>(base).</li><li>Return ? base.<a href="[GetReferencedName](http://www.ecma-international.org/ecma-262/#sec-getreferencedname)(V">[Get]</a>, <a href="http://www.ecma-international.org/ecma-262/#sec-getthisvalue" target="_blank" rel="external nofollow noopener noreferrer">GetThisValue</a>(V)).</li></ol></li><li><p>Else base must be an <a href="http://www.ecma-international.org/ecma-262/#sec-environment-records" target="_blank" rel="external nofollow noopener noreferrer">Environment Record</a>,</p><ol><li>Return ? base.GetBindingValue(<a href="http://www.ecma-international.org/ecma-262/#sec-getreferencedname" target="_blank" rel="external nofollow noopener noreferrer">GetReferencedName</a>(V), <a href="http://www.ecma-international.org/ecma-262/#sec-isstrictreference" target="_blank" rel="external nofollow noopener noreferrer">IsStrictReference</a>(V)) (see <a href="http://www.ecma-international.org/ecma-262/#sec-environment-records" target="_blank" rel="external nofollow noopener noreferrer">8.1.1</a>).</li></ol></li></ol><h5 id="PutValue-V-W"><a href="#PutValue-V-W" class="headerlink" title="PutValue ( V, W )"></a>PutValue ( V, W )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#sec-returnifabrupt" target="_blank" rel="external nofollow noopener noreferrer">ReturnIfAbrupt</a>(V).</li><li><a href="http://www.ecma-international.org/ecma-262/#sec-returnifabrupt" target="_blank" rel="external nofollow noopener noreferrer">ReturnIfAbrupt</a>(W).</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is not <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>, throw a ReferenceError exception.</li><li>Let base be <a href="http://www.ecma-international.org/ecma-262/#sec-getbase" target="_blank" rel="external nofollow noopener noreferrer">GetBase</a>(V).</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-isunresolvablereference" target="_blank" rel="external nofollow noopener noreferrer">IsUnresolvableReference</a>(V) is true, then<ol><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-isstrictreference" target="_blank" rel="external nofollow noopener noreferrer">IsStrictReference</a>(V) is true, then<ol><li>Throw a ReferenceError exception.</li></ol></li><li>Let globalObj be <a href="http://www.ecma-international.org/ecma-262/#sec-getglobalobject" target="_blank" rel="external nofollow noopener noreferrer">GetGlobalObject</a>().</li><li>Return ? <a href="http://www.ecma-international.org/ecma-262/#sec-set-o-p-v-throw" target="_blank" rel="external nofollow noopener noreferrer">Set</a>(globalObj, <a href="http://www.ecma-international.org/ecma-262/#sec-getreferencedname" target="_blank" rel="external nofollow noopener noreferrer">GetReferencedName</a>(V), W, false).</li></ol></li><li>Else if <a href="http://www.ecma-international.org/ecma-262/#sec-ispropertyreference" target="_blank" rel="external nofollow noopener noreferrer">IsPropertyReference</a>(V) is true, then<ol><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-hasprimitivebase" target="_blank" rel="external nofollow noopener noreferrer">HasPrimitiveBase</a>(V) is true, then<ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: In this case, base will never be undefined or null.</li><li>Set base to ! <a href="http://www.ecma-international.org/ecma-262/#sec-toobject" target="_blank" rel="external nofollow noopener noreferrer">ToObject</a>(base).</li></ol></li><li>Let succeeded be ? base.<a href="[GetReferencedName](http://www.ecma-international.org/ecma-262/#sec-getreferencedname)(V">[Set]</a>, W, <a href="http://www.ecma-international.org/ecma-262/#sec-getthisvalue" target="_blank" rel="external nofollow noopener noreferrer">GetThisValue</a>(V)).</li><li>If succeeded is false and <a href="http://www.ecma-international.org/ecma-262/#sec-isstrictreference" target="_blank" rel="external nofollow noopener noreferrer">IsStrictReference</a>(V) is true, throw a TypeError exception.</li><li>Return.</li></ol></li><li>Else base must be an <a href="http://www.ecma-international.org/ecma-262/#sec-environment-records" target="_blank" rel="external nofollow noopener noreferrer">Environment Record</a>,<ol><li>Return ? base.SetMutableBinding(<a href="http://www.ecma-international.org/ecma-262/#sec-getreferencedname" target="_blank" rel="external nofollow noopener noreferrer">GetReferencedName</a>(V), W, <a href="http://www.ecma-international.org/ecma-262/#sec-isstrictreference" target="_blank" rel="external nofollow noopener noreferrer">IsStrictReference</a>(V)) (see <a href="http://www.ecma-international.org/ecma-262/#sec-environment-records" target="_blank" rel="external nofollow noopener noreferrer">8.1.1</a>).</li></ol></li></ol><blockquote><p> 注意：在上述算法和普通对象[[Set]]内部方法之外不能访问在步骤6.1.2中可能创建的对象。 实现时可以选择避免实际创建该对象。</p></blockquote><h5 id="GetThisValue-V"><a href="#GetThisValue-V" class="headerlink" title="GetThisValue ( V )"></a>GetThisValue ( V )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ispropertyreference" target="_blank" rel="external nofollow noopener noreferrer">IsPropertyReference</a>(V) is true.</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-issuperreference" target="_blank" rel="external nofollow noopener noreferrer">IsSuperReference</a>(V) is true, then<ol><li>Return the value of the thisValue component of the reference V.</li></ol></li><li>Return <a href="http://www.ecma-international.org/ecma-262/#sec-getbase" target="_blank" rel="external nofollow noopener noreferrer">GetBase</a>(V).</li></ol><h5 id="InitializeReferencedBinding-V-W"><a href="#InitializeReferencedBinding-V-W" class="headerlink" title="InitializeReferencedBinding ( V, W )"></a>InitializeReferencedBinding ( V, W )</h5><ol><li><a href="http://www.ecma-international.org/ecma-262/#sec-returnifabrupt" target="_blank" rel="external nofollow noopener noreferrer">ReturnIfAbrupt</a>(V).</li><li><a href="http://www.ecma-international.org/ecma-262/#sec-returnifabrupt" target="_blank" rel="external nofollow noopener noreferrer">ReturnIfAbrupt</a>(W).</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(V) is <a href="http://www.ecma-international.org/ecma-262/#sec-reference-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Reference</a>.</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: <a href="http://www.ecma-international.org/ecma-262/#sec-isunresolvablereference" target="_blank" rel="external nofollow noopener noreferrer">IsUnresolvableReference</a>(V) is false.</li><li>Let base be <a href="http://www.ecma-international.org/ecma-262/#sec-getbase" target="_blank" rel="external nofollow noopener noreferrer">GetBase</a>(V).</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: base is an <a href="http://www.ecma-international.org/ecma-262/#sec-environment-records" target="_blank" rel="external nofollow noopener noreferrer">Environment Record</a>.</li><li>Return base.InitializeBinding(<a href="http://www.ecma-international.org/ecma-262/#sec-getreferencedname" target="_blank" rel="external nofollow noopener noreferrer">GetReferencedName</a>(V), W).</li></ol><h4 id="属性描述符规范类型"><a href="#属性描述符规范类型" class="headerlink" title="属性描述符规范类型"></a>属性描述符规范类型</h4><p>属性描述符类型用于解释对象 property 的attributes的操作和具体化。 属性描述符类型的值为Record。 每个字段的名称是一个属性名，其值是在6.1.7.1中指定的对应属性值。 此外，任何字段都可以存在或不存在。 此规范中用于标记属性描述符records文本描述的模式名称是“ PropertyDescriptor”。</p><p>根据具体字段的存在或使用，属性描述符值可以进一步分类为数据属性描述符和访问器属性描述符。 数据属性描述符包含任何名为[[[Value]]或[[Writable]]的字段。 访问器属性描述符包含任何名为[[ Get ]]或[[ Set ]]的字段。 任何属性描述符都可以有名为[[Enumerable]和[[Configurable]]的字段。 属性描述符值不能既是数据属性描述符又是访问器属性描述符; 但是，它可能既不是数据属性描述符也不是访问器属性描述符。 泛型属性描述符是既不是数据属性描述符也不是访问器属性描述符。 完全填充的属性描述符包含与表2或表3中定义的property attributes相对应的所有字段。</p><p>本规范中使用以下抽象操作对属性描述符值进行操作:</p><h5 id="IsAccessorDescriptor-Desc"><a href="#IsAccessorDescriptor-Desc" class="headerlink" title="IsAccessorDescriptor ( Desc )"></a>IsAccessorDescriptor ( Desc )</h5><p>当使用属性描述符 Desc 调用抽象操作 IsAccessorDescriptor 时，将执行以下步骤:</p><ol><li>If Desc is undefined, return false.</li><li>If both Desc.[[Get]] and Desc.[[Set]] are absent, return false.</li><li>Return true.</li></ol><h5 id="IsDataDescriptor-Desc"><a href="#IsDataDescriptor-Desc" class="headerlink" title="IsDataDescriptor ( Desc )"></a>IsDataDescriptor ( Desc )</h5><p>当使用属性描述符 Desc 调用抽象操作 IsDataDescriptor时，将执行以下步骤:</p><ol><li>If Desc is undefined, return false.</li><li>If both Desc.[[Value]] and Desc.[[Writable]] are absent, return false.</li><li>Return true.</li></ol><h5 id="IsGenericDescriptor-Desc"><a href="#IsGenericDescriptor-Desc" class="headerlink" title="IsGenericDescriptor ( Desc )"></a>IsGenericDescriptor ( Desc )</h5><p>当使用属性描述符 Desc 调用抽象操作 IsGenericDescriptor 时，将执行以下步骤:</p><ol><li>If Desc is undefined, return false.</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-isaccessordescriptor" target="_blank" rel="external nofollow noopener noreferrer">IsAccessorDescriptor</a>(Desc) and <a href="http://www.ecma-international.org/ecma-262/#sec-isdatadescriptor" target="_blank" rel="external nofollow noopener noreferrer">IsDataDescriptor</a>(Desc) are both false, return true.</li><li>Return false.</li></ol><h5 id="FromPropertyDescriptor-Desc"><a href="#FromPropertyDescriptor-Desc" class="headerlink" title="FromPropertyDescriptor ( Desc )"></a>FromPropertyDescriptor ( Desc )</h5><p>当使用属性描述符 Desc 调用抽象操作 FromPropertyDescriptor 时，将执行以下步骤:</p><ol><li>If Desc is undefined, return undefined.</li><li>Let obj be <a href="http://www.ecma-international.org/ecma-262/#sec-objectcreate" target="_blank" rel="external nofollow noopener noreferrer">ObjectCreate</a>(<a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-object-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%ObjectPrototype%</a>).</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: obj is an extensible ordinary object with no own properties.</li><li>If Desc has a [[Value]] field, then<ol><li>Perform <a href="http://www.ecma-international.org/ecma-262/#sec-createdataproperty" target="_blank" rel="external nofollow noopener noreferrer">CreateDataProperty</a>(obj, <code>&quot;value&quot;</code>, Desc.[[Value]]).</li></ol></li><li>If Desc has a [[Writable]] field, then<ol><li>Perform <a href="http://www.ecma-international.org/ecma-262/#sec-createdataproperty" target="_blank" rel="external nofollow noopener noreferrer">CreateDataProperty</a>(obj, <code>&quot;writable&quot;</code>, Desc.[[Writable]]).</li></ol></li><li>If Desc has a [[Get]] field, then<ol><li>Perform <a href="http://www.ecma-international.org/ecma-262/#sec-createdataproperty" target="_blank" rel="external nofollow noopener noreferrer">CreateDataProperty</a>(obj, <code>&quot;get&quot;</code>, Desc.[[Get]]).</li></ol></li><li>If Desc has a [[Set]] field, then<ol><li>Perform <a href="http://www.ecma-international.org/ecma-262/#sec-createdataproperty" target="_blank" rel="external nofollow noopener noreferrer">CreateDataProperty</a>(obj, <code>&quot;set&quot;</code>, Desc.[[Set]]).</li></ol></li><li>If Desc has an [[Enumerable]] field, then<ol><li>Perform <a href="http://www.ecma-international.org/ecma-262/#sec-createdataproperty" target="_blank" rel="external nofollow noopener noreferrer">CreateDataProperty</a>(obj, <code>&quot;enumerable&quot;</code>, Desc.[[Enumerable]]).</li></ol></li><li>If Desc has a [[Configurable]] field, then<ol><li>Perform <a href="http://www.ecma-international.org/ecma-262/#sec-createdataproperty" target="_blank" rel="external nofollow noopener noreferrer">CreateDataProperty</a>(obj, <code>&quot;configurable&quot;</code>, Desc.[[Configurable]]).</li></ol></li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: All of the above <a href="http://www.ecma-international.org/ecma-262/#sec-createdataproperty" target="_blank" rel="external nofollow noopener noreferrer">CreateDataProperty</a> operations return true.</li><li>Return obj.</li></ol><h5 id="ToPropertyDescriptor-Obj"><a href="#ToPropertyDescriptor-Obj" class="headerlink" title="ToPropertyDescriptor ( Obj )"></a>ToPropertyDescriptor ( Obj )</h5><p>当使用对象 Obj 调用抽象操作 ToPropertyDescriptor 时，将执行以下步骤:</p><ol><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">Type</a>(Obj) is not Object, throw a TypeError exception.</li><li>Let desc be a new <a href="http://www.ecma-international.org/ecma-262/#sec-property-descriptor-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Property Descriptor</a> that initially has no fields.</li><li>Let hasEnumerable be ? <a href="http://www.ecma-international.org/ecma-262/#sec-hasproperty" target="_blank" rel="external nofollow noopener noreferrer">HasProperty</a>(Obj, <code>&quot;enumerable&quot;</code>).</li><li>If hasEnumerable is true, then<ol><li>Let enumerable be <a href="http://www.ecma-international.org/ecma-262/#sec-toboolean" target="_blank" rel="external nofollow noopener noreferrer">ToBoolean</a>(? <a href="http://www.ecma-international.org/ecma-262/#sec-get-o-p" target="_blank" rel="external nofollow noopener noreferrer">Get</a>(Obj, <code>&quot;enumerable&quot;</code>)).</li><li>Set desc.[[Enumerable]] to enumerable.</li></ol></li><li>Let hasConfigurable be ? <a href="http://www.ecma-international.org/ecma-262/#sec-hasproperty" target="_blank" rel="external nofollow noopener noreferrer">HasProperty</a>(Obj, <code>&quot;configurable&quot;</code>).</li><li>If hasConfigurable is true, then<ol><li>Let configurable be <a href="http://www.ecma-international.org/ecma-262/#sec-toboolean" target="_blank" rel="external nofollow noopener noreferrer">ToBoolean</a>(? <a href="http://www.ecma-international.org/ecma-262/#sec-get-o-p" target="_blank" rel="external nofollow noopener noreferrer">Get</a>(Obj, <code>&quot;configurable&quot;</code>)).</li><li>Set desc.[[Configurable]] to configurable.</li></ol></li><li>Let hasValue be ? <a href="http://www.ecma-international.org/ecma-262/#sec-hasproperty" target="_blank" rel="external nofollow noopener noreferrer">HasProperty</a>(Obj, <code>&quot;value&quot;</code>).</li><li>If hasValue is true, then<ol><li>Let value be ? <a href="http://www.ecma-international.org/ecma-262/#sec-get-o-p" target="_blank" rel="external nofollow noopener noreferrer">Get</a>(Obj, <code>&quot;value&quot;</code>).</li><li>Set desc.[[Value]] to value.</li></ol></li><li>Let hasWritable be ? <a href="http://www.ecma-international.org/ecma-262/#sec-hasproperty" target="_blank" rel="external nofollow noopener noreferrer">HasProperty</a>(Obj, <code>&quot;writable&quot;</code>).</li><li>If hasWritable is true, then<ol><li>Let writable be <a href="http://www.ecma-international.org/ecma-262/#sec-toboolean" target="_blank" rel="external nofollow noopener noreferrer">ToBoolean</a>(? <a href="http://www.ecma-international.org/ecma-262/#sec-get-o-p" target="_blank" rel="external nofollow noopener noreferrer">Get</a>(Obj, <code>&quot;writable&quot;</code>)).</li><li>Set desc.[[Writable]] to writable.</li></ol></li><li>Let hasGet be ? <a href="http://www.ecma-international.org/ecma-262/#sec-hasproperty" target="_blank" rel="external nofollow noopener noreferrer">HasProperty</a>(Obj, <code>&quot;get&quot;</code>).</li><li>If hasGet is true, then<ol><li>Let getter be ? <a href="http://www.ecma-international.org/ecma-262/#sec-get-o-p" target="_blank" rel="external nofollow noopener noreferrer">Get</a>(Obj, <code>&quot;get&quot;</code>).</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-iscallable" target="_blank" rel="external nofollow noopener noreferrer">IsCallable</a>(getter) is false and getter is not undefined, throw a TypeError exception.</li><li>Set desc.[[Get]] to getter.</li></ol></li><li>Let hasSet be ? <a href="http://www.ecma-international.org/ecma-262/#sec-hasproperty" target="_blank" rel="external nofollow noopener noreferrer">HasProperty</a>(Obj, <code>&quot;set&quot;</code>).</li><li>If hasSet is true, then<ol><li>Let setter be ? <a href="http://www.ecma-international.org/ecma-262/#sec-get-o-p" target="_blank" rel="external nofollow noopener noreferrer">Get</a>(Obj, <code>&quot;set&quot;</code>).</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-iscallable" target="_blank" rel="external nofollow noopener noreferrer">IsCallable</a>(setter) is false and setter is not undefined, throw a TypeError exception.</li><li>Set desc.[[Set]] to setter.</li></ol></li><li>If desc.[[Get]] is present or desc.[[Set]] is present, then<ol><li>If desc.[[Value]] is present or desc.[[Writable]] is present, throw a TypeError exception.</li></ol></li><li>Return desc.</li></ol><h5 id="CompletePropertyDescriptor-Desc"><a href="#CompletePropertyDescriptor-Desc" class="headerlink" title="CompletePropertyDescriptor ( Desc )"></a>CompletePropertyDescriptor ( Desc )</h5><p>当使用属性描述符 Desc 调用抽象操作 CompletePropertyDescriptor时，将执行以下步骤:</p><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: Desc is a <a href="http://www.ecma-international.org/ecma-262/#sec-property-descriptor-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Property Descriptor</a>.</li><li>Let like be <a href="http://www.ecma-international.org/ecma-262/#sec-list-and-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Record</a> { [[Value]]: undefined, [[Writable]]: false, [[Get]]: undefined, [[Set]]: undefined, [[Enumerable]]: false, [[Configurable]]: false }.</li><li>If <a href="http://www.ecma-international.org/ecma-262/#sec-isgenericdescriptor" target="_blank" rel="external nofollow noopener noreferrer">IsGenericDescriptor</a>(Desc) is true or <a href="http://www.ecma-international.org/ecma-262/#sec-isdatadescriptor" target="_blank" rel="external nofollow noopener noreferrer">IsDataDescriptor</a>(Desc) is true, then<ol><li>If Desc does not have a [[Value]] field, set Desc.[[Value]] to like.[[Value]].</li><li>If Desc does not have a [[Writable]] field, set Desc.[[Writable]] to like.[[Writable]].</li></ol></li><li>Else,<ol><li>If Desc does not have a [[Get]] field, set Desc.[[Get]] to like.[[Get]].</li><li>If Desc does not have a [[Set]] field, set Desc.[[Set]] to like.[[Set]].</li></ol></li><li>If Desc does not have an [[Enumerable]] field, set Desc.[[Enumerable]] to like.[[Enumerable]].</li><li>If Desc does not have a [[Configurable]] field, set Desc.[[Configurable]] to like.[[Configurable]].</li><li>Return Desc.</li></ol><h4 id="词法环境和环境Record规范类型"><a href="#词法环境和环境Record规范类型" class="headerlink" title="词法环境和环境Record规范类型"></a>词法环境和环境Record规范类型</h4><p>词法环境和环境Record类型用于解释嵌套函数和块中的名称解析行为。 这些类型和对它们的操作在8.1中定义。</p><h4 id="数据块"><a href="#数据块" class="headerlink" title="数据块"></a>数据块</h4><p>数据块规范类型用于描述一个不同的、可变的8位数值序列。 数据块值是用固定数量的字节创建的，每个字节的初始值为0。</p><p>在本规范中，为了计数方便，可以使用类似数组的语法来访问 Data Block 值的单个字节。 这种表示法将 Data Block 值表示为一个从0开始的的整数索引序列。 例如，如果 db 是一个5字节的数据块值，那么可以使用 db[2]来访问它的第3个字节。</p><p>驻留在内存中的、可以从多个代理并发引用的数据块被指定为共享数据块。 共享数据块具有一个无地址的标识(用于测试共享数据块的值是否相等) : 它不绑定到任何进程中映射到的虚拟地址，而是绑定到该块所代表的内存中的位置集。 只有当两个数据块所包含的位置集合相等时，它们才相等; 否则，它们不相等而且它们所包含的位置集合的交集为空。 最后，可以区分共享数据块和数据块。</p><p>内存模型使用共享数据块事件定义共享数据块的语义。 下面的抽象操作引入共享数据块事件，并充当计算语义和内存模型的事件语义之间的接口。 事件形成一个候选执行，内存模型在其中充当一个过滤器。 请参考<a href="http://www.ecma-international.org/ecma-262/#sec-memory-model" target="_blank" rel="external nofollow noopener noreferrer">内存模型</a>以获得完整的语义。</p><p>共享数据块事件由内存模型中定义的 Records 建模。</p><p>本规范使用以下抽象操作对数据块值进行操作:</p><h5 id="CreateByteDataBlock-size"><a href="#CreateByteDataBlock-size" class="headerlink" title="CreateByteDataBlock ( size )"></a>CreateByteDataBlock ( size )</h5><p>当使用整数参数大小调用 CreateByteDataBlock 抽象操作时，将执行以下步骤:</p><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: size ≥ 0.</li><li>Let db be a new <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Data Block</a> value consisting of size bytes. If it is impossible to create such a <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Data Block</a>, throw a RangeError exception.</li><li>Set all of the bytes of db to 0.</li><li>Return db.</li></ol><h5 id="CreateSharedByteDataBlock-size"><a href="#CreateSharedByteDataBlock-size" class="headerlink" title="CreateSharedByteDataBlock ( size )"></a>CreateSharedByteDataBlock ( size )</h5><p>当使用整数参数大小调用 CreateSharedByteDataBlock 抽象操作时，将执行以下步骤:</p><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: size ≥ 0.</li><li>Let db be a new <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Shared Data Block</a> value consisting of size bytes. If it is impossible to create such a <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Shared Data Block</a>, throw a RangeError exception.</li><li>Let execution be the [[CandidateExecution]] field of the <a href="http://www.ecma-international.org/ecma-262/#surrounding-agent" target="_blank" rel="external nofollow noopener noreferrer">surrounding agent</a>‘s <a href="http://www.ecma-international.org/ecma-262/#agent-record" target="_blank" rel="external nofollow noopener noreferrer">Agent Record</a>.</li><li>Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is <a href="http://www.ecma-international.org/ecma-262/#sec-agentsignifier" target="_blank" rel="external nofollow noopener noreferrer">AgentSignifier</a>().</li><li>Let zero be « 0 ».</li><li>For each index i of db, do<ol><li>Append <a href="http://www.ecma-international.org/ecma-262/#sec-memory-model-fundamentals" target="_blank" rel="external nofollow noopener noreferrer">WriteSharedMemory</a> { [[Order]]: <code>&quot;Init&quot;</code>, [[NoTear]]: true, [[Block]]: db, [[ByteIndex]]: i, [[ElementSize]]: 1, [[Payload]]: zero } to eventList.</li></ol></li><li>Return db.</li></ol><h5 id="CopyDataBlockBytes-toBlock-toIndex-fromBlock-fromIndex-count"><a href="#CopyDataBlockBytes-toBlock-toIndex-fromBlock-fromIndex-count" class="headerlink" title="CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )"></a>CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )</h5><p>当调用抽象操作CopyDataBlockBytes 时，将执行以下步骤:</p><ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: fromBlock and toBlock are distinct <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Data Block</a> or <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Shared Data Block</a> values.</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: fromIndex, toIndex, and count are integer values ≥ 0.</li><li>Let fromSize be the number of bytes in fromBlock.</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: fromIndex + count ≤ fromSize.</li><li>Let toSize be the number of bytes in toBlock.</li><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: toIndex + count ≤ toSize.</li><li>Repeat, while count &gt; 0<ol><li>If fromBlock is a <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Shared Data Block</a>, then<ol><li>Let execution be the [[CandidateExecution]] field of the <a href="http://www.ecma-international.org/ecma-262/#surrounding-agent" target="_blank" rel="external nofollow noopener noreferrer">surrounding agent</a>‘s <a href="http://www.ecma-international.org/ecma-262/#agent-record" target="_blank" rel="external nofollow noopener noreferrer">Agent Record</a>.</li><li>Let eventList be the [[EventList]] field of the element in execution.[[EventsRecords]] whose [[AgentSignifier]] is <a href="http://www.ecma-international.org/ecma-262/#sec-agentsignifier" target="_blank" rel="external nofollow noopener noreferrer">AgentSignifier</a>().</li><li>Let bytes be a <a href="http://www.ecma-international.org/ecma-262/#sec-list-and-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">List</a> of length 1 that contains a nondeterministically chosen byte value.</li><li>NOTE: In implementations, bytes is the result of a non-atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <a href="http://www.ecma-international.org/ecma-262/#sec-memory-model" target="_blank" rel="external nofollow noopener noreferrer">memory model</a> to describe observable behaviour of hardware with weak consistency.</li><li>Let readEvent be <a href="http://www.ecma-international.org/ecma-262/#sec-memory-model-fundamentals" target="_blank" rel="external nofollow noopener noreferrer">ReadSharedMemory</a> { [[Order]]: <code>&quot;Unordered&quot;</code>, [[NoTear]]: true, [[Block]]: fromBlock, [[ByteIndex]]: fromIndex, [[ElementSize]]: 1 }.</li><li>Append readEvent to eventList.</li><li>Append <a href="http://www.ecma-international.org/ecma-262/#sec-chosen-value-records" target="_blank" rel="external nofollow noopener noreferrer">Chosen Value Record</a> { [[Event]]: readEvent, [[ChosenValue]]: bytes } to execution.[[ChosenValues]].</li><li>If toBlock is a <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Shared Data Block</a>, then<ol><li>Append <a href="http://www.ecma-international.org/ecma-262/#sec-memory-model-fundamentals" target="_blank" rel="external nofollow noopener noreferrer">WriteSharedMemory</a> { [[Order]]: <code>&quot;Unordered&quot;</code>, [[NoTear]]: true, [[Block]]: toBlock, [[ByteIndex]]: toIndex, [[ElementSize]]: 1, [[Payload]]: bytes } to eventList.</li></ol></li><li>Else,<ol><li>Set toBlock[toIndex] to bytes[0].</li></ol></li></ol></li><li>Else,<ol><li><a href="http://www.ecma-international.org/ecma-262/#assert" target="_blank" rel="external nofollow noopener noreferrer">Assert</a>: toBlock is not a <a href="http://www.ecma-international.org/ecma-262/#sec-data-blocks" target="_blank" rel="external nofollow noopener noreferrer">Shared Data Block</a>.</li><li>Set toBlock[toIndex] to fromBlock[fromIndex].</li></ol></li><li>Increment toIndex and fromIndex each by 1.</li><li>Decrement count by 1.</li></ol></li><li>Return <a href="http://www.ecma-international.org/ecma-262/#sec-normalcompletion" target="_blank" rel="external nofollow noopener noreferrer">NormalCompletion</a>(empty).</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>翻译完后自己对规范类型的理解是：Specification Type是一个抽象的概念，只存在在规范里，并不真实存在在ECMAScript中。规范类型用来描述表达式求值过程的中间结果，是一种内部实现，也不对程序员直接开放。给了一些大致的自洽的数据结构来描述内部的机制，供设计JS引擎使用。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> ECMA262 </tag>
            
            <tag> 规范 </tag>
            
            <tag> 总览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMA-262规范第6节中Language Types翻译</title>
      <link href="/posts/be1c11d1.html"/>
      <url>/posts/be1c11d1.html</url>
      
        <content type="html"><![CDATA[<p>前面的文章—<a href="https://linjingyi.cn/posts/23f9220f.html">ECMA-262 规范第 4 节 Overview 翻译</a>—翻译了 ECMA-262 规范的总览章节，下面翻译规范中第 6 节—<a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-data-types-and-values" target="_blank" rel="external nofollow noopener noreferrer">ECMAScript Data Types and Values</a>—的前半部分 Language Types，并对规范中的一些符号进行总结。</p><a id="more"></a><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>本规范中的算法处理每个具有相关类型的值。本节中定义了所有可能的值类型。类型进一步细分为 ECMAScript 语言类型和规范类型。</p><p>在本规范中，“Type(x)”符号看作“x 的类型”的简写，其中“Type”指的是在本节中定义的 ECMAScript 语言和规范类型。 当使用术语“empty”时，等同于说“no value of any type”。</p><h3 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h3><p>ECMAScript 语言类型对应于由 ECMAScript 程序员使用 ECMAScript 语言直接操作的值。 ECMAScript 语言类型为 Undefined、 Null、 Boolean、 String、 Symbol、 Number 和 Object。 一个 ECMAScript 语言的值是一个 ECMAScript 语言类型的拥有属性。</p><h4 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h4><p>Undefined 类型只有一个名为 undefined 的值。 任何未赋值的变量值都为 undefined。</p><h4 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h4><p>Null 类型只有一个值 null。</p><h4 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h4><p>Boolean 类型表示具有两个值(true 和 false)的逻辑实体。</p><h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><p>String 类型是所有由零个或多个 16 位无符号整数值(“elements”)组成的有序序列的集合，最大长度为 253-1 个元素。 String 类型通常用于表示正在运行的 ECMAScript 程序中的文本数据，在这种情况下，String 中的每个元素都被视为 UTF-16 码元值。 每个元素被在序列中占据一个位置。 这些位置用非负整数进行索引。 第一个元素(如果存在)位于索引 0，下一个元素(如果存在)位于索引 1，依此类推。 String 的长度是其中元素的数量(即 16 位值)。 空 String 的长度为零，因此不包含任何元素。</p><p>不解释 String 内容的 ECMAScript 操作不应用进一步的语义。 解释 String 值的操作将每个元素视为单个 UTF-16 码元。 然而，ECMAScript 并不限制这些码元的值或这些码元之间的关系，因此进一步将 String 内容解释为 UTF-16 编码的 Unicode 代码点序列的操作必须考虑到形式不良的子序列。 这些操作对包含数值在 0xD800 到 0xDBFF 范围内的每个码元(Unicode 标准将其定义为主要代理，或更正式地定义为高代理码元)和包含数值在 0xDC00 到 0xDFFF 范围内的每个代码单元(定义为尾随代理项，或更正式地称为低代理项码元)使用以下规则进行特殊处理:</p><ul><li>不是高代理项和低代理项的代码单元被解释为具有相同值的代码点。</li><li>一个由两个代码单元组成的序列，其中第一个代码单元 c1 是高代理，第二个代码单元 c2 是低代理，它是一个代理对，并被解释为一个值为(c1-0xD800)0x400 + (c2-0xDC00) + 0x10000 的代码点。 (见 10.1.2)</li><li>作为高代理或低代理，但不是代理对的一部分的代码单元，被解释为具有相同值的代码点。</li></ul><p>String.prototype.normalize (参见 21.1.3.12)可用于显式规范化 String 值。String.prototype.localeCompare(参见 21.1.3.10)内部规范字符串值，但是没有其他操作隐式规范所操作的字符串。 只有明确指定为语言或部分敏感的操作才会产生对语言敏感的结果。</p><blockquote><p>注意：这种设计背后的基本原理是保证 Strings 的实现尽可能简单和高性能。 如果 ECMAScript 源文本采用规范化表单 C，那么字符串文本也肯定会被规范化（只要它们不包含任何 Unicode 转义序列）。</p></blockquote><p>在本规范中，短语“the string-concatenation of A, B, …”(其中每个参数是一个 String 值、一个代码单元或一个代码单元序列)表示 String 值，其代码单元序列是每个参数的代码单元的串联(按顺序)。。</p><h4 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h4><p>Symbol 类型是可用作 Object 属性(6.1.7)的键的所有非 String 值的集合。</p><p>每个 Symbol 值都是唯一的和不可变的。</p><p>每个 Symbol 值不可变地保存一个名为[[ Description ]]的关联值，该值要么是 undefined，要么是 String 值。</p><h5 id="Well-Known-Symbols"><a href="#Well-Known-Symbols" class="headerlink" title="Well-Known Symbols"></a>Well-Known Symbols</h5><p>Well-known symbols 是本规范的算法显式引用的内置 Symbol 值。它们通常用作属性的键，这些属性的值充当规范算法的扩展点。 除非另有说明，否则所有范围(8.2)都共享 Well-known symbols 值。</p><p>Within this specification a well-known symbol is referred to by using a notation of the form @@name, where “name” is one of the values listed in Table 1.</p><p>在本规范中，使用<code>@@name</code>形式的符号来引用一个 Well-known symbols，其中“name”是表 1 中列出的值之一。</p><center>表 1: Well-known Symbols</center><table><thead><tr><th>规范名称</th><th>[[Description]]</th><th>值和作用</th></tr></thead><tbody><tr><td>@@asyncIterator</td><td><code>&quot;Symbol.asyncIterator&quot;</code></td><td>方法，返回对象的默认 AsyncIterator 。由 for-await-of 语句的语义调用。</td></tr><tr><td>@@hasInstance</td><td><code>&quot;Symbol.hasInstance&quot;</code></td><td>方法，用于确定构造函数是否将对象识别为自身实例之一。 由 instanceof 运算符的语义调用。</td></tr><tr><td>@@isConcatSpreadable</td><td><code>&quot;Symbol.isConcatSpreadable&quot;</code></td><td>Boolean 值属性，如果为 true，则表示对象应该通过 Array.prototype.concat 将其展平为数组元素。</td></tr><tr><td>@@iterator</td><td><code>&quot;Symbol.iterator&quot;</code></td><td>方法，返回对象的默认迭代器。由 for-of 语句的语义调用。</td></tr><tr><td>@@match</td><td><code>&quot;Symbol.match&quot;</code></td><td>方法，匹配正则表达式与字符串，由 String.prototype.match 方法调用。</td></tr><tr><td>@@replace</td><td><code>&quot;Symbol.replace&quot;</code></td><td>方法，替换字符串中与正则表达式匹配的子字符串。由 String.prototype.replace 方法调用。</td></tr><tr><td>@@search</td><td><code>&quot;Symbol.search&quot;</code></td><td>方法，返回与正则表达式匹配的字符串中的索引。 由 String.prototype.search 方法调用。</td></tr><tr><td>@@species</td><td><code>&quot;Symbol.species&quot;</code></td><td>函数值属性，是用于创建派生对象的构造函数。</td></tr><tr><td>@@split</td><td><code>&quot;Symbol.split&quot;</code></td><td>正则表达式方法，在与正则表达式匹配的索引处拆分字符串。 由 String.prototype.split 方法调用。</td></tr><tr><td>@@toPrimitive</td><td><code>&quot;Symbol.toPrimitive&quot;</code></td><td>方法，将对象转换为对应基本值。由 ToPrimitive 抽象操作调用。</td></tr><tr><td>@@toStringTag</td><td><code>&quot;Symbol.toStringTag&quot;</code></td><td>String 值属性，用于创建对象的默认字符串说明 。 通过内置方法 Object.prototype.toString 访问。</td></tr><tr><td>@@unscopables</td><td><code>&quot;Symbol.unscopables&quot;</code></td><td>一个 Object 值属性，其自身和继承的属性名称是从关联对象的 with 环境绑定中排除的属性名称。</td></tr></tbody></table><h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4><p>Number 类型有 18437736874454810627 个值(即 2^64-2^53 + 3) ，表示 IEEE 754-2008 中 二进制浮点运算标准中指定的双精度 64 位格式值，去除了 IEEE 标准中的 9007199254740990 个“Not-a-Number”值，这些值在 ECMAScript 中表示为一个特殊的 NaN 值。 (注意，NaN 值是由程序表达式 NaN 生成的) 在一些实现中，外部代码可能能够检测不同 Not-a-Number 值之间的差异，但是这种行为依赖于如何实现; 对于 ECMAScript 代码，所有 NaN 值彼此之间是无法区分的。</p><blockquote><p>注意：存储 Number 值后在 ArrayBuffer (参见 24.1)或 SharedArrayBuffer (参见 24.2)中可能观察到的位模式不一定与 ECMAScript 实现使用的 Number 值的内部表示相同。</p></blockquote><p>还有另外两个特殊的值，称为正无穷大和负无穷大。 为了简洁起见，这些值也分别用 + ∞ 和-∞ 来说明。 (注意，这两个无限数值是由表达式 + Infinity (或 Infinity)和-Infinity 产生的。)</p><p>另外 18437736874454810624 个(即 2^64-2^53)值称为有限数。 其中一半是正数，一半是负数; 对于每一个有限的正数值，都有一个具有相同大小的对应负值。</p><p>请注意，这里有一个正零和一个负零。 为了简洁起见，这些值也分别用 + 0 和-0 来说明。 (注意，这两个不同的零数值是由程序表达式 + 0(或简称 0)和-0 产生的。)</p><p>18437736874454810622(即 2^64-2^53-2)有限非零值有两种:</p><p>18428729675200069632(即 2^64-2^54)被规范化，具有如下格式：</p><p>s × m × 2 ^ e</p><p>s 是 + 1 或-1，m 是小于 2^53 但不小于 2^52 的正整数，e 是从-1074 到 971 的整数。</p><p>其余的 9007199254740990 个(即 2^53-2)值是非规范化的，具有如下格式：</p><p>s × m × 2 ^e</p><p>S 是 + 1 或者-1 m 是小于 2^52 的正整数 ，e 是-1074。</p><p>请注意，所有大小不大于 2^53 的正整数和负整数都可以用 Number 类型表示(实际上，整数 0 有两个表示，+ 0 和-0)。</p><p>有限数有奇数的意义，如果它是非零的，表示它的整数 m (在上面所示的两种形式之一)是奇数。 除此之外，它还有一个更为重要的意义。</p><p>在本规范中，短语“the Number value for x” ，其中 x 表示一个精确的真实数学量(甚至可能是一个无理数，如 π) ，表示按以下方式选择的数值。 考虑数字类型的所有有限值的集合，去掉 -0，再加上两个在数字类型中不能表示的额外值，即 2^1024(+ 1×2^53×2^971)和 -2^1024(- 1×2^53×2^971)。 选择该集合中值最接近 x 的成员。 如果集合中的两个值相等接近，则选择具有偶数意义的一个; 为此，2^1024 和 -2^1024 这两个额外值被认为具有偶数意义。 最后，如果选择了 2^1024，将其替换为 + ∞ ; 如果选择了-2^1024，将其替换为-∞ ; 如果选择了 + 0，当且仅当 x 小于零时，将其替换为-0; 任何其他选择的值将不变地使用。 结果是 x 的 Number 值(此过程完全符合 IEEE 754-2008“四舍五入到最近的，约束到偶数”模式的行为)。</p><p>有些 ECMAScript 运算符只处理特定范围内的整数，比如 -2^31 到 2^31-1，或者从 0 到 2^16-1。 这些运算符接受 Number 类型的任何值，但首先将每个值转换为预期范围内的整数值。 请参阅 7.1 中对数值转换操作的描述。</p><h4 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h4><p>一个 Object 在逻辑上是属性的集合。每个属性要么是数据属性，要么是访问器属性:</p><ul><li>数据属性将键值与 ECMAScript 语言值和一组 Boolean 属性关联。</li><li>访问器属性将键值与 1 个或 2 个访问器函数以及一组布尔属性关联。 访问器函数用于存储或检索与属性关联的 ECMAScript 语言值。</li></ul><p>属性使用键值对进行标识。 属性键值对可以是 ECMAScript String 值，也可以是 Symbol 值。 所有 String 和 Symbol 值(包括空字符串)都作为属性键都有效。 属性名称是一个属性键，它是一个 String 值。</p><p>整数索引是一个 String 值属性键，它是一个规范的数值 String (参见 7.1.16) ，其数值可以是 + 0 或者是一个 ≤2^53-1 的正整数。 数组索引是一个整数索引，其数值 i 在 + 0≤ i&lt;2^32-1 范围内。</p><p>属性键用于访问属性及其值。 对于属性有两种访问方式: get 和 set，分别对应于值检索和赋值。 通过 get 和 set 访问的属性既包括作为对象直接部分的属性，也包括由另一个关联对象通过属性继承关系提供的继承属性。 继承的属性可以是关联对象的自有属性，也可以是继承的属性。 对象的每个属性都必须有一个键值，这个键值与对象的其他属性的键值不同。</p><p>所有对象在逻辑上都是属性的集合，但是存在多种形式的对象，这些对象的语义不同，因此不能访问和操作它们的属性。 Ordinary object 是对象最常见的形式，具有默认的对象语义。 Exotic object 是任意形式的对象，其属性语义在任何情况下与默认语义都不同。</p><h5 id="Property-Attributes"><a href="#Property-Attributes" class="headerlink" title="Property Attributes"></a>Property Attributes</h5><p>attributes 在本规范中用于定义和解释对象 property 的状态。 数据 property 将键值与表 2 中列出的 attributes 关联起来。</p><center>表 2: 数据 property 的 attributes</center><table><thead><tr><th>Attribute Name</th><th>Value Domain</th><th>Description</th></tr></thead><tbody><tr><td>[[Value]]</td><td>Any <a href="http://www.ecma-international.org/ecma-262/#sec-ecmascript-language-types" target="_blank" rel="external nofollow noopener noreferrer">ECMAScript language type</a></td><td>通过 value 访问 property 值。</td></tr><tr><td>[[Writable]]</td><td>Boolean</td><td>如果为 false，则 ECMAScript 代码使用[[Set ]]更改 property 的[[Value]] attribute 的尝试将不会成功。</td></tr><tr><td>[[Enumerable]]</td><td>Boolean</td><td>如果为 true，则该属性可通过 for-in 进行枚举。 否则，该属性被不可枚举。</td></tr><tr><td>[[Configurable]]</td><td>Boolean</td><td>如果为 false，则尝试删除 property、将 property 更改为访问器 property 或更改 property 的 attribute(除了[[Value]] ，或将[[Writable]]更改为 false)将失败。</td></tr></tbody></table><p>访问器 property 将键值与表 3 中列出的 attributes 关联。</p><center>表 3: 访问器property的attributes</center><table><thead><tr><th>Attribute Name</th><th>Value Domain</th><th>Description</th></tr></thead><tbody><tr><td>[[Get]]</td><td>Object | Undefined</td><td>如果值是一个对象，那么它必须是一个函数对象。 函数的[[Call]]内部方法(表 6)使用一个空参数列表调用，以便在每次执行对属性的 get 访问时检索属性值。</td></tr><tr><td>[[Set]]</td><td>Object | Undefined</td><td>如果值是一个对象，那么它必须是一个函数对象。 调用函数的[[Call]]内部方法(表 6)时，每次执行属性的访问时，都使用一个参数列表，其中包含分配的值作为其唯一的参数。 属性的[[[Set]]内部方法的效果可能会影响随后调用属性的[[Get]]内部方法所返回的值，但并不需要这样做。</td></tr><tr><td>[[Enumerable]]</td><td>Boolean</td><td>如果为 true，则该属性可通过 for-in 进行枚举。 否则，该属性被不可枚举。</td></tr><tr><td>[[Configurable]]</td><td>Boolean</td><td>如果为 false，则尝试删除 property、将属性更改为数据 property 或更改其 property 将失败。</td></tr></tbody></table><p>如果本规范未显式指定 property 的 attributes 初始值，则使用表 4 中定义的默认值。</p><center>表4: 默认attribute值</center><table><thead><tr><th>Attribute Name</th><th>Default Value</th></tr></thead><tbody><tr><td>[[Value]]</td><td>undefined</td></tr><tr><td>[[Get]]</td><td>undefined</td></tr><tr><td>[[Set]]</td><td>undefined</td></tr><tr><td>[[Writable]]</td><td>false</td></tr><tr><td>[[Enumerable]]</td><td>false</td></tr><tr><td>[[Configurable]]</td><td>false</td></tr></tbody></table><h5 id="对象的内部方法和内部插槽"><a href="#对象的内部方法和内部插槽" class="headerlink" title="对象的内部方法和内部插槽"></a>对象的内部方法和内部插槽</h5><p>在 ECMAScript 中，对象的实际语义是通过称为内部方法的算法指定的。 ECMAScript 引擎中的每个对象都与一组定义其运行时表现的内部方法相关联。 这些内部方法不是 ECMAScript 语言的一部分。 在本规范中，它们的定义完全是为了说明性的目的。 但是，ECMAScript 实现中的每个对象必须按照与其关联的内部方法的指定来表现。 实现此目标的确切方式取决于如何实现。</p><p>内部方法名称有多种形态。 这意味着不同的对象值在调用相同的内部方法名称时可能执行不同的算法。 调用内部方法的实际对象是调用的“target”。 如果在运行时，算法的实现试图使用对象不支持的内部方法，则会引抛出 TypeError 异常。</p><p>内部插槽对应于与关联对象的内部状态，并由各种 ECMAScript 规范算法使用。 内部插槽不是对象的属性，也不可继承。 根据特定的内部插槽规范，这种状态可能由任何 ECMAScript 语言类型的值或特定的 ECMAScript 规范类型值组成。 除非另有明确指定，否则内部插槽是在创建对象过程中分配的，不能动态地添加到对象中。 除非另有说明，否则内部插槽的初始值是 undefined。 本规范中的各种算法创建具有内部插槽的对象。 但是，ECMAScript 语言没有提供将内部插槽与对象关联的直接方法。</p><p>内部方法和内部插槽在本规范中使用双方括号[[ ]]内的 name 来标识。</p><p>表 5 总结了本规范使用的基本内部方法，这些方法适用于由 ECMAScript 代码创建或操作的所有对象。 每个对象都必须有适用于所有基本内部方法的算法。 但是，对于这些方法，所有对象并不一定使用相同的算法。</p><p>表 5 和其他类似表的“Signature”列描述了每个内部方法的调用模式。 调用模式总是包含一个带括号的描述性参数名列表。 如果参数名称与 ECMAScript 类型名称相同，则参数名称描述的是参数值所需的类型。 如果内部方法显式的返回值，则其参数列表后跟符号“→”和返回值的类型名称。 Signature 中使用的类型名称是指第 6 条中定义的类型，该类型由以下附加名称进行扩充。 “ any”表示该值可以是任何 ECMAScript 语言类型。 内部方法隐式返回 Completion Record。 除了参数之外，内部方法总是可以访问作为方法调用 target 的对象。</p><center>表5: 基本内部方法</center><table><thead><tr><th>Internal Method</th><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td>[[GetPrototypeOf]]</td><td>( ) <strong>→</strong> Object | Null</td><td>获取为此对象提供继承属性的对象。null 没有继承属性。</td></tr><tr><td>[[SetPrototypeOf]]</td><td>(Object | Null) <strong>→</strong> Boolean</td><td>将此对象与另一个提供继承属性的对象关联。 传递 null 表示没有继承的属性。 返回 true，指示操作已成功完成，或返回 false，指示操作未成功。</td></tr><tr><td>[[IsExtensible]]</td><td>( ) <strong>→</strong> Boolean</td><td>确定是否允许向此对象添加其他属性</td></tr><tr><td>[[PreventExtensions]]</td><td>( ) <strong>→</strong> Boolean</td><td>控制是否可以向此对象添加新属性。 如果操作成功，返回 true; 如果操作不成功，返回 false。</td></tr><tr><td>[[GetOwnProperty]]</td><td>(propertyKey) <strong>→</strong> Undefined | <a href="http://www.ecma-international.org/ecma-262/#sec-property-descriptor-specification-type" target="_blank" rel="external nofollow noopener noreferrer">Property Descriptor</a></td><td>返回此对象的属性键为 propertyKey 的属性描述符，如果不存在此属性，则返回 undefined。</td></tr><tr><td>[[DefineOwnProperty]]</td><td>(propertyKey, PropertyDescriptor) <strong>→</strong> Boolean</td><td>创建或更改自己的键为 propertyKey 属性，使该属性状态按照 PropertyDescriptor 描述。 如果该属性已成功创建 / 更新，则返回 true; 如果无法创建或更新该属性，则返回 false。</td></tr><tr><td>[[HasProperty]]</td><td>(propertyKey) <strong>→</strong> Boolean</td><td>返回一个 Boolean 值，该值指示此对象是否已经具有键为 propertyKey 的自有属性或继承属性。</td></tr><tr><td>[[Get]]</td><td>(propertyKey, Receiver) <strong>→</strong> <em>any</em></td><td>从此对象返回其键为 propertyKey 的属性的值。 如果必须执行任何 ECMAScript 代码来检索属性值，则在计算代码时使用 Receiver 作为 this 值。</td></tr><tr><td>[[Set]]</td><td>(propertyKey, value, Receiver) <strong>→</strong> Boolean</td><td>如果必须执行任何 ECMAScript 代码来设置属性值，则在计算代码时使用 Receiver 作为 this 值。 如果属性值设置成功，则返回 true; 如果设置失败，则返回 false。</td></tr><tr><td>[[Delete]]</td><td>(propertyKey) <strong>→</strong> Boolean</td><td>从此对象中删除键为 propertyKey 的属性。 如果属性没有被删除并且仍然存在，则返回 false。 如果属性被删除或不存在，则返回 true。</td></tr><tr><td>[[OwnPropertyKeys]]</td><td>( ) <strong>→</strong> <a href="http://www.ecma-international.org/ecma-262/#sec-list-and-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">List</a> of propertyKey</td><td>返回一个 List，其元素都是对象自己的属性键。</td></tr></tbody></table><center>表6: 函数对象附加的基本内部方法</center><table><thead><tr><th>Internal Method</th><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td>[[Call]]</td><td>(<em>any</em>, a <a href="http://www.ecma-international.org/ecma-262/#sec-list-and-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">List</a> of <em>any</em>) <strong>→</strong> <em>any</em></td><td>执行与此对象关联的代码。 通过函数调用表达式调用。 内部方法的参数是一个 this 值和一个包含传递给函数的参数的列表。 实现此内部方法的对象必须是可调用的。</td></tr><tr><td>[[Construct]]</td><td>(a <a href="http://www.ecma-international.org/ecma-262/#sec-list-and-record-specification-type" target="_blank" rel="external nofollow noopener noreferrer">List</a> of <em>any</em>, Object) <strong>→</strong> Object</td><td>创建一个对象。 通过 new 或 super 运算符调用。 此内部方法的第一个参数是一个包含运算符参数的列表。 第二个参数是最初应用 new 运算符的对象。 实现此内部方法的对象称为构造函数。 函数对象不一定是构造函数，非构造函数的函数对象没有[[Construct]]内部方法。</td></tr></tbody></table><p>ordinary objects 和标准 exotic objects 的基本内部方法的语义在第 9 条中有详细说明。如果某个实现不支持对 exotic objects 的内部方法的某指定使用，则该使用必须在尝试时抛出 TypeError 异常。</p><h5 id="基本内部方法的不变量"><a href="#基本内部方法的不变量" class="headerlink" title="基本内部方法的不变量"></a>基本内部方法的不变量</h5><p>ECMAScript 引擎的内部对象方法必须符合下面指定的不变量列表。 普通的 ECMAScript 对象以及本规范中的所有标准 exotic objects 都维护这些不变量。 ECMAScript Proxy 对象通过在运行时检查[[ ProxyHandler]]对象上调用的 trap 的结果来维护这些不变量。</p><p>实现时必须为这些 exotic objects 维护这些不变量。 违反这些不变量可能会导致 ECMAScript 代码具有不可预测的行为并产生安全问题。 但是，违反这些不变量决不能危及实现时的内存安全。</p><p>实现时决不能允许以任何方式规避这些不变量，例如提供替代接口来实现基本内部方法的功能，而不强制使用不变量。</p><h6 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h6><ul><li>内部方法的 target 是调用内部方法的对象。</li><li>如果观察到 target 从其[[[IsExtensible]]]内部方法返回 false，或从其[[ PreventExtensions ]]内部方法返回 true，则该目标是不可扩展的。</li><li>不存在的属性不是非可扩展 target 上的属性。</li><li>所有对 SameValue 的引用都依据 <a href="http://www.ecma-international.org/ecma-262/#sec-samevalue" target="_blank" rel="external nofollow noopener noreferrer">SameValue</a> 算法的定义。</li></ul><h6 id="GetPrototypeOf-（）"><a href="#GetPrototypeOf-（）" class="headerlink" title="[[GetPrototypeOf]]（）"></a>[[GetPrototypeOf]]（）</h6><ul><li>返回值的类型必须是 Object 或 Null。</li><li>如果 target 是不可扩展的，并且[[GetPrototypeOf]]返回一个值 V，那么将来对[[GetPrototypeOf]]的任何调用都应该将 <a href="http://www.ecma-international.org/ecma-262/#sec-samevalue" target="_blank" rel="external nofollow noopener noreferrer">SameValue</a> 作为 V 返回。</li></ul><blockquote><p>注意 1：一个对象的原型链应该有有限的长度(也就是说，从任何对象开始，递归地应用[[GetPrototypeOf]]内部方法到它的结果最终应该导致值 null)。 但是，如果原型链包含任何 exotic objects（该对象不使用 ordinary object 的[[GetPrototypeOf]]定义），那么这个要求作为对象级别的不变量并不是强制的。 这样的循环原型链在访问对象属性时可能导致无限循环。</p></blockquote><h6 id="SetPrototypeOf-（V）"><a href="#SetPrototypeOf-（V）" class="headerlink" title="[[SetPrototypeOf]]（V）"></a>[[SetPrototypeOf]]（V）</h6><ul><li>返回值的类型必须是 Boolean 值。</li><li>如果 target 是不可扩展的，[[SetPrototypeOf]]必须返回 false，除非 V 是 target 所观察到的[[GetPrototypeOf]]值的 SameValue。</li></ul><h6 id="IsExtensible-（）"><a href="#IsExtensible-（）" class="headerlink" title="[[IsExtensible]]（）"></a>[[IsExtensible]]（）</h6><ul><li>返回值的类型必须是 Boolean 值。</li><li>如果[[ IsExtensible ]]返回 false，那么将来对 target 的所有[[IsExtensible]]调用都必须返回 false。</li></ul><h6 id="PreventExtensions-（）"><a href="#PreventExtensions-（）" class="headerlink" title="[[PreventExtensions]]（）"></a>[[PreventExtensions]]（）</h6><ul><li>返回值的类型必须是 Boolean 值。</li><li>如果[[PreventExtensions]]返回 true，那么将来对目标的所有[[IsExtensible]]调用都必须返回 false，并且 target 现在被认为是不可扩展的。</li></ul><h6 id="GetOwnProperty-（P）"><a href="#GetOwnProperty-（P）" class="headerlink" title="[[GetOwnProperty]]（P）"></a>[[GetOwnProperty]]（P）</h6><ul><li>返回值的类型必须是 <a href="http://www.ecma-international.org/ecma-262/#sec-property-descriptor-specification-type" target="_blank" rel="external nofollow noopener noreferrer">属性描述符</a> 或 Undefined.</li><li>如果返回值的类型为属性描述符 ，则返回值必须是完整的属性描述符。</li><li>如果将 P 描述为一个不可配置、不可写的自己的数据属性，那么对[[GetOwnProperty]]（P）的所有未来调用都必须返回属性描述符，它的[[Value]]是作为 P 的[[Value]]属性的 SameValue。</li><li>如果 P 的[[Writable]]以外的其他属性可能随时间变化，或者属性可能被删除，那么 P 的[[Configurable]]属性必须为 true。</li><li>如果[[Writable]]属性可能从 false 更改为 true，那么[[Configurable]]属性必须为 true。</li><li>如果 target 是不可扩展的且 P 不存在，那么将来对 target 上的[[GetOwnProperty]]（P）的所有调用都必须将 P 描述为不存在的(即[[ GetOwnProperty ]]（P）必须返回 undefined)。</li></ul><blockquote><p>注意 2：作为第三个不变量的结果，如果一个属性被描述为一个数据属性，并且随着时间的推移它可能返回不同的值，那么[[ Writable ]]和[[ Configurable ]]属性中的一个或两个必须为 true，即使没有通过其他内部方法公开更改值的机制。</p></blockquote><h6 id="DefineOwnProperty-P-Desc"><a href="#DefineOwnProperty-P-Desc" class="headerlink" title="[[DefineOwnProperty]] ( P, Desc )"></a>[[DefineOwnProperty]] ( P, Desc )</h6><ul><li>返回值的类型必须是 Boolean 值。</li><li>如果先前观察到 P 是 target 的一个不可配置的属性，[[DefineOwnProperty]]必须返回 false，除非：<ol><li>P 是一个可写数据属性。 可将不可配置的可写数据属性更改为不可配置不可写数据属性。</li><li>Desc 的所有属性都是作为 P 属性的 SameValue。</li></ol></li><li>如果 target 是不可扩展的并且 P 是一个不存在的属性，那么[[ DefineOwnProperty ]]（P，Desc）必须返回 false。 也就是说，不可扩展的目标对象不能使用新属性进行扩展。</li></ul><h6 id="HasProperty-（P）"><a href="#HasProperty-（P）" class="headerlink" title="[[HasProperty]]（P）"></a>[[HasProperty]]（P）</h6><ul><li>返回值的类型必须是 Boolean 值。</li><li>如果以前观察到 P 是 target 的不可配置的自身的数据或访问器属性，那么[[ HasProperty]]必须返回 true。</li></ul><h6 id="Get-P-Receiver"><a href="#Get-P-Receiver" class="headerlink" title="[[Get]] ( P, Receiver )"></a>[[Get]] ( P, Receiver )</h6><ul><li>如果以前观察到 P 是 target 的不可配置、不可写的数据属性，值为 V，那么[[Get]]必须将 返回为 v 的 SameValue 。</li><li>如果以前观察到 P 是 target 的不可配置的自身的访问器属性，其[[ Get ]]]属性是 undefined，则[[ Get ]]操作必须返回 undefined。</li></ul><h6 id="Set-P-V-Receiver"><a href="#Set-P-V-Receiver" class="headerlink" title="[[Set]] ( P, V, Receiver )"></a>[[Set]] ( P, V, Receiver )</h6><ul><li>返回值的类型必须是 Boolean 值。</li><li>如果以前观察到 P 是 target 的不可配置的、不可写的数据属性，那么[[ Set ]]必须返回 false，除非 v 是作为 P 的[[ Value ]]属性的 SameValue。</li><li>如果以前观察到 P 是 target 的不可配置的自身的访问器属性，并且[[ Set ]]属性是 undefined，那么[[Set]]操作必须返回 false。</li></ul><h6 id="Delete-（P）"><a href="#Delete-（P）" class="headerlink" title="[[Delete]]（P）"></a>[[Delete]]（P）</h6><ul><li>返回值的类型必须是 Boolean 值。</li><li>如果以前观察到 P 是 target 的不可配置的自身数据或访问器属性，那么[[Delete]]必须返回 false。</li></ul><h6 id="OwnPropertyKeys-（）"><a href="#OwnPropertyKeys-（）" class="headerlink" title="[[OwnPropertyKeys]]（）"></a>[[OwnPropertyKeys]]（）</h6><ul><li>返回值必须是一个 List。</li><li>返回的 List 不能包含任何重复项。</li><li>返回的 List 的每个元素的类型为 String 或 Symbol。</li><li>返回的 List 必须至少包含以前观察到的所有不可配置属性的键。</li><li>如果对象是不可扩展的，则返回的 List 必须只包含使用[[GetOwnProperty]]可观察到的对象的所有属性的键。</li></ul><h6 id="Construct-（）"><a href="#Construct-（）" class="headerlink" title="[[Construct]]（）"></a>[[Construct]]（）</h6><ul><li>返回值的类型必须是 Object。</li></ul><h5 id="Well-Known-内部对象"><a href="#Well-Known-内部对象" class="headerlink" title="Well-Known 内部对象"></a>Well-Known 内部对象</h5><p>well-known 内部对象是本规范的算法显式引用的内置对象，它们通常具有特定作用域的标识。 除非另有说明，否则每个内部对象实际上对应于一组相似的对象（每个作用域一个）。</p><p>在此规范中，引用如%name% 表示与当前作用域关联的对应于该名称内部对象。 当前作用域及其内部对象的确定在 8.3 中描述。 well-known 内部对象列在表 7 中。</p><center>表7: Well-Known 内部对象</center><table><thead><tr><th>Intrinsic Name</th><th>Global Name</th><th>ECMAScript Language Association</th></tr></thead><tbody><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-array-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Array%</a></td><td><code>Array</code></td><td>Array 类型的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-arraybuffer-constructor" target="_blank" rel="external nofollow noopener noreferrer">%ArrayBuffer%</a></td><td><code>ArrayBuffer</code></td><td>ArrayBuffer 类型的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-arraybuffer-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%ArrayBufferPrototype%</a></td><td><code>ArrayBuffer.prototype</code></td><td>%ArrayBuffer%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%arrayiteratorprototype%-object" target="_blank" rel="external nofollow noopener noreferrer">%ArrayIteratorPrototype%</a></td><td></td><td>Array 迭代器对象的原型</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-array-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%ArrayPrototype%</a></td><td><code>Array.prototype</code></td><td>%Array%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-array.prototype.entries" target="_blank" rel="external nofollow noopener noreferrer">%ArrayProto_entries%</a></td><td><code>Array.prototype.entries</code></td><td>%ArrayPrototype%的 entries 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-array.prototype.foreach" target="_blank" rel="external nofollow noopener noreferrer">%ArrayProto_forEach%</a></td><td><code>Array.prototype.forEach</code></td><td>%ArrayPrototype%的 forEach 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-array.prototype.keys" target="_blank" rel="external nofollow noopener noreferrer">%ArrayProto_keys%</a></td><td><code>Array.prototype.keys</code></td><td>%ArrayPrototype%的 keys 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-array.prototype.values" target="_blank" rel="external nofollow noopener noreferrer">%ArrayProto_values%</a></td><td><code>Array.prototype.values</code></td><td>%ArrayPrototype%的 values 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%asyncfromsynciteratorprototype%-object" target="_blank" rel="external nofollow noopener noreferrer">%AsyncFromSyncIteratorPrototype%</a></td><td></td><td>Async-from-sync 迭代器对象的原型。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-async-function-constructor" target="_blank" rel="external nofollow noopener noreferrer">%AsyncFunction%</a></td><td></td><td>Async 函数对象的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-async-function-prototype-properties" target="_blank" rel="external nofollow noopener noreferrer">%AsyncFunctionPrototype%</a></td><td></td><td>%AsyncFunction%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-asyncgeneratorfunction-prototype" target="_blank" rel="external nofollow noopener noreferrer">%AsyncGenerator%</a></td><td></td><td>%AsyncGeneratorFunction%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-asyncgeneratorfunction-constructor" target="_blank" rel="external nofollow noopener noreferrer">%AsyncGeneratorFunction%</a></td><td></td><td>async 迭代器对象的构造函数。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-asyncgenerator-prototype" target="_blank" rel="external nofollow noopener noreferrer">%AsyncGeneratorPrototype%</a></td><td></td><td>%AsyncGenerator%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-asynciteratorprototype" target="_blank" rel="external nofollow noopener noreferrer">%AsyncIteratorPrototype%</a></td><td></td><td>所有标准的内置 async 迭代器对象都间接继承的对象</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-atomics-object" target="_blank" rel="external nofollow noopener noreferrer">%Atomics%</a></td><td><code>Atomics</code></td><td>Atomics 对象</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-boolean-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Boolean%</a></td><td><code>Boolean</code></td><td>Boolean 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-boolean-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%BooleanPrototype%</a></td><td><code>Boolean.prototype</code></td><td>%Boolean%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-dataview-constructor" target="_blank" rel="external nofollow noopener noreferrer">%DataView%</a></td><td><code>DataView</code></td><td>DataView 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-dataview-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%DataViewPrototype%</a></td><td>`DataView.prototype</td><td>%DataView%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-date-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Date%</a></td><td><code>Date</code></td><td>Date 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-date-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%DatePrototype%</a></td><td><code>Date.prototype</code></td><td>%Date%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-decodeuri-encodeduri" target="_blank" rel="external nofollow noopener noreferrer">%decodeURI%</a></td><td><code>decodeURI</code></td><td>decodeURIh 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-decodeuricomponent-encodeduricomponent" target="_blank" rel="external nofollow noopener noreferrer">%decodeURIComponent%</a></td><td><code>decodeURIComponent</code></td><td>decodeURIComponent 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-encodeuri-uri" target="_blank" rel="external nofollow noopener noreferrer">%encodeURI%</a></td><td><code>encodeURI</code></td><td>encodeURI 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-encodeuricomponent-uricomponent" target="_blank" rel="external nofollow noopener noreferrer">%encodeURIComponent%</a></td><td><code>encodeURIComponent</code></td><td>encodeURIComponent 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-error-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Error%</a></td><td><code>Error</code></td><td>Error 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-error-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%ErrorPrototype%</a></td><td><code>Error.prototype</code></td><td>%Error%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-eval-x" target="_blank" rel="external nofollow noopener noreferrer">%eval%</a></td><td><code>eval</code></td><td>eval 函数</td></tr><tr><td>%EvalError%</td><td><code>EvalError</code></td><td>EvalError 的构造函数</td></tr><tr><td>%EvalErrorPrototype%</td><td>`EvalError.prototype</td><td>%EvalError%的 prototype 属性的初始值。</td></tr><tr><td>%Float32Array%</td><td><code>Float32Array</code></td><td>Float32Array 的构造函数</td></tr><tr><td>%Float32ArrayPrototype%</td><td>`Float32Array.prototype</td><td>%Float32Array%的 prototype 属性的初始值。</td></tr><tr><td>%Float64Array%</td><td><code>Float64Array</code></td><td>Float64Array 的构造函数</td></tr><tr><td>%Float64ArrayPrototype%</td><td><code>Float64Array.prototype</code></td><td>%Float64Array%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-function-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Function%</a></td><td><code>Function</code></td><td>Function 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-function-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%FunctionPrototype%</a></td><td><code>Function.prototype</code></td><td>%Function%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-generatorfunction-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%Generator%</a></td><td></td><td>%GeneratorFunction%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-generatorfunction-constructor" target="_blank" rel="external nofollow noopener noreferrer">%GeneratorFunction%</a></td><td></td><td>Generator 对象的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-generator-prototype" target="_blank" rel="external nofollow noopener noreferrer">%GeneratorPrototype%</a></td><td></td><td>%Generator%的 prototype 属性的初始值。</td></tr><tr><td>%Int8Array%</td><td></td><td>Int8Array 的构造函数</td></tr><tr><td>%Int8ArrayPrototype%</td><td><code>Int8Array.prototype</code></td><td>%Int8Array%的 prototype 属性的初始值。</td></tr><tr><td>%Int16Array%</td><td><code>Int16Array</code></td><td>Int16Array 的构造函数</td></tr><tr><td>%Int16ArrayPrototype%</td><td><code>Int16Array.prototype</code></td><td>%Int16Array%的 prototype 属性的初始值。</td></tr><tr><td>%Int32Array%</td><td><code>Int32Array</code></td><td>Int32Array 的构造函数</td></tr><tr><td>%Int32ArrayPrototype%</td><td><code>Int32Array.prototype</code></td><td>%Int32Array%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-isfinite-number" target="_blank" rel="external nofollow noopener noreferrer">%isFinite%</a></td><td><code>isFinite</code></td><td>isFinite 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-isnan-number" target="_blank" rel="external nofollow noopener noreferrer">%isNaN%</a></td><td><code>isNaN</code></td><td>isNaN 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%iteratorprototype%-object" target="_blank" rel="external nofollow noopener noreferrer">%IteratorPrototype%</a></td><td></td><td>所有标准内置迭代器对象间接继承来源的对象</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-json-object" target="_blank" rel="external nofollow noopener noreferrer">%JSON%</a></td><td><code>JSON</code></td><td>JSON 对象</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-json.parse" target="_blank" rel="external nofollow noopener noreferrer">%JSONParse%</a></td><td><code>JSON.parse</code></td><td>%JSON%的 parse 属性的初始值。</td></tr><tr><td>%JSONStringify%</td><td><code>JSON.stringify</code></td><td>%JSON%的 stringfy 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-map-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Map%</a></td><td><code>Map</code></td><td>Map 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%mapiteratorprototype%-object" target="_blank" rel="external nofollow noopener noreferrer">%MapIteratorPrototype%</a></td><td></td><td>Map 迭代器对象的 prototype</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-map-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%MapPrototype%</a></td><td><code>Map.prototype</code></td><td>%Map%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-math-object" target="_blank" rel="external nofollow noopener noreferrer">%Math%</a></td><td><code>Math</code></td><td>Math 对象</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-number-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Number%</a></td><td><code>Number</code></td><td>Number 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-number-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%NumberPrototype%</a></td><td><code>Number.prototype</code></td><td>%Number%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-object-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Object%</a></td><td><code>Object</code></td><td>Object 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-object-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%ObjectPrototype%</a></td><td><code>Object.prototype</code></td><td>%Object%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-object.prototype.tostring" target="_blank" rel="external nofollow noopener noreferrer">%ObjProto_toString%</a></td><td><code>Object.prototype.toString</code></td><td>%ObjectPrototype%的 toString 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-object.prototype.valueof" target="_blank" rel="external nofollow noopener noreferrer">%ObjProto_valueOf%</a></td><td><code>Object.prototype.valueOf</code></td><td>%ObjectPrototype%的 valueOf 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-parsefloat-string" target="_blank" rel="external nofollow noopener noreferrer">%parseFloat%</a></td><td><code>parseFloat</code></td><td>parseFloat 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-parseint-string-radix" target="_blank" rel="external nofollow noopener noreferrer">%parseInt%</a></td><td><code>parseInt</code></td><td>parseInt 函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-promise-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Promise%</a></td><td><code>Promise</code></td><td>Promise 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-promise-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%PromisePrototype%</a></td><td><code>Promise.prototype</code></td><td>%Promise%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-promise.prototype.then" target="_blank" rel="external nofollow noopener noreferrer">%PromiseProto_then%</a></td><td><code>Promise.prototype.then</code></td><td>%PromisePrototype%的 then 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-promise.all" target="_blank" rel="external nofollow noopener noreferrer">%Promise_all%</a></td><td><code>Promise.all</code></td><td>%Promise%的 all 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-promise.reject" target="_blank" rel="external nofollow noopener noreferrer">%Promise_reject%</a></td><td><code>Promise.reject</code></td><td>%Promise%的 reject 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-promise.resolve" target="_blank" rel="external nofollow noopener noreferrer">%Promise_resolve%</a></td><td><code>Promise.resolve</code></td><td>%Promise%的 resolve 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-proxy-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Proxy%</a></td><td><code>Proxy</code></td><td>Proxy 的构造函数</td></tr><tr><td>%RangeError%</td><td><code>RangeError</code></td><td>RangeError 的构造函数</td></tr><tr><td>%RangeErrorPrototype%</td><td><code>RangeError.prototype</code></td><td>%RangeError%的 prototype 属性的初始值。</td></tr><tr><td>%ReferenceError%</td><td><code>ReferenceError</code></td><td>ReferenceError 的构造函数</td></tr><tr><td>%ReferenceErrorPrototype%</td><td><code>ReferenceError.prototype</code></td><td>%ReferenceError%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-reflect-object" target="_blank" rel="external nofollow noopener noreferrer">%Reflect%</a></td><td><code>Reflect</code></td><td>Reflect 对象</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-regexp-constructor" target="_blank" rel="external nofollow noopener noreferrer">%RegExp%</a></td><td><code>RegExp</code></td><td>RegExp 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-regexp-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%RegExpPrototype%</a></td><td><code>RegExp.prototype</code></td><td>%RegExp%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-set-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Set%</a></td><td><code>Set</code></td><td>Set 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%setiteratorprototype%-object" target="_blank" rel="external nofollow noopener noreferrer">%SetIteratorPrototype%</a></td><td></td><td>Set 迭代器对象的 prototype 属性</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-set-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%SetPrototype%</a></td><td><code>Set.prototype</code></td><td>%Set%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-sharedarraybuffer-constructor" target="_blank" rel="external nofollow noopener noreferrer">%SharedArrayBuffer%</a></td><td><code>SharedArrayBuffer</code></td><td>SharedArrayBuffer 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-sharedarraybuffer-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%SharedArrayBufferPrototype%</a></td><td><code>SharedArrayBuffer.prototype</code></td><td>%SharedArrayBuffer%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-string-constructor" target="_blank" rel="external nofollow noopener noreferrer">%String%</a></td><td><code>String</code></td><td>String 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%stringiteratorprototype%-object" target="_blank" rel="external nofollow noopener noreferrer">%StringIteratorPrototype%</a></td><td></td><td>String 迭代器对象的 prototype</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-string-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%StringPrototype%</a></td><td><code>String.prototype</code></td><td>%String%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-symbol-constructor" target="_blank" rel="external nofollow noopener noreferrer">%Symbol%</a></td><td><code>Symbol</code></td><td>Symbol 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-symbol-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%SymbolPrototype%</a></td><td><code>Symbol.prototype</code></td><td>%Symbol%的 prototype 属性的初始值。</td></tr><tr><td>%SyntaxError%</td><td><code>SyntaxError</code></td><td>SyntaxError 的构造函数</td></tr><tr><td>%SyntaxErrorPrototype%</td><td><code>SyntaxError.prototype</code></td><td>%SyntaxError%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%throwtypeerror%" target="_blank" rel="external nofollow noopener noreferrer">%ThrowTypeError%</a></td><td></td><td>无条件抛出%TypeError%新实例的函数对象</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-%typedarray%-intrinsic-object" target="_blank" rel="external nofollow noopener noreferrer">%TypedArray%</a></td><td></td><td>所有类型化 Array 构造函数的 super 类</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-%typedarrayprototype%-object" target="_blank" rel="external nofollow noopener noreferrer">%TypedArrayPrototype%</a></td><td></td><td><a href="http://www.ecma-international.org/ecma-262/#sec-%typedarray%-intrinsic-object" target="_blank" rel="external nofollow noopener noreferrer">%TypedArray%</a>的 prototype 属性的初始值。</td></tr><tr><td>%TypeError%</td><td><code>TypeError</code></td><td>TypeError 的构造函数</td></tr><tr><td>%TypeErrorPrototype%</td><td><code>TypeError.prototype</code></td><td>%TypeError%的 prototype 属性的初始值。</td></tr><tr><td>%Uint8Array%</td><td><code>Uint8Array</code></td><td>Uint8Array 的构造函数</td></tr><tr><td>%Uint8ArrayPrototype%</td><td><code>Uint8Array.prototype</code></td><td>%Uint8Array%的 prototype 属性的初始值。</td></tr><tr><td>%Uint8ClampedArray%</td><td><code>Uint8ClampedArray</code></td><td>Uint8ClampedArray 的构造函数</td></tr><tr><td>%Uint8ClampedArrayPrototype%</td><td><code>Uint8ClampedArray.prototype</code></td><td>%Uint8ClampedArray%的 prototype 属性的初始值。</td></tr><tr><td>%Uint16Array%</td><td><code>Uint16Array</code></td><td>Uint16Array 的构造函数</td></tr><tr><td>%Uint16ArrayPrototype%</td><td><code>Uint16Array.prototype</code></td><td>%Uint16Array%的 prototype 属性的初始值。</td></tr><tr><td>%Uint32Array%</td><td><code>Uint32Array</code></td><td>Uint32Array 的构造函数</td></tr><tr><td>%Uint32ArrayPrototype%</td><td><code>Uint32Array.prototype</code></td><td>%Uint32Array%的 prototype 属性的初始值。</td></tr><tr><td>%URIError%</td><td><code>URIError</code></td><td>URIError 的构造函数</td></tr><tr><td>%URIErrorPrototype%</td><td><code>URIError.prototype</code></td><td>%URIError%的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-weakmap-constructor" target="_blank" rel="external nofollow noopener noreferrer">%WeakMap%</a></td><td><code>WeakMap</code></td><td>WeakMap 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-weakmap-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%WeakMapPrototype%</a></td><td><code>WeakMap.prototype</code></td><td><a href="http://www.ecma-international.org/ecma-262/#sec-weakmap-constructor" target="_blank" rel="external nofollow noopener noreferrer">%WeakMap%</a>的 prototype 属性的初始值。</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-weakset-constructor" target="_blank" rel="external nofollow noopener noreferrer">%WeakSet%</a></td><td><code>WeakSet</code></td><td>WeakSet 的构造函数</td></tr><tr><td><a href="http://www.ecma-international.org/ecma-262/#sec-properties-of-the-weakset-prototype-object" target="_blank" rel="external nofollow noopener noreferrer">%WeakSetPrototype%</a></td><td><code>WeakSet.prototype</code></td><td><a href="http://www.ecma-international.org/ecma-262/#sec-weakset-constructor" target="_blank" rel="external nofollow noopener noreferrer">%WeakSet%</a>的 prototype 属性的初始值。</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>列举一些规范中除文法外符号含义：</p><ul><li><p>@@name：well-known symbol</p></li><li><p>[[name]]：内部方法和内部插槽</p></li><li><p>%name%：当前作用域的内部对象</p></li><li><p>Type(x)：x 的类型</p></li><li><p>« element1, element2 »：List</p></li><li><p>PropertyDescriptor { [[Value]]: 42, [[Writable]]: false, [[Configurable]]: true }：用类似对象的方式描述 attribute</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> ECMA262 </tag>
            
            <tag> 规范 </tag>
            
            <tag> 总览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMA-262规范第4节Overview翻译</title>
      <link href="/posts/23f9220f.html"/>
      <url>/posts/23f9220f.html</url>
      
        <content type="html"><![CDATA[<p>翻译 ECMA-262 规范，也就是 ECMAScript 的规范的<a href="http://www.ecma-international.org/ecma-262/#sec-overview" target="_blank" rel="external nofollow noopener noreferrer">第四节 Overview</a>，重新梳理 JS 中的一些基本概念，最后理解一下在 ECMAScript 中 <code>property</code> 和 <code>attribute</code> 的区别。</p><a id="more"></a><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>本章节包含 ECMAScript 语言的非规范性概述。</p><p>EcmaScript 是一种面向对象程序设计语言，用于在宿主环境中执行计算和操作计算对象。 这里定义的 ECMAScript 并不打算在计算上完全自我实现; 实际上，本规范中没有关于外部数据输入或计算结果输出的规定。 相反，预计 ECMAScript 程序的计算环境将不仅提供本规范中描述的对象和其他工具，而且还提供某些特定环境的对象，这些对象的描述和行为超出了本规范的范围，只是表明它们可能提供可以访问的特定属性和可以从 ECMAScript 程序调用的特定函数。</p><p>最初设计 ECMAScript 时是作为一个脚本语言，但现在已经被广泛用作多用途的编程语言。脚本语言时用来操作、定制和自动化现有系统工具的编程语言。 在这样的系统中，有用的功能已经可以通过用户界面实现，而脚本语言控制是一种将这种功能暴露给程序控制的机制。 通过这种方式，现有的系统被认为提供了一个由对象和工具组成的宿主环境，这就完成了脚本语言的功能。专业程序员和非专业程序员都可以使用脚本语言。</p><p>EcmaScript 最初被设计为一个 Web 脚本语言，提供一种机制来在浏览器中使 Web 页面更生动，并作为基于 Web 的客户机-服务器架构的一部分执行服务器计算。 EcmaScript 现在用于为各种宿主环境提供核心脚本功能。 因此，本文档中还指定了除了特定的宿主环境之外的核心语言。</p><p>使用 ECMAScript 已经超越了简单的脚本，现在它被用于许多不同环境和尺度的全方位编程任务。 随着 ECMAScript 使用的扩展，它提供的特性和工具也随之扩展。 现在 ECMAScript 是一个功能齐全的通用编程语言。</p><p>Ecmascript 的一些工具类似于其他编程语言中使用的工具; 特别是 c、 Java、 Self 和 Scheme，如下所述:</p><p>ISO/IEC 9899:1996, Programming Languages – C.</p><p>Gosling, James, Bill Joy and Guy Steele. The Java™ Language Specification. Addison Wesley Publishing Co., 1996.</p><p>Ungar, David, and Smith, Randall B. Self: The Power of Simplicity. OOPSLA ‘87 Conference Proceedings, pp. 227-241, Orlando, FL, October 1987.</p><p>IEEE Standard for the Scheme Programming Language. IEEE Std 1178-1990.</p><h3 id="Web-脚本"><a href="#Web-脚本" class="headerlink" title="Web 脚本"></a>Web 脚本</h3><p>Web 浏览器为客户端计算提供了 ECMAScript 宿主环境，例如，表示窗口、菜单、弹出窗口、对话框、文本区、锚、框架、历史记录、 cookies 和输入 / 输出的对象。 此外，宿主环境提供了一种方法来附加脚本代码的事件，如改变焦点，页面和图像加载，卸载，错误和中止，选择，表单提交和鼠标操作。 脚本代码出现在 HTML 中，显示的页面是用户界面元素以及固定和计算文本和图像的组合。 脚本代码是针对用户交互的，不需要主程序。</p><p>Web 服务器为服务器端计算提供了不同的宿主环境，包括表示请求、客户端和文件的对象，以及锁定和共享数据的机制。 通过同时使用浏览器端和服务器端脚本，可以在客户端和服务器之间分配计算，同时为 Web 应用程序提供定制的用户界面。</p><p>每个支持 ECMAScript 的 Web 浏览器和服务器都提供自己的完成 ECMAScript 执行的宿主环境。</p><h3 id="ECMAScript-概述"><a href="#ECMAScript-概述" class="headerlink" title="ECMAScript 概述"></a>ECMAScript 概述</h3><p>下面是 ECMAScript 的一个非正式概述————并不是所有的部分都被描述了。 这个概述不是标准的一部分。</p><p>EcmaScript 是基于对象的: 基本语言和宿主工具由对象提供，ECMAScript 程序是一个通信对象集群。 在 ECMAScript 中，对象是由零个或多个 property 组成的集合，每个 property 都具有决定如何使用每个 property 的 attribute ——例如，当 property 的 Writable 属性设置为 false 时，任何已执行 ECMAScript 代码为属性分配不同值的尝试都将失败。 属性是容纳其他对象、基本类型值或函数的容器。 基本类型值是下列内置类型之一的成员: Undefined、 Null、 Boolean、 Number、 String 和 Symbol; 对象是内置类型 Object 的成员; 函数是可调用对象。函数通过一个叫方法的属性与对象联系起来。</p><p>Ecmascript 定义了一组内置对象，这些对象完善了 ECMAScript 实体的定义。 这些内置对象包括全局对象; 对语言语义有重要意义的对象，包括 Object、 Function、 Boolean、 Symbol 和各种 Error 对象; 表示和操作数值(包括 Math、 Number 和 Date)的对象; 文本处理对象 String 和 RegExp; 包括 Array 和 9 种不同类型的类型数组(其元素都具有特定的数值数据表示)的索引值集合对象; 包括 Map 和 Set 对象的键值对集合; 支持结构化数据(包括 JSON 对象、 ArrayBuffer、 sharedarbuffer 和 DataView)的对象; 支持抽象化控制(包括 generator 函数和 Promise 对象)的对象; 以及包括 Proxy 和 Reflect 对象在内的反射对象。</p><p>Ecmascript 还定义了一组内置操作符。 运算符包括各种一元运算符、乘法运算符、加法运算符、位移运算符、关系运算符、相等运算符、二元位运算符、二元逻辑运算符、赋值运算符和逗号运算符。</p><p>大型 ECMAScript 程序支持模块功能，这些模块允许程序被划分为多个语句和声明序列。 每个模块都明确指出它使用的声明需要由其他模块提供，以及哪些声明可供其他模块使用。</p><p>语法有意地模仿 Java 语法。 但 Ecmascript 语法比较宽松，可以作为一个易于使用的脚本语言。 例如，变量不需要声明其类型，属性也不需要与类型关联，已定义的函数不需要在调用它们之前以文本形式显示其声明。</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>尽管 ECMAScript 包含定义类的语法，但是 ECMAScript 对象并不像 c++ 、Smalltalk 或 Java 中的对象那样基于类。 而是可以通过各种方式创建对象，包括通过文字符号或通过构造函数创建对象，然后执行代码，通过为其属性分配初始值来初始化所有或部分对象。 每个构造函数都有一个名为“ prototype”的属性，用于实现基于原型的继承和共享属性。 对象是通过在 new 表达式中使用构造函数创建的; 例如，new Date (2009,11)创建一个新的 Date 对象。 在不使用 new 的情况下调用构造函数会产生依赖于构造函数的结果。 例如，Date ()生成当前日期和时间的字符串表示形式，而不是对象。</p><p>构造函数创建的每个对象都对其构造函数的“prototype”属性的值有一个隐式引用(称为对象的 prototype)。 此外，一个原型可能对其自身的原型有一个非空的隐式引用，以此类推，这就是所谓的原型链。当引用对象中的属性时，该引用指向该原型链中包含属性的第一个对象中的该名称属性。 换句话说，首先检查当前对象是否具有这样的属性; 如果该对象包含指定的属性，那就是引用所指向的属性; 如果该对象不包含指定的属性，则接下来检查该对象的原型，以此类推。</p><p><img src="/posts/23f9220f/figure-1.png" alt></p><center>图1：对象/原型关系</center><p>一般情况下，在基于类的面向对象语言中，状态由实例承载，方法由类承载，只继承结构和行为。 在 ECMAScript 中，状态和方法由对象承载，而结构、行为和状态都是继承的。</p><p>所有不直接包含其原型包含的特定属性的对象都共享该属性及其值。 图 1 说明了这一点:</p><p>CF 是一个构造函数(也是一个对象)。 使用 new 表达式创建了五个对象: cf1、 cf2、 cf3、 cf4 和 cf5。 每个对象都包含名为 q1 和 q2 的属性。 虚线表示隐含的原型关系; 例如，cf3 的原型是 CFp。 构造函数 CF 本身有两个属性，名为 P1 和 P2，CFp、 cf1、 cf2、 cf3、 cf4 或 cf5 不能看到这两个属性。 Cfp 中命名为 CFP1 的属性由 cf1、 cf2、 cf3、 cf4 和 cf5 共享(但不由 CF 共享) ，CFp 隐式原型链中发现的任何未命名为 q1、 q2 或 CFP1 的属性也是如此。 注意，CF 和 CFp 之间没有隐式原型链。</p><p>与大多数基于类的对象语言不同，属性可以通过为对象赋值来动态地添加到对象中。 也就是说，构造函数不需要为所构造的对象的所有或任何属性命名或赋值。 在上面的图中，可以为 cf1、 cf2、 cf3、 cf4 和 cf5 添加一个新的共享属性，方法就是是为 CFp 中的属性分配一个新值。</p><p>虽然 ECMAScript 对象本质上并不是基于类的，但是基于构造函数、原型对象和方法的公共模式来定义抽象类通常比较方便。 Ecmascript 内置对象本身遵循类似的模式。 从 ECMAScript 2015 开始，ECMAScript 语言包含了语法 class 定义，允许程序员精确定义符合内置对象所使用的类似抽象类模式的对象。</p><h4 id="Ecmascript-的严格模式"><a href="#Ecmascript-的严格模式" class="headerlink" title="Ecmascript 的严格模式"></a>Ecmascript 的严格模式</h4><p>Ecmascript 语言认识到了一些用户可能希望能够限制一些特性。 他们这样希望可能是出于安全考虑，或者避免他们认为某些特性容易出错，或者为了增强的错误检查，或者出于他们选择的其他原因。 为了支持这种限制，ECMAScript 定义了该语言的一个严格变体。 该语言的严格变体排除了常规 ECMAScript 语言的一些特定的语法和语义特征，并修改了一些特征的详细语义。 严格变体还指定了额外的错误条件，抛出错误异常来报告。</p><p>Ecmascript 的严格变体通常被称为语言的严格模式。 严格模式的选择和严格模式的语法和语义的使用是在各个 ECMAScript 源文本单元级别上显式地进行的。 由于严格模式是在语法源文本单元级别选择的，因此严格模式只该源文本单元施加局部限制。在多个源文本单元之间共同运行 ECMAScript 时， 严格模式不在任何方面限制或修改其他单元的语义。 一个完整的 ECMAScript 程序可以由严格模式和非严格模式的 ECMAScript 源文本单元共同组成。 在这种情况下，严格模式仅在执行定义了严格模式的源文本单元的代码时应用。</p><p>为了符合这个规范，ECMAScript 实现时必须同时实现不受限制的 ECMAScript 语言和 ECMAScript 语言的严格变体。 此外，实现必须支持将不受限制和严格模式的源文本单元组合到单个复合程序中。</p><h3 id="术语和定义"><a href="#术语和定义" class="headerlink" title="术语和定义"></a>术语和定义</h3><p>就本文件而言，适用以下术语和定义。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>本规范种第 6 节中定义的数据集合。</p><h4 id="primitive-value"><a href="#primitive-value" class="headerlink" title="primitive value"></a>primitive value</h4><p>第 6 节中 Undefined、 Null、 Boolean、 Number、 Symbol 或 String 类型之一的成员。</p><h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><p>Object 类型的成员。</p><blockquote><p>注意：对象是属性的集合，并且只有一个原型对象。原型可能是空值。</p></blockquote><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>创建和初始化对象的函数对象。</p><blockquote><p>注意：构造函数的原型属性的值是用于实现继承和共享属性的原型对象。</p></blockquote><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>为其他对象提供共享属性的对象</p><blockquote><p>注意：当构造函数创建一个对象时，该对象隐式引用构造函数的原型属性，用来解析属性。 构造函数的原型属性可以被程序表达式 constructor.prototype 引用，添加到对象原型的属性通过继承的方式被共享原型的所有对象共享。 或者可以使用 Object.create 内置函数显式的指定的原型来创建新对象。</p></blockquote><h4 id="ordinary-object"><a href="#ordinary-object" class="headerlink" title="ordinary object"></a>ordinary object</h4><p>该对象具有必须由所有对象支持的基本内部方法的默认表现。</p><h4 id="exotic-object"><a href="#exotic-object" class="headerlink" title="exotic object"></a>exotic object</h4><p>该对象不完全具备所有基本内部方法的默认表现。</p><h4 id="standard-object"><a href="#standard-object" class="headerlink" title="standard object"></a>standard object</h4><p>语义由本规范定义的对象。</p><h4 id="built-in-object"><a href="#built-in-object" class="headerlink" title="built-in object"></a>built-in object</h4><p>由 ECMAScript 的实现来指定和提供对象。</p><h4 id="undefined-value"><a href="#undefined-value" class="headerlink" title="undefined value"></a>undefined value</h4><p>当变量没有被赋值时使用的原始值。</p><h4 id="Undefined-type"><a href="#Undefined-type" class="headerlink" title="Undefined type"></a>Undefined type</h4><p>该类型唯一的值是 undefined。</p><h4 id="null-value"><a href="#null-value" class="headerlink" title="null value"></a>null value</h4><p>表示任何对象值的故意缺失的原始值。</p><h4 id="Null-type"><a href="#Null-type" class="headerlink" title="Null type"></a>Null type</h4><p>类型，其唯一值为 null</p><h4 id="Boolean-value"><a href="#Boolean-value" class="headerlink" title="Boolean value"></a>Boolean value</h4><p>Boolean 类型的成员。</p><blockquote><p>注意：只有两个 Boolean 类型的值，true 和 false。</p></blockquote><h4 id="Boolean-type"><a href="#Boolean-type" class="headerlink" title="Boolean type"></a>Boolean type</h4><p>类型，由原始值 true 和 false 组成。</p><h4 id="Boolean-object"><a href="#Boolean-object" class="headerlink" title="Boolean object"></a>Boolean object</h4><p>Object 类型的成员，它是标准内置 Boolean 构造函数的实例</p><blockquote><p>注意：在 new 表达式中使用 Boolean 构造函数创建 Boolean 对象，并提供一个 Boolean 值作为参数。 结果对象有一个内部槽，其值为 Boolean 值。 Boolean 对象可以强制为 Boolean 值。</p></blockquote><h4 id="String-value"><a href="#String-value" class="headerlink" title="String value"></a>String value</h4><p>原始值，是由任意个 16 位无符号整数值组成的有限有序序列。</p><blockquote><p>注意：String 值是 String 类型的成员。 序列中的每个整数值通常表示单个 16 位 UTF-16 文本单元。 但是，ECMAScript 没有对这些值设置任何限制或要求，除非它们必须是 16 位无符号整数。</p></blockquote><h4 id="String-type"><a href="#String-type" class="headerlink" title="String type"></a>String type</h4><p>所有可能的字符串值的集合</p><h4 id="String-object"><a href="#String-object" class="headerlink" title="String object"></a>String object</h4><p>Object 类型的成员，它是标准内置 String 构造函数的实例</p><blockquote><p>注意：通过在 new 表达式中使用 String 构造函数创建 String 对象，并提供 String 值作为参数。 结果对象有一个内部槽，其值为 String 值。 通过像 function 章节那样调用 String 构造函数 ，可以将 String 对象强制为 String 值。</p></blockquote><h4 id="Number-value"><a href="#Number-value" class="headerlink" title="Number value"></a>Number value</h4><p>与双精度 64 位二进制格式 IEEE 754-2008 值对应的原始值</p><blockquote><p>注意：Number 值是 Number 类型的成员，是数字的直接表示形式。</p></blockquote><h4 id="Number-type"><a href="#Number-type" class="headerlink" title="Number type"></a>Number type</h4><p>所有可能的 Number 值的集合，包括特殊的“ not-a-Number”(NaN)值、正无穷大和负无穷大。</p><h4 id="Number-object"><a href="#Number-object" class="headerlink" title="Number object"></a>Number object</h4><p>Object 类型的成员，它是标准内置 Number 构造函数的实例</p><blockquote><p>注意：在 new 表达式中使用 Number 构造函数创建 Number 对象，并提供一个数值作为参数。 结果对象具有一个内部槽，其值为数字值。 通过像 function 章节那样调用 Number 构造函数 ，可以将 Number 对象强制转换为一个数值。</p></blockquote><h4 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h4><p>正无穷大的数值</p><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>是 IEEE 754-2008 中“Not-a-Number”值的数字值。</p><h4 id="Symbol-value"><a href="#Symbol-value" class="headerlink" title="Symbol value"></a>Symbol value</h4><p>表示唯一的非字符串的 Object 属性键的原始值。</p><h4 id="Symbol-type"><a href="#Symbol-type" class="headerlink" title="Symbol type"></a>Symbol type</h4><p>所有可能的 Symbol 值的集合</p><h4 id="Symbol-object"><a href="#Symbol-object" class="headerlink" title="Symbol object"></a>Symbol object</h4><p>Object 类型的成员，该成员是标准内置 Symbol 构造函数的实例。</p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>可以作为子程序调用的 Object 类型的成员。</p><blockquote><p>注意：除了属性之外，函数还包含可执行代码和状态，这些代码和状态决定了函数被调用时的行为。 函数的代码不一定是用 ECMAScript 编写的。</p></blockquote><h4 id="built-in-function"><a href="#built-in-function" class="headerlink" title="built-in function"></a>built-in function</h4><p>该函数是一个内置对象。</p><blockquote><p>注意：内置函数的示例包括 parseInt 和 Math.exp。 实现时可以提供本规范中没有描述的与实现相关的内置函数。</p></blockquote><h4 id="property"><a href="#property" class="headerlink" title="property"></a>property</h4><p>对象的一部分，具有关联的键(String 值或 Symbol 值)和值。</p><blockquote><p>注意：根据 property 的形式，值可以直接表示为数据值(原始值、对象或函数对象) ，也可以通过一对访问器函数间接表示。</p></blockquote><h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4><p>是一个函数，这个函数也是是 property 的值。</p><blockquote><p>注意：当一个函数作为一个对象的方法被调用时，这个对象作为 this 值传递给函数。</p></blockquote><h4 id="built-in-method"><a href="#built-in-method" class="headerlink" title="built-in method"></a>built-in method</h4><p>方法，是一个内置函数。</p><blockquote><p>注意：本规范定义了标准的内置方法，ECMAScript 实现时可以指定并提供其他内置方法。</p></blockquote><h4 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a>attribute</h4><p>internal value that defines some characteristic of a property</p><p>内部值，定义 一个 property 的某些特征。</p><h4 id="own-property"><a href="#own-property" class="headerlink" title="own property"></a>own property</h4><p>直接包含在其对象中的属性。</p><h4 id="inherited-property"><a href="#inherited-property" class="headerlink" title="inherited property"></a>inherited property</h4><p>对象的属性，但是不是对象本身的属性，而是对象原型的属性(自身的或继承的)。</p><h3 id="本规范的结构"><a href="#本规范的结构" class="headerlink" title="本规范的结构"></a>本规范的结构</h3><p>本规范的剩余部分结构如下:</p><p>第 5 条定义了整个规范中使用的符号约定。</p><p>6-9 条定义 操作 ECMAScript 程序的执行环境。</p><p>10-16 条定义了实际的 ECMAScript 编程语言，包括它的语法编码和所有语言特性的执行语义。</p><p>17-26 条定义 ECMAScript 标准库。 它们包括所有标准对象的定义，这些对象可供 ECMAScript 程序在执行时使用。</p><p>第 27 条描述了支持 SharedArrayBuffer 内存访问的内存一致性模型和 Atomics 对象的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本节中有一句话，这句话中同时出现了 <code>property</code> 和 <code>attribute</code>，都可以翻译为“<code>属性</code>”：</p><blockquote><p>In ECMAScript, an object is a collection of zero or more <code>properties</code> each with <code>attributes</code> that determine how each <code>property</code> can be used—for example, when the Writable <code>attribute</code> for a <code>property</code> is set to false, any attempt by executed ECMAScript code to assign a different value to the <code>property</code> fails.</p></blockquote><p>翻译：</p><blockquote><p>在 ECMAScript 中，对象是由零个或多个 <code>property</code> 组成的集合，每个 <code>property</code> 都具有决定如何使用每个 <code>property</code> 的 <code>attribute</code> ——例如，当 <code>property</code> 的 <code>Writable</code> <code>attribute</code> 设置为 <code>false</code> 时，任何为 <code>property</code> 分配不同值的 ECMAScript 代码执行的尝试都将失败。</p></blockquote><p>再看规范中的定义：</p><blockquote><p><code>property</code>:<br>对象的一部分，具有关联的键(String 值或 Symbol 值)和值。<br>注意：根据 property 的形式，值可以直接表示为数据值(原始值、对象或函数对象) ，也可以通过一对访问器函数间接表示。</p></blockquote><blockquote><p><code>attribute</code>：<br>内部值，定义 一个 property 的某些特征。</p></blockquote><p>综合起来，我的理解是 <code>property</code> 是一个对象中的键值对，而 <code>attribute</code> 则是给该 <code>property</code> 设置的一些属性，比如 <code>configurable</code> 或 <code>writable</code> 之类。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时 <code>property</code> 应该是 <code>obj</code> 中的 <code>name</code> 键值对，而 <code>attribute</code> 是 <code>writable</code> 键值对，用来设置 <code>name</code> 键值对不可写。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> ECMA262 </tag>
            
            <tag> 规范 </tag>
            
            <tag> 总览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6中对feature的点击事件</title>
      <link href="/posts/3c176ac8.html"/>
      <url>/posts/3c176ac8.html</url>
      
        <content type="html"><![CDATA[<p>在最近的业务中，需要对 OpenLayers 地图上的 feature 要素点击后触发某些操作，任务完成过程中走过了一些坑，总结一下。</p><h2 id="前置代码"><a href="#前置代码" class="headerlink" title="前置代码"></a>前置代码</h2><p>放置一个实例更容易看明白过程，从官网的实例<a href="https://openlayers.org/en/latest/examples/hit-tolerance.html" target="_blank" rel="external nofollow noopener noreferrer">Hit Tolerance</a>中截取了一段代码。<br>首先准备了一个 OSM 的地图底图，再写一个线段 feature 用于触发事件，最后在最上方放置一个 <code>id</code> 为 <code>status</code> 的 span 用于展示点击结果。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>feature点击事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"status"</span>&gt;</span>没有要素被点中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> statusElement = <span class="built_in">document</span>.getElementById(<span class="string">'status'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> raster = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">'black'</span>,</span></span><br><span class="line">          width: 1</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> ol.geom.LineString([</span></span><br><span class="line">          [-4000000, 0],</span><br><span class="line">          [4000000, 0]</span><br><span class="line">        ])</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line">          features: [feature]</span><br><span class="line">        &#125;),</span><br><span class="line">        style: style</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [raster, vector],</span><br><span class="line"><span class="actionscript">        target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="on-‘click’"><a href="#on-‘click’" class="headerlink" title="on(‘click’)"></a>on(‘click’)</h2><p>按照一个前端的想法，最直接的触发一个点击事件的方式就是给 feature 添加一个 <code>on(&#39;click&#39;)</code>事件，查询一下 <code>ol.feature</code> 的 <a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html" target="_blank" rel="external nofollow noopener noreferrer">API</a>：</p><p><img src="/posts/3c176ac8/on.jpg" alt></p><p>的确有一个 <code>on</code> 方法，也是用来监听事件的，但是试验了一下，<code>on(&quot;click&quot;)</code>是不生效的，往上翻 API，发现还有几行：</p><p><img src="/posts/3c176ac8/fires.jpg" alt></p><p>只有 Fires 中的的事件类型才可以生效，吃了英语差的亏，浪费了时间，猜测原因应该是 OpenLayers 生成的时候直接整体在一个 Canvas 中渲染，内部 layers 相互重叠，并不能判断出用户点击的是哪一层。所以 <code>on(&quot;click&quot;)</code>不行，还得看其他办法。</p><h2 id="ol-interaction-Select"><a href="#ol-interaction-Select" class="headerlink" title="ol.interaction.Select"></a>ol.interaction.Select</h2><p>第二个直观的想法是 ol 中自带有交互，是否可以从 <code>ol.interaction</code> 挑一种交互类型来实现触发点击。浏览后,发现<code>select</code> 交互的 <a href="https://openlayers.org/en/latest/apidoc/module-ol_interaction_Select.html" target="_blank" rel="external nofollow noopener noreferrer">API</a> 如下：</p><p><img src="/posts/3c176ac8/select.jpg" alt></p><p>在 <code>toggleCondition</code> 中可设置一个回调函数，函数中添加要做的事情，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">  interactions: ol.interaction.defaults().extend([</span><br><span class="line">    <span class="keyword">new</span> ol.interaction.Select(&#123;</span><br><span class="line">      <span class="comment">// 点击误差20px</span></span><br><span class="line">      hitTolerance: <span class="number">20</span>,</span><br><span class="line">      toggleCondition: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        statusElement.innerHTML = <span class="string">' 一个要素被选中了!'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]),</span><br><span class="line">  layers: [raster, vector],</span><br><span class="line">  target: <span class="string">'map'</span>,</span><br><span class="line">  view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">    center: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    zoom: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码中，触发 <code>select</code> 交互时，把 <code>span</code> 标签中的内容修改为了“一个要素被选中了!”。</p><p><img src="/posts/3c176ac8/click1.gif" alt></p><h2 id="forEachFeatureAtPixel"><a href="#forEachFeatureAtPixel" class="headerlink" title="forEachFeatureAtPixel"></a>forEachFeatureAtPixel</h2><p>虽然使用 <code>interaction</code> 可以实现目的，但是 <code>ol.interaction</code> 会自动新添加一个交互托管层，并且带有默认的交互样式，仅仅为了触发一个点击事件就去使用 <code>ol.interaction</code> 实在是太重了。</p><p>在 <code>ol.map</code> 的 <a href="https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html" target="_blank" rel="external nofollow noopener noreferrer">API</a> 中有一个 <code>forEachFeatureAtPixel(pixel, callback, opt_options)</code>的方法：</p><p><img src="/posts/3c176ac8/forEachFeatureAtPixel.jpg" alt></p><p>在这个方法中，传入一个<code>像素位置</code>，返回给该像素位置对应的 feature 要素，并且还可以区分 layer，弥补了不能直接给 feature 添加点击事件的缺陷。同时配合 <code>map.on(&quot;singleclick&quot;)</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">map.on(<span class="string">'singleclick'</span>, e =&gt; &#123;</span><br><span class="line">  style.getStroke().setColor(<span class="string">'black'</span>);</span><br><span class="line">  statusElement.innerHTML = <span class="string">' 没有要素被选中.'</span>;</span><br><span class="line">  map.forEachFeatureAtPixel(</span><br><span class="line">    e.pixel,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      style.getStroke().setColor(<span class="string">'green'</span>);</span><br><span class="line">      statusElement.innerHTML = <span class="string">' 一个要素被选中了!'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      hitTolerance: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  feature.changed();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码中首先使用 <code>map.on(&quot;singleclick&quot;)</code>触发一个 <code>map</code> 的点击事件，回调参数为 <code>e</code>，再使用 <code>forEachFeatureAtPixel</code> 配合 <code>e.pixel</code> 读取该像素下的要素，如果有就把颜色改为绿色，并把内容改为“一个要素被选中了!”，再使用 <code>changed()</code>方法派发一个 <code>change</code> 事件，触发修改后内容的渲染，最后结果如下：</p><p><img src="/posts/3c176ac8/click2.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
            <tag> feature </tag>
            
            <tag> 点击事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts径向条形图（玉玦图）实例分析</title>
      <link href="/posts/2efa5977.html"/>
      <url>/posts/2efa5977.html</url>
      
        <content type="html"><![CDATA[<p>径向条形图（Radial Bar Chart），就是把普通笛卡尔二维坐标系中的条形图转为极坐标系下展示，使用弧度来表示数值大小。</p><p>如下图所示，在本文中解析一个 <a href="https://gallery.echartsjs.com/explore.html#components=polar~sort=rank~timeframe=all~author=all" target="_blank" rel="external nofollow noopener noreferrer">ECharts Gallery</a> 中的<a href="https://gallery.echartsjs.com/editor.html?c=xH1tdGk2L7" target="_blank" rel="external nofollow noopener noreferrer">径向条形图实例</a>，顺带学习 ECharts 中极坐标系、颜色渐变和自定义系列的用法。</p><a id="more"></a><p><img src="/posts/2efa5977/%E7%8E%89%E7%8E%A6%E5%9B%BE%E5%AE%9E%E4%BE%8B.png" alt></p><p>附带说一下，有时候也把径向条形图叫做玉玦图。古人曾经云过：“满者为环，缺者玦”，玉环都知道是什么样子，缺一块的玉环叫玉玦，用玉玦来称呼径向条形图真的是挺形象。</p><p><img src="/posts/2efa5977/%E7%8E%89%E7%8E%A6.jpg" alt></p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>首先把基本结构如下，给 ECharts 准备一个 DOM 容器用来初始化实例，自定义一组数据 <code>data</code> 和配置项 <code>option</code>，最后给实例 <code>chart</code> 设置 <code>option</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts径向条形图（Radial Bar Chart）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-id">#container</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'container'</span>));</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 把数据按照从大到小的顺序排列</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> data = [</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'张三'</span>, value: <span class="number">88</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'李四'</span>, value: <span class="number">250</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'王五'</span>, value: <span class="number">5438</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'赵六'</span>, value: <span class="number">8848</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'陈七'</span>, value: <span class="number">9527</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'朱八'</span>, value: <span class="number">10086</span> &#125;</span></span><br><span class="line"><span class="javascript">      ].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.value &gt; b.value);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> option = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ......</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ......</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ......</span></span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line">      chart.setOption(option);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据 <code>data</code> 提前进行了排序，排列出来的径向条形图更美观。</p><h2 id="坐标系配置"><a href="#坐标系配置" class="headerlink" title="坐标系配置"></a>坐标系配置</h2><p>这个实例中由于使用的是<code>极坐标系</code>，所以需要专门配置，本节中需要用的配置项如下：</p><ul><li><a href="https://echarts.apache.org/zh/option.html#polar" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#polar</a></li><li><a href="https://echarts.apache.org/zh/option.html#angleAxis" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#angleAxis</a></li><li><a href="https://echarts.apache.org/zh/option.html#radiusAxis" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#radiusAxis</a></li><li><a href="https://echarts.apache.org/zh/option.html#radiusAxis.axisLabel" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#radiusAxis.axisLabel</a></li><li><a href="https://echarts.apache.org/zh/option.html#radiusAxis.axisLine" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#radiusAxis.axisLine</a></li><li><a href="https://echarts.apache.org/zh/option.html#radiusAxis.axisTick" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#radiusAxis.axisTick</a></li><li><a href="https://echarts.apache.org/zh/option.html#radiusAxis.splitLine" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#radiusAxis.splitLine</a></li><li><a href="https://echarts.apache.org/zh/option.html#radiusAxis.data" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#radiusAxis.data</a></li></ul><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  backgroundColor: <span class="string">'#000'</span>,</span><br><span class="line">  tooltip: &#123;&#125;,</span><br><span class="line">  polar: &#123;</span><br><span class="line">    radius: [<span class="string">'10%'</span>, <span class="string">'80%'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  angleAxis: &#123;</span><br><span class="line">    show: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 最小值是0°处的数值，最大值是360°处的数值，避免出现弧度为0和2PI的数据</span></span><br><span class="line">    min: <span class="function"><span class="params">value</span> =&gt;</span> (value.min &gt;= <span class="number">1</span> ? value.min - value.max / <span class="number">3</span> : <span class="number">0</span>),</span><br><span class="line">    max: <span class="function"><span class="params">value</span> =&gt;</span> (value.max * <span class="number">4</span>) / <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  radiusAxis: &#123;</span><br><span class="line">    type: <span class="string">'category'</span>,</span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      interval: <span class="number">0</span>,</span><br><span class="line">      color: <span class="string">'#2df'</span>,</span><br><span class="line">      fontSize: <span class="number">16</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      show: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    axisTick: &#123;</span><br><span class="line">      show: <span class="literal">false</span>,</span><br><span class="line">      alignWithLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    splitLine: &#123;</span><br><span class="line">      show: <span class="literal">true</span>,</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">'rgba(17, 51, 68, 0.8)'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: data.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  series: [</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大部分的配置都是一些细节样式上的调整，最关键的三项是 <code>polor</code>、<code>angleAxis</code> 和 <code>data</code>。设置 <code>polor</code> 属性后自动变为径向坐标系，并加了一个最小半径 <code>10%</code>和最大半径 <code>80%</code>。<br><code>angleAxis</code> 是角度轴的设置，<code>min</code> 和 <code>max</code> 指的是的是 <code>0°</code> 和 <code>360°</code> 代表的数值。在这里为了避免数值过小的数据显示不明显，同时不让数值过大的数据把圆环填满，故意把 <code>min</code> 和 <code>max</code> 从数据的<code>大小极限</code>向外拓展了一段，形成一个比较美观的玉玦效果。<br><code>radiusAxis</code> 是径向轴的设置，<code>radiusAxis.data</code> 属性返回的是数据中的每一项的 <code>name</code>，目的是显示张三李四这一系列的数据名。</p><h2 id="条形图配置"><a href="#条形图配置" class="headerlink" title="条形图配置"></a>条形图配置</h2><p>系列中 bar 条形图配置的部分比较普通，本节中需要用的配置项如下：</p><ul><li><a href="https://echarts.apache.org/zh/option.html#series-bar" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#series-bar</a></li><li><a href="https://echarts.apache.org/zh/option.html#series-bar.itemStyle" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#series-bar.itemStyle</a></li><li><a href="https://echarts.apache.org/zh/option.html#series-bar.emphasis" target="_blank" rel="external nofollow noopener noreferrer">https://echarts.apache.org/zh/option.html#series-bar.emphasis</a></li></ul><p>关于条形图部分的配置代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      coordinateSystem: <span class="string">'polar'</span>,</span><br><span class="line">      barWidth: <span class="number">15</span>,</span><br><span class="line">      itemStyle: &#123;</span><br><span class="line">        <span class="comment">// // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置</span></span><br><span class="line">        color: &#123;</span><br><span class="line">          type: <span class="string">'linear'</span>,</span><br><span class="line">          x: <span class="number">1</span>,</span><br><span class="line">          y: <span class="number">0</span>,</span><br><span class="line">          x2: <span class="number">0</span>,</span><br><span class="line">          y2: <span class="number">0.5</span>,</span><br><span class="line">          colorStops: [</span><br><span class="line">            &#123; <span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'rgba(50, 120, 150, 0.5)'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">offset</span>: <span class="number">0.5</span>, <span class="attr">color</span>: <span class="string">'rgba(80, 190, 210, 0.7)'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'rgba(255, 255, 255, 0.9)'</span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        barBorderRadius: <span class="number">10</span>,</span><br><span class="line">        shadowBlur: <span class="number">20</span>,</span><br><span class="line">        shadowColor: <span class="string">'rgba(255, 255, 255, 0.8)'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      emphasis: &#123;</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          shadowColor: <span class="string">'rgba(255, 255, 255, 1)'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      data: data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="颜色渐变"><a href="#颜色渐变" class="headerlink" title="颜色渐变"></a>颜色渐变</h3><p>条形图的配置比较普通，但是上述代码中明显不普通的地方是 <code>itemStyle.color</code>，这里的颜色使用的是<code>渐变</code>。虽然在 ECharts 文档中并没有对这里的颜色能渐变进行说明，但是在<a href="https://echarts.apache.org/zh/option.html#tooltip.axisPointer.lineStyle.color" target="_blank" rel="external nofollow noopener noreferrer">其他的配置</a>中找到了对渐变的描述：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比。</span></span><br><span class="line"><span class="comment">// 如果 globalCoord 为 `true`，则该四个值是绝对的像素位置</span></span><br><span class="line">color: &#123;</span><br><span class="line">    type: <span class="string">'linear'</span>,</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">    x2: <span class="number">0</span>,</span><br><span class="line">    y2: <span class="number">1</span>,</span><br><span class="line">    colorStops: [&#123;</span><br><span class="line">        offset: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'red'</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        offset: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'blue'</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">    &#125;],</span><br><span class="line">    global: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变</span></span><br><span class="line">color: &#123;</span><br><span class="line">    type: <span class="string">'radial'</span>,</span><br><span class="line">    x: <span class="number">0.5</span>,</span><br><span class="line">    y: <span class="number">0.5</span>,</span><br><span class="line">    r: <span class="number">0.5</span>,</span><br><span class="line">    colorStops: [&#123;</span><br><span class="line">        offset: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'red'</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        offset: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'blue'</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">    &#125;],</span><br><span class="line">    global: <span class="literal">false</span> <span class="comment">// 缺省为 false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 纹理填充</span></span><br><span class="line">color: &#123;</span><br><span class="line">    image: imageDom, <span class="comment">// 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串</span></span><br><span class="line">    repeat: <span class="string">'repeat'</span> <span class="comment">// 是否平铺, 可以是 'repeat-x', 'repeat-y', 'no-repeat'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在玉玦图的代码中渐变的意思就是从<code>[100%, 0%]</code>的右上角到<code>[0%, 50%]</code>的左中位置的线性渐变，并在中间加了<code>颜色停顿点</code>。</p><p>需要说明的是，ECharts 还有另一种渐变方式，大家用的非常多但是至今没有文档说明：<code>echarts.graphic.LinearGradient</code>，使用方式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    type: <span class="string">'bar'</span>,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">            color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">                [</span><br><span class="line">                    &#123;<span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'#000'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">offset</span>: <span class="number">0.5</span>, <span class="attr">color</span>: <span class="string">'#888'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'#ddd'</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中前四个参数依次对应右、下、左、上四个方位，比如 <code>0,0,0,1</code> 代表从正上方往正下方渐变，<code>0,1,1,0</code> 代表从左下方往右上方渐变，颜色停止点的理解与上述配置式的颜色停止点相同。</p><h2 id="自定义系列"><a href="#自定义系列" class="headerlink" title="自定义系列"></a>自定义系列</h2><p>在玉玦图中，还有一个非常重要需要理解的地方就是每条 bar 后面都跟着一个数字 <code>value</code>，这里使用<code>自定义系列</code>加上去的。<a href="https://www.echartsjs.com/zh/option.html#series-custom" target="_blank" rel="external nofollow noopener noreferrer">自定义序列</a>是 ECharts 为了方便开发者能够跳出固定配置项，按照自己的想法自由渲染图表而推出的一个配置。</p><p>本节中需要查看的配置项如下：</p><ul><li><a href="https://www.echartsjs.com/zh/option.html#series-custom" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-custom</a></li><li><a href="https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.params" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.params</a></li><li><a href="https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.api" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.api</a></li><li><a href="https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.api.value" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.api.value</a></li><li><a href="https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.api.coord" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-custom.renderItem.arguments.api.coord</a></li></ul><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">series: [</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'custom'</span>,</span><br><span class="line">    coordinateSystem: <span class="string">'polar'</span>,</span><br><span class="line">    renderItem: <span class="function">(<span class="params">params, api</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 给定维度上的值</span></span><br><span class="line">      <span class="keyword">let</span> values = [api.value(<span class="number">0</span>), api.value(<span class="number">1</span>)];</span><br><span class="line">      <span class="comment">// 对于polar坐标系，还会包含其他信息：polar: [x, y, radius, angle]</span></span><br><span class="line">      <span class="keyword">let</span> coord = api.coord(values);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'text'</span>,</span><br><span class="line">        position: [<span class="number">3</span> * <span class="built_in">Math</span>.sin(coord[<span class="number">3</span>]), <span class="number">3</span> * <span class="built_in">Math</span>.cos(coord[<span class="number">3</span>])],</span><br><span class="line">        rotation: coord[<span class="number">3</span>] + <span class="built_in">Math</span>.PI / <span class="number">2</span>,</span><br><span class="line">        origin: [coord[<span class="number">0</span>], coord[<span class="number">1</span>]],</span><br><span class="line">        style: &#123;</span><br><span class="line">          text: api.value(<span class="number">1</span>),</span><br><span class="line">          fill: <span class="string">'#ac6'</span>,</span><br><span class="line">          fontSize: <span class="number">16</span>,</span><br><span class="line">          textAlign: <span class="string">'right'</span>,</span><br><span class="line">          textVerticalAlign: <span class="string">'middle'</span>,</span><br><span class="line">          x: coord[<span class="number">0</span>],</span><br><span class="line">          y: coord[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    data: data</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>自定义序列的 <code>type</code> 是 <code>custom</code>，又给赋予了一个 <code>polar</code> 极坐标系和数据 <code>data</code>，最关键的地方是 <code>renderItem</code>（<code>自定义渲染逻辑</code>）。</p><p><code>renderItem</code> 函数有两个参数 <code>params</code> 和 <code>api</code>，第一个 <code>params</code> 主要包含以下内容，基本上全是坐标系和数据的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    context: <span class="comment">// &#123;Object&#125; 一个可供开发者暂存东西的对象。生命周期只为：当前次的渲染。</span></span><br><span class="line">    seriesId: <span class="comment">// &#123;string&#125; 本系列 id。</span></span><br><span class="line">    seriesName: <span class="comment">// &#123;string&#125; 本系列 name。</span></span><br><span class="line">    seriesIndex: <span class="comment">// &#123;number&#125; 本系列 index。</span></span><br><span class="line">    dataIndex: <span class="comment">// &#123;number&#125; 数据项的 index。</span></span><br><span class="line">    dataIndexInside: <span class="comment">// &#123;number&#125; 数据项在当前坐标系中可见的数据的 index（即 dataZoom 当前窗口中的数据的 index）。</span></span><br><span class="line">    dataInsideLength: <span class="comment">// &#123;number&#125; 当前坐标系中可见的数据长度（即 dataZoom 当前窗口中的数据数量）。</span></span><br><span class="line">    actionType: <span class="comment">// &#123;string&#125; 触发此次重绘的 action 的 type。</span></span><br><span class="line">    coordSys: <span class="comment">// 不同的坐标系中，coordSys 里的信息不一样，含有如下这些可能：</span></span><br><span class="line">    coordSys: &#123;</span><br><span class="line">        type: <span class="string">'cartesian2d'</span>,</span><br><span class="line">        x: <span class="comment">// &#123;number&#125; grid rect 的 x</span></span><br><span class="line">        y: <span class="comment">// &#123;number&#125; grid rect 的 y</span></span><br><span class="line">        width: <span class="comment">// &#123;number&#125; grid rect 的 width</span></span><br><span class="line">        height: <span class="comment">// &#123;number&#125; grid rect 的 height</span></span><br><span class="line">    &#125;,</span><br><span class="line">    coordSys: &#123;</span><br><span class="line">        type: <span class="string">'calendar'</span>,</span><br><span class="line">        x: <span class="comment">// &#123;number&#125; calendar rect 的 x</span></span><br><span class="line">        y: <span class="comment">// &#123;number&#125; calendar rect 的 y</span></span><br><span class="line">        width: <span class="comment">// &#123;number&#125; calendar rect 的 width</span></span><br><span class="line">        height: <span class="comment">// &#123;number&#125; calendar rect 的 height</span></span><br><span class="line">        cellWidth: <span class="comment">// &#123;number&#125; calendar cellWidth</span></span><br><span class="line">        cellHeight: <span class="comment">// &#123;number&#125; calendar cellHeight</span></span><br><span class="line">        rangeInfo: &#123;</span><br><span class="line">            start: <span class="comment">// calendar 日期开端</span></span><br><span class="line">            end: <span class="comment">// calendar 日期结尾</span></span><br><span class="line">            weeks: <span class="comment">// calendar 周数</span></span><br><span class="line">            dayCount: <span class="comment">// calendar 日数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    coordSys: &#123;</span><br><span class="line">        type: <span class="string">'geo'</span>,</span><br><span class="line">        x: <span class="comment">// &#123;number&#125; geo rect 的 x</span></span><br><span class="line">        y: <span class="comment">// &#123;number&#125; geo rect 的 y</span></span><br><span class="line">        width: <span class="comment">// &#123;number&#125; geo rect 的 width</span></span><br><span class="line">        height: <span class="comment">// &#123;number&#125; geo rect 的 height</span></span><br><span class="line">        zoom: <span class="comment">// &#123;number&#125; 缩放的比率。如果没有缩放，则值为 1。例如 0.5 表示缩小了一半。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    coordSys: &#123;</span><br><span class="line">        type: <span class="string">'polar'</span>,</span><br><span class="line">        cx: <span class="comment">// &#123;number&#125; polar 的中心坐标</span></span><br><span class="line">        cy: <span class="comment">// &#123;number&#125; polar 的中心坐标</span></span><br><span class="line">        r: <span class="comment">// &#123;number&#125; polar 的外半径</span></span><br><span class="line">        r0: <span class="comment">// &#123;number&#125; polar 的内半径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    coordSys: &#123;</span><br><span class="line">        type: <span class="string">'singleAxis'</span>,</span><br><span class="line">        x: <span class="comment">// &#123;number&#125; singleAxis rect 的 x</span></span><br><span class="line">        y: <span class="comment">// &#123;number&#125; singleAxis rect 的 y</span></span><br><span class="line">        width: <span class="comment">// &#123;number&#125; singleAxis rect 的 width</span></span><br><span class="line">        height: <span class="comment">// &#123;number&#125; singleAxis rect 的 height</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个参数 <code>api</code>，返回一些方法，这里只用到的两个：<code>value</code> 和 <code>coord</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value得到给定维度的数据值:</span></span><br><span class="line">@param &#123;number&#125; dimension 指定的维度（维度从 <span class="number">0</span> 开始计数）。</span><br><span class="line">@param &#123;number&#125; [dataIndexInside] 一般不用传，默认就是当前数据项的 dataIndexInside。</span><br><span class="line">@<span class="keyword">return</span> &#123;number&#125; 给定维度上的值。</span><br><span class="line"></span><br><span class="line"><span class="comment">// coord将数据值映射到坐标系上:</span></span><br><span class="line">@param &#123;<span class="built_in">Array</span>.&lt;number&gt;&#125; data 数据值。</span><br><span class="line">@<span class="keyword">return</span> &#123;<span class="built_in">Array</span>.&lt;number&gt;&#125; 画布上的点的坐标，至少包含：[x, y]</span><br><span class="line">        对于polar坐标系，还会包含其他信息：</span><br><span class="line">        polar: [x, y, radius, angle]</span><br></pre></td></tr></table></figure><p>所以在代码中，先用 <code>value()</code>获取了当前 item 的数据值，再传给 <code>coord()</code>计算得到了该点在极坐标系中的位置<code>[x, y, radius, angle]</code>。</p><p>接下来在 <code>return</code> 时，返回了一个 <code>text</code> 类型。<code>text</code> 类型中的 <code>origin</code> 指定旋转、缩放和平移的基准点，在这个实例中中就是 <code>x</code> 和<code>y</code>；<code>position</code> 指定平移多少距离，在这里使用 <code>sin(angle)</code>和 <code>cos(angle)</code>计算当前点的切线方向，将文字平移了 <code>3px</code>；<code>rotation</code> 使用 <code>angle</code> 加上了 <code>90°</code>，将文字延切线摆放。<code>returns.style</code> 中给文字设定了<code>文本值</code>、<code>xy 坐标</code>和其他的一些样式，完成了文本类型的返回。</p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts径向条形图（Radial Bar Chart）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-id">#container</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'container'</span>));</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 把数据按照从大到小的顺序排列</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> data = [</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'张三'</span>, value: <span class="number">88</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'李四'</span>, value: <span class="number">250</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'王五'</span>, value: <span class="number">5438</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'赵六'</span>, value: <span class="number">8848</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'陈七'</span>, value: <span class="number">9527</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        &#123; name: <span class="string">'朱八'</span>, value: <span class="number">10086</span> &#125;</span></span><br><span class="line"><span class="javascript">      ].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.value &gt; b.value);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> option = &#123;</span></span><br><span class="line"><span class="actionscript">        backgroundColor: <span class="string">'#000'</span>,</span></span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        polar: &#123;</span><br><span class="line"><span class="actionscript">          radius: [<span class="string">'10%'</span>, <span class="string">'80%'</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        angleAxis: &#123;</span><br><span class="line"><span class="actionscript">          show: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 最小值是0°处的数值，最大值是360°处的数值，避免出现弧度为0和2PI的数据</span></span></span><br><span class="line"><span class="javascript">          min: <span class="function"><span class="params">value</span> =&gt;</span> (value.min &gt;= <span class="number">1</span> ? value.min - value.max / <span class="number">3</span> : <span class="number">0</span>),</span></span><br><span class="line"><span class="javascript">          max: <span class="function"><span class="params">value</span> =&gt;</span> (value.max * <span class="number">4</span>) / <span class="number">3</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        radiusAxis: &#123;</span><br><span class="line"><span class="actionscript">          type: <span class="string">'category'</span>,</span></span><br><span class="line">          axisLabel: &#123;</span><br><span class="line">            interval: 0,</span><br><span class="line"><span class="actionscript">            color: <span class="string">'#2df'</span>,</span></span><br><span class="line">            fontSize: 16</span><br><span class="line">          &#125;,</span><br><span class="line">          axisLine: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">false</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          axisTick: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            alignWithLabel: <span class="literal">true</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          splitLine: &#123;</span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span>,</span></span><br><span class="line">            lineStyle: &#123;</span><br><span class="line"><span class="actionscript">              color: <span class="string">'rgba(17, 51, 68, 0.8)'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          data: data.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name)</span></span><br><span class="line">        &#125;,</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">'bar'</span>,</span></span><br><span class="line"><span class="actionscript">            coordinateSystem: <span class="string">'polar'</span>,</span></span><br><span class="line">            barWidth: 15,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置</span></span></span><br><span class="line">              color: &#123;</span><br><span class="line"><span class="actionscript">                type: <span class="string">'linear'</span>,</span></span><br><span class="line">                x: 1,</span><br><span class="line">                y: 0,</span><br><span class="line">                x2: 0,</span><br><span class="line">                y2: 0.5,</span><br><span class="line">                colorStops: [</span><br><span class="line"><span class="actionscript">                  &#123; offset: <span class="number">0</span>, color: <span class="string">'rgba(50, 120, 150, 0.5)'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                  &#123; offset: <span class="number">0.5</span>, color: <span class="string">'rgba(80, 190, 210, 0.7)'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">                  &#123; offset: <span class="number">1</span>, color: <span class="string">'rgba(255, 255, 255, 0.9)'</span> &#125;</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">              barBorderRadius: 10,</span><br><span class="line">              shadowBlur: 20,</span><br><span class="line"><span class="actionscript">              shadowColor: <span class="string">'rgba(255, 255, 255, 0.8)'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            emphasis: &#123;</span><br><span class="line">              itemStyle: &#123;</span><br><span class="line"><span class="actionscript">                shadowColor: <span class="string">'rgba(255, 255, 255, 1)'</span></span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            data: data</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">'custom'</span>,</span></span><br><span class="line"><span class="actionscript">            coordinateSystem: <span class="string">'polar'</span>,</span></span><br><span class="line"><span class="javascript">            renderItem: <span class="function">(<span class="params">params, api</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 给定维度上的值。</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> values = [api.value(<span class="number">0</span>), api.value(<span class="number">1</span>)];</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 对于polar坐标系，还会包含其他信息：polar: [x, y, radius, angle]</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> coord = api.coord(values);</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'text'</span>,</span></span><br><span class="line"><span class="javascript">                position: [<span class="number">3</span> * <span class="built_in">Math</span>.sin(coord[<span class="number">3</span>]), <span class="number">3</span> * <span class="built_in">Math</span>.cos(coord[<span class="number">3</span>])],</span></span><br><span class="line"><span class="javascript">                rotation: coord[<span class="number">3</span>] + <span class="built_in">Math</span>.PI / <span class="number">2</span>,</span></span><br><span class="line">                origin: [coord[0], coord[1]],</span><br><span class="line">                style: &#123;</span><br><span class="line">                  text: api.value(1),</span><br><span class="line"><span class="actionscript">                  fill: <span class="string">'#ac6'</span>,</span></span><br><span class="line">                  fontSize: 16,</span><br><span class="line"><span class="actionscript">                  textAlign: <span class="string">'right'</span>,</span></span><br><span class="line"><span class="actionscript">                  textVerticalAlign: <span class="string">'middle'</span>,</span></span><br><span class="line">                  x: coord[0],</span><br><span class="line">                  y: coord[1]</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            data: data</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line">      chart.setOption(option);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> ECharts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 前端 </tag>
            
            <tag> ECharts </tag>
            
            <tag> 玉玦图 </tag>
            
            <tag> 径向条形图 </tag>
            
            <tag> Radial Bar Chart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3中border-image的草案翻译和应用</title>
      <link href="/posts/56b66aa5.html"/>
      <url>/posts/56b66aa5.html</url>
      
        <content type="html"><![CDATA[<p>有些时候 UI 给切的背景，并不能适配所有长宽比的元素，这个时候就需要一个非常强大的 CSS 属性：<code>border-image</code>，下面先翻译<code>border-image</code>相关的<a href="https://drafts.csswg.org/css-backgrounds-3/#propdef-border-image-source" target="_blank" rel="external nofollow noopener noreferrer">W3C 规范草案</a>，再举例说明如何应用到元素背景中。</p><h2 id="草案翻译"><a href="#草案翻译" class="headerlink" title="草案翻译"></a>草案翻译</h2><p>开发者可以指定用来替代 <code>border-style</code> 的图像。在这种情况下，<code>border</code> 取自 <code>border-image-source</code> 指定的图像的边缘和角落，这些图像的碎片可以通过各种方式进行切片、缩放和拉伸，以适应<a href="https://drafts.csswg.org/css-backgrounds-3/#border-image-area" target="_blank" rel="external nofollow noopener noreferrer">边框图像区域</a>的大小。 边框图像属性不影响布局: 盒的布局、内容和环绕内容仅基于 <code>border-width</code> 和 <code>border-style</code> 属性的影响。</p><a id="more"></a><p>示例 26：</p><p>这个例子创建了一个顶部和底部的 <code>border</code>，<code>border</code> 中包含大量的橙色钻石，左右 <code>border</code> 是一个单一的拉伸钻石，<code>border</code> 的四个角是不同颜色的钻石。 平铺开的图像如下所示，除了钻石以外，其余部分都是透明的:</p><p><img src="/posts/56b66aa5/border.png" alt></p><p>这个图像是 <code>81 × 81</code> 像素，被分成 <code>9</code> 个大小相等的部分。 因此，样式规则可以如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: double orange <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">'border.png'</span>) <span class="number">27</span> round stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把上述样式应用到 <code>12×5em</code> 的 DIV 上，结果如下所示：</p><p><img src="/posts/56b66aa5/borderresult.png" alt></p><p>示例 27：</p><p>这个示例展示了一个更复杂的情况，演示了边框图像如何对应到预备的 <code>border-style</code> 并且可以扩展到边框区域之外。边框图像是一个带有四角突出效果的绿色波浪边框:</p><p><img src="/posts/56b66aa5/groovy-border-image-slice.png" alt></p><p><code>border-image-source</code> 属性对应的图像，使用 <code>4</code> 个 <code>124px</code> 的 <code>border-image-slice</code> 属性分割图像，将图像分成了 <code>9</code> 个部分。</p><p>然后，其余的 <code>border</code> 属性相互作用，按照以下方式布局:</p><p><img src="/posts/56b66aa5/border-image.png" alt></p><p>上图展示了所有的 <code>border-image</code> 属性的相互作用，并且展示了是否使用 <code>border-image</code> 属性对渲染结果的影响。</p><p>在本示例中，即使 <code>border-width</code> 是 <code>12px</code>，<code>border-image-width</code> 依然会计算为 <code>124px</code>。这个边框图像在 <code>border</code> 外 <code>31px</code> 处开始，并且进入了 <code>margin</code> 区域。如果 <code>border-image</code> 加载失败(或者浏览器不支持 <code>border-images</code>) ，预备渲染将使用绿色双实线样式的 <code>border</code>。</p><p>示例 28：</p><p>注意：边框样式简写“<code>border</code>”的将重置 <code>border-image</code>。 这样可以很容易地关闭或重置所有边框效果:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.notebox</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: double orange;</span><br><span class="line">  <span class="comment">/* 必须先设置简写 'border',否则'border-image'样式不会显示 */</span></span><br><span class="line">  <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">'border.png'</span>) <span class="number">30</span> round;</span><br><span class="line">  <span class="comment">/* 但是其他的border属性可以之后设置 */</span></span><br><span class="line">  <span class="attribute">border-width</span>: thin thick;</span><br><span class="line">&#125;</span><br><span class="line">... <span class="selector-class">.sidebar</span> <span class="selector-class">.notebox</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> gray;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none; <span class="comment">/* 关闭所有的边框 */</span></span><br><span class="line">  <span class="comment">/* 'border'简写重置了 'border-image' */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图像来源：border-image-source-属性"><a href="#图像来源：border-image-source-属性" class="headerlink" title="图像来源：border-image-source 属性"></a>图像来源：border-image-source 属性</h3><table><thead><tr><th>名称</th><th>border-image-source</th></tr></thead><tbody><tr><td>值</td><td>none |image</td></tr><tr><td>默认值</td><td>none</td></tr><tr><td>适用范围</td><td>所有元素，除了 border-collapse 为 collapse 的内部 table 元素</td></tr><tr><td>继承</td><td>无</td></tr><tr><td>百分比</td><td>不适用</td></tr><tr><td>计算值</td><td>关键字 none 或者 image 计算值</td></tr><tr><td>动画类型</td><td>离散</td></tr></tbody></table><p>指定一个图像用于替代 <code>border-style</code> 属性的渲染结果，如果在 <code>border-image-slice</code> 中给定 <code>fill</code> 关键字，则把图像也用作元素的附加图像背景。 如果值为 <code>none</code> 或者图像无法显示(或者属性未时使用) ，则使用 <code>border</code> 样式；否则不绘制元素的 <code>border-style</code> 样式边框，而按照下面部分所述绘制边框图像。</p><h3 id="图像切片：border-image-slice-属性"><a href="#图像切片：border-image-slice-属性" class="headerlink" title="图像切片：border-image-slice 属性"></a>图像切片：border-image-slice 属性</h3><table><thead><tr><th>名称</th><th>border-image-slice</th></tr></thead><tbody><tr><td>值</td><td>number|percentage，fill</td></tr><tr><td>默认值</td><td>100%</td></tr><tr><td>适用范围</td><td>所有元素，除了 border-collapse 为 collapse 的内部 table 元素</td></tr><tr><td>继承</td><td>无</td></tr><tr><td>百分比</td><td>参考边框图像的大小</td></tr><tr><td>计算值</td><td>4 个数字或者百分比，如果 fill 指定还需要加上 fill</td></tr><tr><td>动画类型</td><td>按照计算值来实现</td></tr></tbody></table><p>此属性指定图像上、右、下和左边缘向内的偏移量，并将其划分为九个区域：四个角、四条边和一个中间区域。 除非 <code>fill</code> 关键字出现，否则中间图像部分将被丢废弃(视为完全透明)。 (中间部分是在背景上绘制的; )</p><p>当四个属性指定了以后，就按照上右下左顺序设置偏移量。如果左偏移缺失，和右偏移相等；下偏移缺失，和上偏移相等；右偏移缺失，和上偏移相等。</p><ul><li><p><a href="https://www.w3.org/TR/css-values-3/#percentage-value" target="_blank" rel="external nofollow noopener noreferrer">百分比</a></p><p>百分比值与图像的大小有关: 水平偏移量参照图像宽度，垂直偏移量参照图像高度</p></li><li><p><a href="https://www.w3.org/TR/css-values-3/#number-value" target="_blank" rel="external nofollow noopener noreferrer">数字</a></p><p>数字表示图像中的像素(如果图像是位图)或矢量坐标(如果图像是矢量图)。</p></li><li><p><a href="https://drafts.csswg.org/css-backgrounds-3/#border-image-slice-fill" target="_blank" rel="external nofollow noopener noreferrer">fill</a></p><p>fill 关键字如果存在，则保留边框图像的中间部分。 (默认情况下不使用 fill)。</p></li></ul><p>负值是无效的。大于图像尺寸的计算值被解释为 <code>100%</code>。</p><p>由 <code>border-image-slice</code> 指定的区域可以重叠。但是如果左右偏移的宽度之和大于等于图像宽度，则上中，下中和最中间位置处的图像为空，与这三个部分指定了非空的透明图像效果相同。上下偏移宽度和大于图像高度时结果是类似的。</p><p>如果必须对图像进行大小调整才能确定切片（例如，没有内置大小的 SVG 图像），则使用<a href="https://www.w3.org/TR/css-images-3/#default-sizing" target="_blank" rel="external nofollow noopener noreferrer">默认尺寸调整算法</a>设置图像大小，并将边框图像区域作为<a href="https://www.w3.org/TR/css-images-3/#default-object-size" target="_blank" rel="external nofollow noopener noreferrer">默认对象尺寸</a>。</p><p><img src="/posts/56b66aa5/slice.png" alt></p><p>上图展示了按照 25% 30% 12% 20%切割图像的示意。</p><h3 id="绘图范围：border-image-width-属性"><a href="#绘图范围：border-image-width-属性" class="headerlink" title="绘图范围：border-image-width 属性"></a>绘图范围：border-image-width 属性</h3><table><thead><tr><th>名称</th><th>border-image-width</th></tr></thead><tbody><tr><td>值</td><td>number|length-percentage|auto</td></tr><tr><td>默认值</td><td>1</td></tr><tr><td>适用范围</td><td>所有元素，除了 border-collapse 为 collapse 的内部 table 元素</td></tr><tr><td>继承</td><td>无</td></tr><tr><td>百分比</td><td>参考边框图像范围的 width/height</td></tr><tr><td>计算值</td><td>4 个值，每一个都可以是数字，关键字 auto 或长度百分比计算值</td></tr><tr><td>动画类型</td><td>按照计算值来实现</td></tr></tbody></table><p>边框图像是在一个称为边框图像区域的范围内绘制的。 默认情况下，边界与边框盒对应。</p><p><code>border-image-width</code> 的四个值指定用于将边框图像区域分为九个部分的偏移量。 它们分别表示从该区域的上、右、下和左侧向内的距离。 如果左宽度缺失，和右宽度相等; 如果下宽度缺失，和上宽度相等; 如果右宽度缺失，和上宽度相等。 值有以下含义:</p><ul><li><p><a href="https://www.w3.org/TR/css-values-4/#typedef-length-percentage" target="_blank" rel="external nofollow noopener noreferrer">length-percentage</a></p><p>百分比参考的是边框图像区域的大小: 水平偏移量参考区域宽度，垂直偏移量参考区域高度。</p></li><li><p><a href="https://www.w3.org/TR/css-values-3/#number-value" target="_blank" rel="external nofollow noopener noreferrer">number</a></p><p>数字表示相应 <code>border-width</code> 计算值的倍数。</p></li><li><p><a href="https://drafts.csswg.org/css-backgrounds-3/#valdef-border-image-width-auto" target="_blank" rel="external nofollow noopener noreferrer">auto</a></p><p>如果指定了 <code>auto</code>，则边框图像宽度是相对应图像切片的内部宽度或高度。 如果图像没有所需的内部宽高，那么用相对应的 <code>border-width</code> 计算值来代替。</p></li></ul><p>任何 <code>boder-image-width</code> 值都不允许使用负值。</p><p>如果两个相反的 <code>border-image-width</code> 偏移量大到以至于重叠，那么所有 <code>border-image-width</code> 偏移量的使用值都会按比例减少，直到它们不再重叠。</p><h3 id="边缘超出：border-image-outset-属性"><a href="#边缘超出：border-image-outset-属性" class="headerlink" title="边缘超出：border-image-outset 属性"></a>边缘超出：border-image-outset 属性</h3><table><thead><tr><th>名称</th><th>border-image-outset</th></tr></thead><tbody><tr><td>值</td><td>length|number</td></tr><tr><td>默认值</td><td>0</td></tr><tr><td>适用范围</td><td>所有元素，除了 border-collapse 为 collapse 的内部 table 元素</td></tr><tr><td>继承</td><td>无</td></tr><tr><td>百分比</td><td>不适用</td></tr><tr><td>计算值</td><td>4 个值，每一个都可以是数字或绝对长度</td></tr><tr><td>动画类型</td><td>按照计算值来实现</td></tr></tbody></table><p><code>border-image-outset</code> 的四个值用于指定边框图像区域超出边框盒的距离。 它们分别表示从该区域的上、右、下和左侧超出的距离。 如果左距离缺失，和右距离相等；如果下距离缺失，和上距离相等；如果右距离缺失，和上距离相等。 值有以下含义:</p><ul><li><p><a href="https://www.w3.org/TR/css-values-3/#length-value" target="_blank" rel="external nofollow noopener noreferrer">length</a></p><p>表示超出距离的长度。负值无效。</p></li><li><p><a href="https://www.w3.org/TR/css-values-3/#number-value" target="_blank" rel="external nofollow noopener noreferrer">number</a></p><p>用相应 <code>border-width</code>计算值的倍数来表示超出距离。负值无效。</p></li></ul><blockquote><p>注意：即使 <code>border-image-outset</code> 从未引起滚动机制，但超出部分的图像仍然可能被上级元素或视窗给剪掉。</p></blockquote><h3 id="图片平铺：border-image-repeat-属性"><a href="#图片平铺：border-image-repeat-属性" class="headerlink" title="图片平铺：border-image-repeat 属性"></a>图片平铺：border-image-repeat 属性</h3><table><thead><tr><th>名称</th><th>border-image-repeat</th></tr></thead><tbody><tr><td>值</td><td>stretch|repeat|round|space</td></tr><tr><td>默认值</td><td>stretch</td></tr><tr><td>适用范围</td><td>所有元素，除了 border-collapse 为 collapse 的内部 table 元素</td></tr><tr><td>继承</td><td>无</td></tr><tr><td>百分比</td><td>不适用</td></tr><tr><td>计算值</td><td>两个关键词，每个轴一个</td></tr><tr><td>动画类型</td><td>按照计算值来实现</td></tr></tbody></table><p>此属性指定如何缩放和平铺边框图像中的边缘和中间部分的图像。 第一个关键字适用于顶部、中部和底部的水平缩放和平铺，第二个关键字适用于左部、中部和右部的垂直缩放和平铺。 如果缺失第二个关键字，则假定它与第一个关键字相同。 值有以下含义:</p><ul><li><p><code>stretch</code></p><p>.图像被拉伸以填充区域</p></li><li><p><code>repeat</code></p><p>将图像平铺(重复)以填充区域</p></li><li><p><code>round</code></p><p>将图像平铺(重复)以填充区域。 如果没有将整个区域填满，则对图像进行重新缩放以使其填满。</p></li><li><p><code>space</code></p><p>将图像平铺(重复)以填充该区域。 如果它没有将整个区域填满瓷砖，那么额外的空间将分布在瓦片周围</p></li></ul><p>下面一节给出了缩放和平铺 <code>border-image</code> 部分的确切过程。</p><h3 id="绘制边框图像"><a href="#绘制边框图像" class="headerlink" title="绘制边框图像"></a>绘制边框图像</h3><p>将由 <code>border-image-source</code> 提供的 <code>border-image</code> 使用 <code>border-image-slice</code> 进行切片后，将生成的 <code>9</code> 个瓦片按 <code>4</code> 个步骤进行缩放、定位和拼接到相应的 <code>border-image</code> 区域:</p><ol><li><p>关于 <code>border-image-width</code>的缩放</p><ul><li><p>使上和下的两个边缘图像分别与上边缘和下边缘图像区域一样高，同时同比例缩放宽度。</p></li><li><p>使左和右的两个边缘图像分别与左边缘和右边缘图像区域一样宽，同时同比例缩放高度。</p></li><li><p>四个角图像被缩放成与它们所属的两个边框图像边缘一样的宽高。</p></li><li><p>中间图像的宽度按照与顶部图像相同的比例进行缩放，除非该比例为零或无穷大，在这种情况下，底部的缩放比例被替换，如果达不到这一点，则不进行缩放。 中间图像的高度将按照与左图像相同的比例进行缩放，除非该比例为零或无穷大，在这种情况下，右图像的缩放比例将被替换，如果达不到这一点，高度将不进行缩放。</p></li></ul></li><li><p>关于 <code>border-image-repeat</code>的缩放</p><ul><li>如果第一个关键字是 <code>stretch</code>，那么顶部、中部和底部的图像将进一步缩放，使其与边框图像区域的中间部分一样宽。 高度不再改变。</li><li>如果第一个关键字是 <code>round</code>，那么顶部、中间和底部的图像就会在宽度上调整大小，这样它们的整个数量就恰好适合于边框图像区域的中间部分，与 <code>background-repeat</code> 属性中的 <code>round</code> 完全一样。</li><li>如果第一个关键字是 <code>repeat</code> 或 <code>space</code>，则顶部、中间和底部图像不会进一步更改。</li><li>第二个关键字的 <code>stretch</code>、<code>round</code>、<code>repeat</code> 和 <code>space</code> 的效果是类似的，它们作用于左、中、右图像的高度。</li></ul></li><li><p>定位第一块瓦片</p><ul><li>如果第一个关键字是 <code>repeat</code>，则顶部、中间和底部的图像将在各自区域中水平居中。 否则，图像被放置在边界图像区域各自部分的左边缘。</li><li>如果第二个关键字是 <code>repeat</code>，则左图、中图和右图在各自的区域垂直居中显示。 否则，图像被放置在边界图像区域各自部分的顶部边缘。</li></ul></li><li><p>平铺和绘制</p><ul><li>然后将图像平铺以填充各自的区域。</li><li>在 <code>space</code> 的情况下，任何局部瓦片都被丢弃，并且额外的空间分布在瓦片前、间、后(即平衡第一个瓦片之前的间隙、最后一个瓦片之后的间隙以及瓦片之间的间隙)。 这可能导致边框图像边缘区域是空的。</li><li>图像是在与正常 <code>border</code> 相同的层次级别上绘制的：直接绘制在背景图层的上面。</li><li>除非为 <code>border-image-source</code> 指定了 fill，否则不绘制中间图像。</li></ul></li></ol><h3 id="边框图像简写：border-image-属性"><a href="#边框图像简写：border-image-属性" class="headerlink" title="边框图像简写：border-image 属性"></a>边框图像简写：border-image 属性</h3><table><thead><tr><th>名称</th><th>border-image</th></tr></thead><tbody><tr><td>值</td><td>border-image-source|| border-image-slice [ / border-image-width / border-image-width ？ [ border-image-outset] ？|| border-image-repeat</td></tr><tr><td>默认值</td><td>见各自属性</td></tr><tr><td>适用范围</td><td>见各自属性</td></tr><tr><td>继承</td><td>无</td></tr><tr><td>百分比</td><td>不适用</td></tr><tr><td>计算值</td><td>见各自属性</td></tr><tr><td>动画类型</td><td>见各自属性</td></tr></tbody></table><p>这是设置 <code>border-image-source</code>、<code>border-image-slice</code>、<code>border-image-width</code>、<code>border-image-outset</code>和 <code>border-image-repeat</code> 的简化属性。 省略的值设置为它们各自的初始值。</p><h3 id="对表格的影响"><a href="#对表格的影响" class="headerlink" title="对表格的影响"></a>对表格的影响</h3><p><code>border-image</code> 属性可以应用于 <code>border-collapse</code> 设置为 <code>collapse</code> 的表格和行内表格的 <code>border</code>。但是，此规范没有定义如何渲染这样的图像边框。 尤其是规范没有定义图像边界如何与表格边缘的单元格、行和行组的边界的相互作用(请参见中的<a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/tables.html#border-conflict-resolution" target="_blank" rel="external nofollow noopener noreferrer">边界冲突解决方法</a>)。</p><p>预计未来的规范将定义渲染规则。 建议在此之前，浏览器不要将边框图像应用于边框已折叠的表格。</p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>首先说明一点，实验中发现 Chrome80 浏览器中的 <code>border-image-width</code> 支持 <code>px</code> 单位，注意<code>1px</code>有时候与倍数<code>1</code>的区别。</p><h3 id="普通用法"><a href="#普通用法" class="headerlink" title="普通用法"></a>普通用法</h3><p>给出一个 <code>button</code> 的背景图片如下，像素数是 <code>300×128</code>。</p><p><img src="/posts/56b66aa5/chinoiserie.png" alt></p><p>如果使用普通的 <code>background</code>，应用到 <code>1400×200</code> 的 button 上，由于长宽比不同，就会出现拉伸的情况，代码和结果如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(./assets/chinoiserie.png) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/posts/56b66aa5/chinoiserie-background.png" alt></p><p>这个时候最适合 <code>border-image</code> 完成这个任务，首先测量下图片的细节尺寸：</p><p><img src="/posts/56b66aa5/chinoiserie-tag.png" alt></p><p>接下来把 <code>background</code> 设置为透明，由于边框图像的横纵宽度都是 <code>25px</code>，所以先给 <code>border</code> 设置 <code>25px</code> 宽度来开启边框。然后设置 <code>border-image</code>，<code>border-image-source</code> 就是背景图，<code>border-image-slice</code> 上下左右都是 <code>25</code>，并且添加关键字 <code>fill</code> 来填充最中间的瓦片，后面的 <code>border-image-outset</code>、<code>border-image-width</code> 和 <code>border-image-repeat</code> 三个值默认即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">25px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image-source</span>: <span class="built_in">url</span>(./assets/chinoiserie.png);</span><br><span class="line">  <span class="attribute">border-image-slice</span>: <span class="number">25</span> fill;</span><br><span class="line">  <span class="comment">/* border-image-outset: 0;</span></span><br><span class="line"><span class="comment">  border-image-width: 1;</span></span><br><span class="line"><span class="comment">  border-image-repeat: stretch; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下，button 按钮可以随便改变宽高比也不会使背景拉伸。</p><p><img src="/posts/56b66aa5/chinoiserie-border.png" alt></p><h3 id="升级用法"><a href="#升级用法" class="headerlink" title="升级用法"></a>升级用法</h3><p>下面说一些更延伸的使用方式，再给出一个 button 的背景图片如下，像素数为<code>400×128</code>，仍然想把它给<code>1400×200</code>的 button 当背景：</p><p><img src="/posts/56b66aa5/money.png" alt></p><p>这次的背景图与上一个的区别主要在两个地方，第一个是圆角幅度特别大，已经组成了两个半圆，所以在纵向上没有可以 <code>stretch</code> 或 <code>repeat</code> 的空间；第二个是右侧有一个圆包着“￥”符号，而且符号比较靠内而不贴近边缘，在横向上左右不对称。</p><p>虽然情况稍微复杂，但是强大的 <code>border-image</code> 仍然可以解决，继续分割一下图片：</p><p><img src="/posts/56b66aa5/money-tag.png" alt></p><p>这次的分割并没有把图片分割成 <code>9</code> 份，而是去掉了中间一行分割成了 <code>6</code>份，半圆的半径是 <code>64px</code>，“￥”符号的整体距离右侧 <code>120px</code>。具体实现的想法就是在横向上让最中间一行的高度为 <code>0</code>，纵向上“￥”符号整体作为最右侧一列边框部分，再使用 <code>border-image-width</code> 将边框向内拉伸合并起来。</p><p>第一步先用 CSS 把背景图像分割，注意 <code>border</code> 的宽度设为 <code>2px</code> 做一个基本量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image-source</span>: <span class="built_in">url</span>(./assets/money.png);</span><br><span class="line">  <span class="attribute">border-image-slice</span>: <span class="number">64</span> <span class="number">120</span> <span class="number">64</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果如下，可以发现中间一行已经为空,上下是宽度为 <code>2px</code> 的 <code>border</code>：</p><p><img src="/posts/56b66aa5/money-border1.png" alt></p><p>第二步，使用 <code>border-image-width</code> 属性，将边框向内部入侵，注意，由于分割的时候是按照 <code>64 120 64 64</code>，所以向内放大入侵时也应该按照相同的比例，一直放大到上下边框图像合并（<code>64×2px，120×2px，64×2px，64×2px</code>，规范中规定上下边框图像重叠后会自动调整为不重叠），伪造出一种背景图片填充的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-image-source</span>: <span class="built_in">url</span>(./assets/money.png);</span><br><span class="line">  <span class="attribute">border-image-slice</span>: <span class="number">64</span> <span class="number">120</span> <span class="number">64</span> <span class="number">64</span>;</span><br><span class="line">  <span class="attribute">border-image-width</span>: <span class="number">64</span> <span class="number">120</span> <span class="number">64</span> <span class="number">64</span>;</span><br><span class="line">  <span class="comment">/* border-image-outset: 0;</span></span><br><span class="line"><span class="comment">  border-image-repeat: round; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果如下：</p><p><img src="/posts/56b66aa5/money-border2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> CSS </tag>
            
            <tag> border-image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在可视化大屏布局中相对单位和calc()的应用</title>
      <link href="/posts/50859aba.html"/>
      <url>/posts/50859aba.html</url>
      
        <content type="html"><![CDATA[<p>在构建可视化大屏的过程中，首先要先布局组件位置和大小。上两篇文章<a href="https://linjingyi.cn/posts/3680799e.html">《关于各种像素概念和前端长度单位的理解》</a>和<a href="https://linjingyi.cn/posts/ef0a6799.html">《CSS数学表达式calc()的规范草案翻译》</a>学习了 CSS 相对单位 <code>vw</code>、<code>vh</code>、<code>rem</code> 和 <code>clac()</code>，本文以上两篇内容为基础，加上 mentor 仕春哥的启发，分析前端构建可视化大屏的一种布局方式。</p><h2 id="大屏系统的内在原理"><a href="#大屏系统的内在原理" class="headerlink" title="大屏系统的内在原理"></a>大屏系统的内在原理</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>大屏系统实际上是由任意 <code>n × m</code> 块窄边显示器组成，具体如下图示例所示：</p><a id="more"></a><p><img src="/posts/50859aba/%E5%A4%A7%E5%B1%8F%E5%86%85%E5%9C%A8%E5%8E%9F%E7%90%86.jpg" alt></p><p>该例子中左下信号源的两台电脑通过显卡计算显示被投屏的内容，然后输出到大屏接收器中的矩阵切换器。矩阵切换器将两台电脑中的多路信号转换成单路信号。这个过程中播放控制设备可以控制两个画面的拼接的位置和模式（比如组合显示、开窗、漫游、叠加）。最后传输给上半部分的 <code>4 × 2</code> 块显示器大屏（拼接墙），最后展示大屏画面。</p><h3 id="最佳显示效果"><a href="#最佳显示效果" class="headerlink" title="最佳显示效果"></a>最佳显示效果</h3><p>如果想实现最佳显示效果，应该满足下面的条件：</p><p><img src="/posts/50859aba/%E6%9C%80%E4%BD%B3%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.jpg" alt></p><ul><li><p>大屏逻辑分辨率（设计稿尺寸）的长宽比 = 大屏实际物理分辨率的长宽比</p></li><li><p>大屏逻辑分辨率（设计稿尺寸）的长宽比 = 显卡输出分辨率的长宽比</p></li><li><p>显卡输出分辨率 = 视频矩阵切换器支持分辨率 = 大屏实际物理分辨率</p></li></ul><p>在实际实现时，大屏一般由 <code>n × n</code> 块长宽比 <code>16：9</code>，分辨率为 <code>1920×1080</code> 的液晶屏拼接成，如果是 <code>5 × 5</code> 块大屏，实际物理分辨率已经达到了 <code>9600×5400</code>。但是，不管是显卡还是矩阵切换器，能支持 <code>4k</code> 显示（<code>4096×2160</code>）就很优秀了。所以在设计和前端实现时，一般符合 <code>16：9</code> 的比例的 <code>1920×1080</code> 分辨率，就可以高质量的进行大屏展示。</p><h2 id="设计稿分割"><a href="#设计稿分割" class="headerlink" title="设计稿分割"></a>设计稿分割</h2><h3 id="设计规则"><a href="#设计规则" class="headerlink" title="设计规则"></a>设计规则</h3><p>大屏的排版布局一般遵循下面的规则，主中间，次两边，附加各种动效和下钻：</p><p><img src="/posts/50859aba/%E5%A4%A7%E5%B1%8F%E6%8E%92%E7%89%88%E5%B8%83%E5%B1%80.jpg" alt></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在谷歌上搜索了一个大屏设计稿的例子——<a href="https://www.zhisheji.com/yuanchuang/1164232.html" target="_blank" rel="external nofollow noopener noreferrer">中国移动全球基站管理</a>，示例图片如下：</p><p><img src="/posts/50859aba/%E7%A4%BA%E4%BE%8B.png" alt></p><p>这个例子很符合主中间，次两边的规则，而且很显然中间的 3D 地球应该是有动效，两侧的卡片是可以下钻的。将图片大致分割一些，应该主要由以下部分构成：</p><p><img src="/posts/50859aba/%E7%A4%BA%E4%BE%8B%E5%A4%84%E7%90%86%E5%90%8E.png" alt></p><h2 id="前端布局"><a href="#前端布局" class="headerlink" title="前端布局"></a>前端布局</h2><p>由于大屏的每个组件卡片排布方式都不同，普通的定位很难适配所有情况，所以这里使用 <code>position: absolute</code> 绝对定位脱离文档流，用 <code>top</code>、<code>left</code>、<code>width</code>、<code>height</code> 来定位组件卡片。</p><h3 id="定义基本量和卡片名"><a href="#定义基本量和卡片名" class="headerlink" title="定义基本量和卡片名"></a>定义基本量和卡片名</h3><p>首先把基本量的长度先定义下来，这里的基本量可以复用，用画图做一个巨丑的简单示意图如下：</p><p><img src="/posts/50859aba/%E5%9F%BA%E6%9C%AC%E9%87%8F.png" alt></p><p>标题的高度为 <code>heightHeader</code>，正文主体部分的<code>外边距</code>分别为 <code>marginMainTop</code>、<code>marginMainRight</code>、<code>marginMainBotom</code>、<code>marginMainLeft</code>，正文中每个小卡片的<code>外边距</code>为 <code>marginCardTopBottom</code>、<code>marginCardLeftRight</code>（这里的边距并不是真正的 <code>margin</code>，只是表达类似的概念）。与 <code>x</code> 轴相关的长度统一用相对单位 <code>vw</code>，与 <code>y</code> 轴相关的长度统一用 <code>vw</code>，基础变量设置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础变量的设定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 标题部分的高度</span></span><br><span class="line"><span class="keyword">const</span> heightHeader = <span class="string">'8vh'</span>;</span><br><span class="line"><span class="comment">// 正文部分的外边距</span></span><br><span class="line"><span class="keyword">const</span> marginMainTop = <span class="string">'0.7vh'</span>;</span><br><span class="line"><span class="keyword">const</span> marginMainBottom = <span class="string">'0.7vh'</span>;</span><br><span class="line"><span class="keyword">const</span> marginMainLeft = <span class="string">'0.7vw'</span>;</span><br><span class="line"><span class="keyword">const</span> marginMainRight = <span class="string">'0.7vw'</span>;</span><br><span class="line"><span class="comment">// 每个小卡片的外边距</span></span><br><span class="line"><span class="keyword">const</span> marginCardTopBottom = <span class="string">'0.5vh'</span>;</span><br><span class="line"><span class="keyword">const</span> marginCardLeftRight = <span class="string">'0.5vw'</span>;</span><br></pre></td></tr></table></figure><p>将每个卡片的中文标题翻译为英文<code>简称</code>，命名如下：</p><table><thead><tr><th>名称</th><th>英文翻译</th><th>简称</th></tr></thead><tbody><tr><td>标题</td><td>header</td><td>HD</td></tr><tr><td>信号处理情况</td><td>Signal processing situation</td><td>SPS</td></tr><tr><td>动态 3D 地球</td><td>Dynamic 3D earth</td><td>D3E</td></tr><tr><td>基站信息数据统计</td><td>Base station information data statistics</td><td>BSIDS</td></tr><tr><td>国家基站变化对比</td><td>Comparison of changes in national base stations</td><td>CCNBS</td></tr><tr><td>基站总体变化</td><td>Overall change of base station</td><td>OCBS</td></tr></tbody></table><h3 id="使用-calc-计算"><a href="#使用-calc-计算" class="headerlink" title="使用 calc()计算"></a>使用 calc()计算</h3><p>接下来就是最核心的地方，新建一个 <code>config.js</code> 文件，存放 <code>calc()</code>模板，给每个卡片都计算自己的 <code>top</code>、<code>left</code>、<code>width</code>、<code>height</code> 值。</p><p>以 <code>y</code> 方向举例，“标题”只需要计算 <code>height</code>，，但是计算“信号处理情况”的 <code>top</code> 就需要在 <code>heightHD</code> 的基础上加上正文上边距 <code>marginMainTop</code> 和卡片上边距 <code>marginCardTopBottom</code>。</p><p>另外，最下面和最右面的组件卡片 <code>width</code> 和 <code>height</code> 需要利用 <code>100%</code>来减，完成自适应效果。还是以 <code>y</code> 方向举例，“基站总体变化”卡片，<code>height</code> 计算时，需要用 <code>100%减</code>去正文下边距 <code>marginMainBottom</code>、卡片下边距 <code>marginCardTopBottom</code> 和卡片自身的 <code>top</code> 值 <code>topOCBS</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算每个部分的top、left、height、width</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题 header HD</span></span><br><span class="line"><span class="keyword">const</span> topHD = <span class="string">`0vh`</span>;</span><br><span class="line"><span class="keyword">const</span> heightHD = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> leftHD = <span class="string">`0vw`</span>;</span><br><span class="line"><span class="keyword">const</span> widthHD = <span class="string">`100%`</span>;</span><br><span class="line"><span class="comment">// 信号处理情况 Signal processing situation SPS</span></span><br><span class="line"><span class="keyword">const</span> topSPS = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span> + <span class="subst">$&#123;marginMainTop&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightSPS = <span class="string">`50vh`</span>;</span><br><span class="line"><span class="keyword">const</span> leftSPS = <span class="string">`calc(<span class="subst">$&#123;marginMainLeft&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthSPS = <span class="string">`15vw`</span>;</span><br><span class="line"><span class="comment">// 动态3D地球 Dynamic 3D earth D3E</span></span><br><span class="line"><span class="keyword">const</span> topD3E = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span> + <span class="subst">$&#123;marginMainTop&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightD3E = <span class="string">`calc(100% - <span class="subst">$&#123;marginMainBottom&#125;</span> - <span class="subst">$&#123;marginCardTopBottom&#125;</span> - <span class="subst">$&#123;topD3E&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> leftD3E = <span class="string">`calc(<span class="subst">$&#123;marginMainLeft&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthD3E = <span class="string">`70vw`</span>;</span><br><span class="line"><span class="comment">// 基站信息数据统计 Base station information data statistics BSIDS</span></span><br><span class="line"><span class="keyword">const</span> topBSIDS = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span> + <span class="subst">$&#123;marginMainTop&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightBSIDS = <span class="string">`35vh`</span>;</span><br><span class="line"><span class="keyword">const</span> leftBSIDS = <span class="string">`calc(<span class="subst">$&#123;leftD3E&#125;</span> + <span class="subst">$&#123;widthD3E&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthBSIDS = <span class="string">`calc(100% - <span class="subst">$&#123;leftBSIDS&#125;</span> - <span class="subst">$&#123;marginCardLeftRight&#125;</span> - <span class="subst">$&#123;marginMainRight&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">// 国家基站变化对比 Comparison of changes in national base stations CCNBS</span></span><br><span class="line"><span class="keyword">const</span> topCCNBS = <span class="string">`calc(<span class="subst">$&#123;topBSIDS&#125;</span> + <span class="subst">$&#123;heightBSIDS&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightCCNBS = <span class="string">`35vh`</span>;</span><br><span class="line"><span class="keyword">const</span> leftCCNBS = <span class="string">`calc(<span class="subst">$&#123;leftD3E&#125;</span> + <span class="subst">$&#123;widthD3E&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthCCNBS = <span class="string">`calc(100% - <span class="subst">$&#123;leftCCNBS&#125;</span> - <span class="subst">$&#123;marginCardLeftRight&#125;</span> - <span class="subst">$&#123;marginMainRight&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">// 基站总体变化 Overall change of base station OCBS</span></span><br><span class="line"><span class="keyword">const</span> topOCBS = <span class="string">`calc(<span class="subst">$&#123;topCCNBS&#125;</span> + <span class="subst">$&#123;heightCCNBS&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightOCBS = <span class="string">`calc(100% - <span class="subst">$&#123;marginMainBottom&#125;</span> - <span class="subst">$&#123;marginCardTopBottom&#125;</span> - <span class="subst">$&#123;topOCBS&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> leftOCBS = <span class="string">`calc(<span class="subst">$&#123;leftD3E&#125;</span> + <span class="subst">$&#123;widthD3E&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthOCBS = <span class="string">`calc(100% - <span class="subst">$&#123;leftOCBS&#125;</span> - <span class="subst">$&#123;marginCardLeftRight&#125;</span> - <span class="subst">$&#123;marginMainRight&#125;</span>)`</span>;</span><br></pre></td></tr></table></figure><h3 id="配置输出"><a href="#配置输出" class="headerlink" title="配置输出"></a>配置输出</h3><p>把上述计算的配置项输出，使用<code>简称</code>为<code>键名</code>，需要配置的 CSS <code>属性</code>为<code>键值</code>。</p><p>比较特殊的两项是“信号处理情况”和“动态 3D 地球”。这两个组件相互叠加，需要把上层组件和下层组件设置不同的 <code>z-index</code> 来区分高低。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>生成配置对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>每个id对应的需要配置的style</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> generatorConfigLayout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    HD: &#123;</span><br><span class="line">      top: topHD,</span><br><span class="line">      left: leftHD,</span><br><span class="line">      height: heightHD,</span><br><span class="line">      width: widthHD</span><br><span class="line">    &#125;,</span><br><span class="line">    SPS: &#123;</span><br><span class="line">      top: topSPS,</span><br><span class="line">      left: leftSPS,</span><br><span class="line">      height: heightSPS,</span><br><span class="line">      width: widthSPS,</span><br><span class="line">      <span class="comment">// 类似左侧的底图，需要加个z-index</span></span><br><span class="line">      <span class="string">'z-index'</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    D3E: &#123;</span><br><span class="line">      top: topD3E,</span><br><span class="line">      left: leftD3E,</span><br><span class="line">      height: heightD3E,</span><br><span class="line">      width: widthD3E,</span><br><span class="line">      <span class="comment">// 类似左侧的底图，需要加个z-index</span></span><br><span class="line">      <span class="string">'z-index'</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    BSIDS: &#123;</span><br><span class="line">      top: topBSIDS,</span><br><span class="line">      left: leftBSIDS,</span><br><span class="line">      height: heightBSIDS,</span><br><span class="line">      width: widthBSIDS</span><br><span class="line">    &#125;,</span><br><span class="line">    CCNBS: &#123;</span><br><span class="line">      top: topCCNBS,</span><br><span class="line">      left: leftCCNBS,</span><br><span class="line">      height: heightCCNBS,</span><br><span class="line">      width: widthCCNBS</span><br><span class="line">    &#125;,</span><br><span class="line">    OCBS: &#123;</span><br><span class="line">      top: topOCBS,</span><br><span class="line">      left: leftOCBS,</span><br><span class="line">      height: heightOCBS,</span><br><span class="line">      width: widthOCBS</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 最后导出配置函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> generatorConfigLayout;</span><br></pre></td></tr></table></figure><h2 id="页面样式"><a href="#页面样式" class="headerlink" title="页面样式"></a>页面样式</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>页面的样式就比较简单，首先新建一个 <code>index.html</code>，然后要给 <code>html</code> 和 <code>body</code> 设置一个基础样式，<code>z-index</code> 是为了把 <code>body</code> 放在最底层，<code>overflow: hidden</code> 防止出现滚动条。设置根元素字体大小时使用相对大小，让文字在不同分辨率中视觉效果尽量统一（注意：Chrome 最小字体大小为 <code>12px</code>）。</p><p>每个组件的标签都有自己的 <code>id</code>，<code>id</code> 为简称。在通用<code>.layout</code> 样式中，给每个组件设置<code>绝对定位</code>。为了容易区分，给每个标签设置了不同的<code>背景颜色</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>可视化大屏布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="comment">/*  */</span></span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需start */</span></span></span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        z-index: -1;</span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需end */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 让字体使用相对大小 */</span></span></span><br><span class="line">        font-size: calc(100vw / 120);</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fdffdf</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">      p &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.layout</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需start */</span></span></span><br><span class="line">        position: absolute;</span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需end */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* flex start */</span></span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        align-items: center;</span><br><span class="line"><span class="css">        <span class="comment">/* flex end */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* border: 1px solid bisque; */</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"HD"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color: #EFCEE8;"</span>&gt;</span></span><br><span class="line">      标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"SPS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#F0F0F0;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>信号处理情况<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"D3E"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#F3D7B5;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>动态3D地球<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"BSIDS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#DAF9CA;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>基站信息数据统计<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"CCNBS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#C7B3E5;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>国家基站变化对比<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"OCBS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#A79496;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>基站总体变化<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置导入"><a href="#配置导入" class="headerlink" title="配置导入"></a>配置导入</h3><p>为了让浏览器能使用 ES6 的导入导出，需要在 <code>script 标签</code>中添加 <code>type=&quot;module&quot;</code>。</p><p>从上节的<code>配置文件</code>中导入 <code>generatorConfigLayout</code> 函数，执行函数生成布局变量 <code>configLayout</code>。遍历 <code>configLayout</code>，每次执行 <code>setStyle()</code>函数，将 css 样式设置给相对应的组件标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> generatorConfigLayout <span class="keyword">from</span> <span class="string">'./config.js'</span>;</span></span><br><span class="line">  /**</span><br><span class="line">   * @description 根据id和对应配置项config给dom添加style</span><br><span class="line"><span class="javascript">   * @param &#123;<span class="built_in">String</span>&#125; id id</span></span><br><span class="line"><span class="javascript">   * @param &#123;<span class="built_in">Object</span>&#125; config 每个id对应配置项</span></span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> setStyle = <span class="function">(<span class="params">id, config</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">`#<span class="subst">$&#123;id&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.keys(config).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">      dom.style[item] = config[item];</span><br><span class="line"><span class="javascript">      dom.innerHTML += <span class="string">`&lt;p&gt;<span class="subst">$&#123;item&#125;</span> : <span class="subst">$&#123;config[item]&#125;</span>&lt;/p&gt;`</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="actionscript">  <span class="comment">// 循环每个id，给每个标签都设置style</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> configLayout = generatorConfigLayout();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">Object</span>.keys(configLayout).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span></span><br><span class="line">    setStyle(key, configLayout[key]);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后生成的布局结果如下所示，完成！</p><p><img src="/posts/50859aba/%E5%B8%83%E5%B1%80%E7%BB%93%E6%9E%9C.png" alt></p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下：<br>config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础变量的设定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 标题部分的高度</span></span><br><span class="line"><span class="keyword">const</span> heightHeader = <span class="string">'8vh'</span>;</span><br><span class="line"><span class="comment">// 正文部分的外边距</span></span><br><span class="line"><span class="keyword">const</span> marginMainTop = <span class="string">'0.7vh'</span>;</span><br><span class="line"><span class="keyword">const</span> marginMainBottom = <span class="string">'0.7vh'</span>;</span><br><span class="line"><span class="keyword">const</span> marginMainLeft = <span class="string">'0.7vw'</span>;</span><br><span class="line"><span class="keyword">const</span> marginMainRight = <span class="string">'0.7vw'</span>;</span><br><span class="line"><span class="comment">// 每个小卡片的外边距</span></span><br><span class="line"><span class="keyword">const</span> marginCardTopBottom = <span class="string">'0.5vh'</span>;</span><br><span class="line"><span class="keyword">const</span> marginCardLeftRight = <span class="string">'0.5vw'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算每个部分的top、left、height、width</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题 header HD</span></span><br><span class="line"><span class="keyword">const</span> topHD = <span class="string">`0vh`</span>;</span><br><span class="line"><span class="keyword">const</span> heightHD = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> leftHD = <span class="string">`0vw`</span>;</span><br><span class="line"><span class="keyword">const</span> widthHD = <span class="string">`100%`</span>;</span><br><span class="line"><span class="comment">// 信号处理情况 Signal processing situation SPS</span></span><br><span class="line"><span class="keyword">const</span> topSPS = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span> + <span class="subst">$&#123;marginMainTop&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightSPS = <span class="string">`50vh`</span>;</span><br><span class="line"><span class="keyword">const</span> leftSPS = <span class="string">`calc(<span class="subst">$&#123;marginMainLeft&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthSPS = <span class="string">`15vw`</span>;</span><br><span class="line"><span class="comment">// 动态3D地球 Dynamic 3D earth D3E</span></span><br><span class="line"><span class="keyword">const</span> topD3E = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span> + <span class="subst">$&#123;marginMainTop&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightD3E = <span class="string">`calc(100% - <span class="subst">$&#123;marginMainBottom&#125;</span> - <span class="subst">$&#123;marginCardTopBottom&#125;</span> - <span class="subst">$&#123;topD3E&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> leftD3E = <span class="string">`calc(<span class="subst">$&#123;marginMainLeft&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthD3E = <span class="string">`70vw`</span>;</span><br><span class="line"><span class="comment">// 基站信息数据统计 Base station information data statistics BSIDS</span></span><br><span class="line"><span class="keyword">const</span> topBSIDS = <span class="string">`calc(<span class="subst">$&#123;heightHeader&#125;</span> + <span class="subst">$&#123;marginMainTop&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightBSIDS = <span class="string">`35vh`</span>;</span><br><span class="line"><span class="keyword">const</span> leftBSIDS = <span class="string">`calc(<span class="subst">$&#123;leftD3E&#125;</span> + <span class="subst">$&#123;widthD3E&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthBSIDS = <span class="string">`calc(100% - <span class="subst">$&#123;leftBSIDS&#125;</span> - <span class="subst">$&#123;marginCardLeftRight&#125;</span> - <span class="subst">$&#123;marginMainRight&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">// 国家基站变化对比 Comparison of changes in national base stations CCNBS</span></span><br><span class="line"><span class="keyword">const</span> topCCNBS = <span class="string">`calc(<span class="subst">$&#123;topBSIDS&#125;</span> + <span class="subst">$&#123;heightBSIDS&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightCCNBS = <span class="string">`35vh`</span>;</span><br><span class="line"><span class="keyword">const</span> leftCCNBS = <span class="string">`calc(<span class="subst">$&#123;leftD3E&#125;</span> + <span class="subst">$&#123;widthD3E&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthCCNBS = <span class="string">`calc(100% - <span class="subst">$&#123;leftCCNBS&#125;</span> - <span class="subst">$&#123;marginCardLeftRight&#125;</span> - <span class="subst">$&#123;marginMainRight&#125;</span>)`</span>;</span><br><span class="line"><span class="comment">// 基站总体变化 Overall change of base station OCBS</span></span><br><span class="line"><span class="keyword">const</span> topOCBS = <span class="string">`calc(<span class="subst">$&#123;topCCNBS&#125;</span> + <span class="subst">$&#123;heightCCNBS&#125;</span> + <span class="subst">$&#123;marginCardTopBottom&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> heightOCBS = <span class="string">`calc(100% - <span class="subst">$&#123;marginMainBottom&#125;</span> - <span class="subst">$&#123;marginCardTopBottom&#125;</span> - <span class="subst">$&#123;topOCBS&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> leftOCBS = <span class="string">`calc(<span class="subst">$&#123;leftD3E&#125;</span> + <span class="subst">$&#123;widthD3E&#125;</span> + <span class="subst">$&#123;marginCardLeftRight&#125;</span>)`</span>;</span><br><span class="line"><span class="keyword">const</span> widthOCBS = <span class="string">`calc(100% - <span class="subst">$&#123;leftOCBS&#125;</span> - <span class="subst">$&#123;marginCardLeftRight&#125;</span> - <span class="subst">$&#123;marginMainRight&#125;</span>)`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>生成配置对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>每个id对应的需要配置的style</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> generatorConfigLayout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    HD: &#123;</span><br><span class="line">      top: topHD,</span><br><span class="line">      left: leftHD,</span><br><span class="line">      height: heightHD,</span><br><span class="line">      width: widthHD</span><br><span class="line">    &#125;,</span><br><span class="line">    SPS: &#123;</span><br><span class="line">      top: topSPS,</span><br><span class="line">      left: leftSPS,</span><br><span class="line">      height: heightSPS,</span><br><span class="line">      width: widthSPS,</span><br><span class="line">      <span class="comment">// 类似左侧的底图，需要加个z-index</span></span><br><span class="line">      <span class="string">'z-index'</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    D3E: &#123;</span><br><span class="line">      top: topD3E,</span><br><span class="line">      left: leftD3E,</span><br><span class="line">      height: heightD3E,</span><br><span class="line">      width: widthD3E,</span><br><span class="line">      <span class="comment">// 类似左侧的底图，需要加个z-index</span></span><br><span class="line">      <span class="string">'z-index'</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    BSIDS: &#123;</span><br><span class="line">      top: topBSIDS,</span><br><span class="line">      left: leftBSIDS,</span><br><span class="line">      height: heightBSIDS,</span><br><span class="line">      width: widthBSIDS</span><br><span class="line">    &#125;,</span><br><span class="line">    CCNBS: &#123;</span><br><span class="line">      top: topCCNBS,</span><br><span class="line">      left: leftCCNBS,</span><br><span class="line">      height: heightCCNBS,</span><br><span class="line">      width: widthCCNBS</span><br><span class="line">    &#125;,</span><br><span class="line">    OCBS: &#123;</span><br><span class="line">      top: topOCBS,</span><br><span class="line">      left: leftOCBS,</span><br><span class="line">      height: heightOCBS,</span><br><span class="line">      width: widthOCBS</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> generatorConfigLayout;</span><br></pre></td></tr></table></figure><p>index.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>可视化大屏布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="comment">/*  */</span></span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需start */</span></span></span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        z-index: -1;</span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需end */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 让字体使用相对大小 */</span></span></span><br><span class="line">        font-size: calc(100vw / 120);</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fdffdf</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">      p &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.layout</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需start */</span></span></span><br><span class="line">        position: absolute;</span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="comment">/* 布局必需end */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* flex start */</span></span></span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        align-items: center;</span><br><span class="line"><span class="css">        <span class="comment">/* flex end */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* border: 1px solid bisque; */</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"HD"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color: #EFCEE8;"</span>&gt;</span></span><br><span class="line">      标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"SPS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#F0F0F0;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>信号处理情况<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"D3E"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#F3D7B5;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>动态3D地球<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"BSIDS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#DAF9CA;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>基站信息数据统计<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"CCNBS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#C7B3E5;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>国家基站变化对比<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"OCBS"</span> <span class="attr">class</span>=<span class="string">"layout"</span> <span class="attr">style</span>=<span class="string">"background-color:#A79496;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>基站总体变化<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">import</span> generatorConfigLayout <span class="keyword">from</span> <span class="string">'./config.js'</span>;</span></span><br><span class="line">      /**</span><br><span class="line">       * @description 根据id和对应配置项config给dom添加style</span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">String</span>&#125; id id</span></span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Object</span>&#125; config 每个id对应配置项</span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> setStyle = <span class="function">(<span class="params">id, config</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">`#<span class="subst">$&#123;id&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.keys(config).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">          dom.style[item] = config[item];</span><br><span class="line"><span class="javascript">          dom.innerHTML += <span class="string">`&lt;p&gt;<span class="subst">$&#123;item&#125;</span> : <span class="subst">$&#123;config[item]&#125;</span>&lt;/p&gt;`</span>;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 循环每个id，给每个标签都设置style</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> configLayout = generatorConfigLayout();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Object</span>.keys(configLayout).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span></span><br><span class="line">        setStyle(key, configLayout[key]);</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> CSS </category>
          
          <category> 大屏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> CSS </tag>
            
            <tag> calc </tag>
            
            <tag> 大屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS数学表达式calc()的规范草案翻译</title>
      <link href="/posts/ef0a6799.html"/>
      <url>/posts/ef0a6799.html</url>
      
        <content type="html"><![CDATA[<p>上一篇文章<a href="https://linjingyi.cn/posts/3680799e.html">关于各种像素概念和前端长度单位的理解</a>分析了 <code>px</code> 的定义和各种相对长度单位，这次翻译学习一下 CSS 的 <code>calc()</code>规范，为下一篇做铺垫。<br>首先纠正 W3C 的 CSS 工作组<a href="https://drafts.csswg.org/css-values-3/#funcdef-calc" target="_blank" rel="external nofollow noopener noreferrer">规范草案</a>中关于 <code>calc()</code>的一个错误：</p><a id="more"></a><p><img src="/posts/ef0a6799/%E7%BA%A0%E9%94%99.jpg" alt="纠错"><br>实例 21 中，<code>calc(50% + 20px) calc(50% + 20px)</code>应该是向下和向<code>右</code>偏移，<code>left</code> 应改为 <code>right</code>。</p><h2 id="草案翻译"><a href="#草案翻译" class="headerlink" title="草案翻译"></a>草案翻译</h2><p>W3C 的 CSS 工作组规范草案原文链接：<a href="https://drafts.csswg.org/css-values-3/#funcdef-calc" target="_blank" rel="external nofollow noopener noreferrer">https://drafts.csswg.org/css-values-3/#funcdef-calc</a></p><p><code>calc()</code>函数允许使用带有加减乘除的数学表达式作为组件值。<code>calc()</code>表达式使用的是标准的运算符优化规则来表示其数学运算的结果。可以在表示长度、频率、角度、时间、百分比、数字或整数的任何地方使用。<code>calc()</code>表达式的组件值可以是<code>文本</code>、<code>attr()</code>、<code>calc()表达式</code>。</p><p>实例 18：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">border</span>: solid <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">2</span> * <span class="number">1em</span> - <span class="number">2</span> * <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例 19：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">calc</span>(<span class="number">1rem</span> - <span class="number">2px</span>) <span class="built_in">calc</span>(<span class="number">1rem</span> - <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例 20：</p><p>下面的实例设置了根元素的 <code>font-size</code>，所以 <code>40em</code> 恰好等于视窗宽度，确保无论屏幕尺寸有多大都能以数量大致相同的文本填充屏幕。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> / <span class="number">40</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果其余的元素设计都使用 <code>rem</code> 单位来指定，则整个布局都会跟随视窗宽度变化。</p><p>实例 21：</p><p>下面的示例中叠加了两张背景图片，第一张图片完美居中，第二张图片在第一张的基础上向右和向下偏移 <code>20px</code>（原文写错）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(top.png), <span class="built_in">url</span>(bottom.png);</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>, <span class="built_in">calc</span>(<span class="number">50%</span> + <span class="number">20px</span>) <span class="built_in">calc</span>(<span class="number">50%</span> + <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例 22：</p><p>下面的示例展示了如何在线性渐变中在距离两端相等（<code>50px</code>）的位置上放置颜色点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">to right,</span><br><span class="line">silver,</span><br><span class="line">white <span class="number">50px</span>,</span><br><span class="line">white calc(<span class="number">100%</span> - <span class="number">50px</span>),</span><br><span class="line">silver</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>clac()函数的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;calc()&gt; &#x3D; calc( &lt;calc-sum&gt; )</span><br><span class="line">&lt;calc-sum&gt; &#x3D; &lt;calc-product&gt; [ [ &#39;+&#39; | &#39;-&#39; ] &lt;calc-product&gt; ]*</span><br><span class="line">&lt;calc-product&gt; &#x3D; &lt;calc-value&gt; [ &#39;*&#39; &lt;calc-value&gt; | &#39;&#x2F;&#39; &lt;calc-number-value&gt; ]*</span><br><span class="line">&lt;calc-value&gt; &#x3D; &lt;number&gt; | &lt;dimension&gt; | &lt;percentage&gt; | ( &lt;calc-sum&gt; )</span><br><span class="line"></span><br><span class="line">&lt;calc-number-sum&gt; &#x3D; &lt;calc-number-product&gt; [ [ &#39;+&#39; | &#39;-&#39; ] &lt;calc-number-product&gt; ]*</span><br><span class="line">&lt;calc-number-product&gt; &#x3D; &lt;calc-number-value&gt; [ &#39;*&#39; &lt;calc-number-value&gt; | &#39;&#x2F;&#39; &lt;calc-number-value&gt; ]*</span><br><span class="line">&lt;calc-number-value&gt; &#x3D; &lt;number&gt; | ( &lt;calc-number-sum&gt; )</span><br></pre></td></tr></table></figure><p>另外，“<code>+</code>”和“<code>-</code>”旁边需要留<code>空格</code>。（“<code>\</code>”和“<code>/</code>”旁边可以不用留空格）！</p><p>浏览器必须支持至少 <code>20</code> 个术语的表达式，其中 <code>NUMBER</code>、<code>DIMENSION</code>、<code>PERCENTAGE</code> 都是一个术语。如果一个 <code>calc()</code>表达式包含了超过浏览器所支持数目的术语，那么这个表达式应该被解释为无效。</p><h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><p>一个数学表达式必须有他的解析类型，这个类型是 <a href="https://drafts.csswg.org/css-values-3/#length-value" target="_blank" rel="external nofollow noopener noreferrer">长度</a>、 <a href="https://drafts.csswg.org/css-values-3/#frequency-value" target="_blank" rel="external nofollow noopener noreferrer">频率</a>、 <a href="https://drafts.csswg.org/css-values-3/#angle-value" target="_blank" rel="external nofollow noopener noreferrer">角度</a>、<a href="https://drafts.csswg.org/css-values-3/#time-value" target="_blank" rel="external nofollow noopener noreferrer">时间</a>、 <a href="https://drafts.csswg.org/css-values-3/#percentage-value" target="_blank" rel="external nofollow noopener noreferrer">百分比</a>、 <a href="https://drafts.csswg.org/css-values-3/#number-value" target="_blank" rel="external nofollow noopener noreferrer">数字</a>、 <a href="https://drafts.csswg.org/css-values-3/#integer-value" target="_blank" rel="external nofollow noopener noreferrer">整数</a>之一。在表达式所在的位置这个解析类型必须是有效的，否则表达式无效。表达式的解析类型由其包含的值的类型决定，比如数字或者整数是数字解析类型，<code>cm</code> 是长度解析类型，<code>deg</code> 是角度解析类型。<code>attr()</code>表达式的类型是其单位参数决定的。</p><blockquote><p>注意: 因为数字和整数总是被解释为数字解析类型，所以 <code>calc ()</code>中不支持不带单位的长度。 也就是说，即使 <code>width: 0;</code>和 <code>width: 5px;</code>都有效，但<code>width: calc (0 + 5px) ;</code>是无效的。</p></blockquote><p>如果表达式上下文中接受百分比，并且表达式定义的是数字之外的类型，那么百分比符号将被定义为与表达式相同的类型。例如，在 <code>width</code> 属性中，百分比是长度类型。如果在上下文中，百分比值不予任何其他类型兼容，那么百分比就只是百分比类型。如果不允许百分比代替 <code>calc()</code>，那么包含百分比的 <code>calc()</code>表达式是无效的。</p><blockquote><p>注意：比如在 <code>opacity</code> 属性中，使用 <code>calc()</code>时，百分比是不允许相对于数字的。因为如果允许了的话会造成代数计算时（对长度进行乘除时）出现严重问题，并且到现在为止，并没有提供新功能。（举个例子，<code>opacity:25%;</code>等同于 <code>opacity:.25;</code>，这只是一个简单的语法转变）。<br>注意：尽管有些属性（比如 <code>line-height</code> 和 <code>tab-size</code>）在使用时会将纯数字变为长度。但是在 <code>calc()</code>中，永远不会变成长度类型，保持数字形式。</p></blockquote><p>运算符形成子表达式，子表达式根据参数获得类型。为了使表达式更简单，运算符对所接受的类型做出了限制。 在每个运算符中，都会检查左参数和右参数的类型是否兼容。 如果兼容，类型解析成如下所述(为简单起见，忽略运算符的优先规则) :</p><ul><li>“<code>+</code>”或“<code>-</code>”，检查两侧是否类型相同，如果相同，就解析为该类型。如果一侧数字一侧整数，解析为数字。</li><li>“<code>\</code>”，检查至少一侧是数字。如果两侧都是整数，解析为整数。否则解析为另一侧的类型。</li><li>“<code>/</code>”，检查右侧是否为数字。如果左侧是整数，解析为数字。否则解析为左侧的类型。</li></ul><p>如果运算符没有通过上述检查，则表达式无效。 此外，除<code>0</code>无效，既包括除以文字<code>0</code>，也包括计算结果为<code>0</code>的任何数值表达式(因为纯数字表达式可以在解析时不需要任何附加信息)。</p><blockquote><p>注意：代数简化不会影响 <code>clac()</code>表达式或者解析类型的有效性。例如 <code>calc(5px - 5px + 10s)</code>和 <code>calc(0 \ 5px + 10s)</code>，虽然能简化但是同时运算了长度和时间，所以是无效的。</p></blockquote><h3 id="计算值"><a href="#计算值" class="headerlink" title="计算值"></a>计算值</h3><p><code>calc()</code> 表达式的<code>计算值</code>是其所有分量的<code>计算值</code>。<br>如果百分比在值计算时不能被解析，那么在 <code>clac()</code>表达式中也不能被解析。比如，<code>calc(100% - 100% + 1em)</code>解析为 <code>calc(1em + 0%)</code> ，而不是 <code>1em</code>。如果在计算百分比值时有特殊规则（比如 <code>height</code>），那么 <code>clac()</code>表达式中也应该应用这些规则。</p><p>实例 23：<br>例如，<code>font-size</code> 在值计算过程中计算百分比值，以便计算相对字体长度单位，而 <code>background-position</code> 的百分比值对布局有依赖性，因此直到使用值时才计算百分比。<br>因此，<code>background-position</code> 计算保留了 <code>calc()</code>中的百分比，而 <code>font-size</code> 将直接计算表达式并转为长度类型。</p><p>考虑到计算表格和单元格的 <code>width</code>和 <code>height</code> 时的复杂性，表格列、表格列组、表格行、表格行组以及自动和固定布局表格中的表格单元格，这些元素的 <code>width</code> 和 <code>height</code> 的百分比数学表达式可能会被指定为“<code>auto</code>”。</p><h3 id="范围检查"><a href="#范围检查" class="headerlink" title="范围检查"></a>范围检查</h3><p><code>clac()</code>表达式在值解析过程中不进行<code>范围检查</code>，因此超出范围的值不会导致声明无效。但是，表达式产生的值必须限制在上下文允许的范围内。在计算值时尽可能的夹紧可能的范围。如果无法充分简化表达式以允许范围检查，则最终<a href="https://drafts.csswg.org/css-cascade-4/#used-value" target="_blank" rel="external nofollow noopener noreferrer">使用值</a>也会夹紧，（不对<a href="https://drafts.csswg.org/css-cascade-4/#specified-value" target="_blank" rel="external nofollow noopener noreferrer">默认值</a>执行夹紧）。</p><blockquote><p>注意：范围检查要求接受 <code>calc()</code>的所有上下文将允许的值定义为<code>闭区间</code>。</p></blockquote><p>实例 24：<br>因为宽度不允许小于 <code>0px</code>，所以这三个声明是等价的:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">calc</span>(5<span class="selector-tag">px</span> <span class="selector-tag">-</span> 10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">calc</span>(<span class="selector-tag">-5px</span>);</span><br><span class="line"><span class="selector-tag">width</span>: 0<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>但是请注意，<code>width:-5px</code> 并不等同于 <code>width: calc(-5px)</code>。 <code>calc()</code>范围外的值在语法上无效，并会导致删除整个声明。</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>在本级别中未定义 <code>calc()</code>的序列化。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>在 MDN 上可以看到兼容性如下：<br><img src="/posts/ef0a6799/%E5%85%BC%E5%AE%B9%E6%80%A7.jpg" alt="浏览器兼容性"><br>一个 ToB 的前端工程师就别关心兼容性了，<code>Chrome80</code> 真香！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上一篇文章<a href="https://linjingyi.cn/posts/3680799e.html">关于各种像素概念和前端长度单位的理解</a>学懂了相对长度，翻译完这个草案学懂了 <code>clac()</code>，下一篇文章来分析在可视化大屏的布局中怎么应用相对长度单位和 <code>calc()</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> calc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于各种像素概念和前端长度单位的理解</title>
      <link href="/posts/3680799e.html"/>
      <url>/posts/3680799e.html</url>
      
        <content type="html"><![CDATA[<p>在 CSS 中，<code>1px</code>到底是多长，为什么是这个长度。百度谷歌搜索很久说法很不一致，最后才发现最标准的还是去看<a href="https://www.w3.org/" target="_blank" rel="external nofollow noopener noreferrer">万维网联盟</a>（World Wide Web Consortium，W3C）的<a href="https://www.w3.org/Style/CSS/" target="_blank" rel="external nofollow noopener noreferrer">CSS 标准和草案</a>，总结以下一些概念。</p><h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>像素是在印刷业和屏幕设备最基础的概念，一切的显示都从像素开始，循序渐进的理解 CSS 像素到底是什么。</p><a id="more"></a><h3 id="物理像素-设备像素（Device-Pixel，DP）"><a href="#物理像素-设备像素（Device-Pixel，DP）" class="headerlink" title="物理像素=设备像素（Device Pixel，DP）"></a>物理像素=设备像素（Device Pixel，DP）</h3><p><code>物理像素和设备像素</code>是等同的概念，如下图所示，指的是一个设备屏幕上的有实体的物理像素点，是一个屏幕构成的基本单元。一个像素是屏幕的最小分辨实体，所以屏幕设备的<code>分辨率</code>也就是<code>dpXSize*dpYSize</code>（<code>dpXSize</code>为横向像素数，<code>dpYSize</code>为纵向像素数）。</p><p><img src="/posts/3680799e/device-pixels.png" alt></p><p>屏幕的一个像素又由 <code>RGB（红绿蓝）</code>三个子像素构成，如下图所示，每个颜色子像素有<code>[0, 2^8-1]</code> 总计 <code>256</code> 种不同强度，三个通道就能组成 <code>2^8×2^8×2^8-1</code> 总计 <code>2^24</code> 种颜色。</p><p><img src="/posts/3680799e/pixel.jpg" alt></p><p>每个像素都能表示 <code>2^24</code> 种颜色，所以一个屏幕就可以表示五彩斑斓的图像。</p><h3 id="像素密度（Pixels-Per-Inch，PPI）"><a href="#像素密度（Pixels-Per-Inch，PPI）" class="headerlink" title="像素密度（Pixels Per Inch，PPI）"></a>像素密度（Pixels Per Inch，PPI）</h3><p><a href="https://en.wikipedia.org/wiki/Pixel_density" target="_blank" rel="external nofollow noopener noreferrer">像素密度</a>的英文名叫 <code>Pixels Per Inch</code>，简称 <code>PPI</code>，顾名思义就是一英寸长度中有多少个物理像素，是一个屏幕的生产出来以后的固有属性。<code>PPI</code> 越大，每英寸内的像素数就越多，画面就越精细。</p><p>屏幕的长度 <code>length</code>、分辨率 <code>dpXSzie</code> 或 <code>dpYSize</code>、像素密度 <code>PPI</code> 有如下换算关系。</p><ul><li><code>dpXSize = lengthX × PPI</code></li><li><code>dpYSize = lengthY × PPI</code></li></ul><p>注意 <code>length</code> 的单位是<code>英寸 Inch</code>。</p><p>所以两个屏幕如果尺寸一样，<code>PPI</code> 大的分辨率一定也大；换句话说，两个屏幕分辨率一样，<code>PPI</code>大的屏幕尺寸一定小。</p><h3 id="参考像素（Reference-Pixel，RP）"><a href="#参考像素（Reference-Pixel，RP）" class="headerlink" title="参考像素（Reference Pixel，RP）"></a>参考像素（Reference Pixel，RP）</h3><p><code>参考像素</code>英文名是 <code>Reference Pixel</code>，简称 <code>RP</code>，关于参考像素的定义可以参考<a href="https://drafts.csswg.org/css-values-3/#reference-pixel" target="_blank" rel="external nofollow noopener noreferrer">CSS 工作组的草案</a>。</p><blockquote><p>The reference pixel is the visual angle of one pixel on a device with a pixel density of 96dpi and a distance from the reader of an arm’s length. For a nominal arm’s length of 28 inches, the visual angle is therefore about 0.0213 degrees. For reading at arm’s length, 1px thus corresponds to about 0.26 mm (1/96 inch).</p></blockquote><p>很关键，翻译一下：</p><blockquote><p>参考像素是一个视觉角度，定义是站在一个手臂远的距离，观察像素密度为 96PPI 的设备中的 1 个像素的视觉角度。以一个名义上的手臂长度是 28 英寸来计算，得到的角度大小是 0.0213°。站在一个手臂远的地方观察，1 个参考像素的长度应相当于 0.26mm（1/96 英寸）。</p></blockquote><p>用下图更简明的解释参考像素，在 <code>0.0213°</code> 的视觉角度下观察，距离为 <code>71cm（28 英寸）</code>下的 <code>96PPI</code> 设备参考像素长度为 <code>0.26mm</code>；如果距离为 <code>3.5m（138 英寸）</code>，参考像素长度就应该等比计算为 <code>1.3mm</code>。</p><p><img src="/posts/3680799e/pixel1.png" alt></p><p>CSS 工作组这样定义的原因是觉得配合其他的标准时，阅读 <code>16 参考像素长度</code>的文字时体验感最佳。</p><h3 id="CSS-像素（px）"><a href="#CSS-像素（px）" class="headerlink" title="CSS 像素（px）"></a>CSS 像素（px）</h3><p>有了前置的三个概念就可以介绍到底什么是 <code>CSS 像素</code>，也就是 <code>px</code>，CSS 工作组的<a href="https://drafts.csswg.org/css-values-3/#px" target="_blank" rel="external nofollow noopener noreferrer">草案</a>中是这样写的：</p><blockquote><p>For a CSS device, these dimensions are anchored either</p><ol><li>by relating the <a href="https://drafts.csswg.org/css-values-3/#physical-units" target="_blank" rel="external nofollow noopener noreferrer">physical units</a> to their physical measurements, or</li><li>by relating the <a href="https://drafts.csswg.org/css-values-3/#px" target="_blank" rel="external nofollow noopener noreferrer">pixel unit</a> to the <a href="https://drafts.csswg.org/css-values-3/#reference-pixel" target="_blank" rel="external nofollow noopener noreferrer">reference pixel</a>.</li></ol><p>For print media at typical viewing distances, the anchor unit should be one of the standard physical units (inches, centimeters, etc). For screen media (including high-resolution devices), low-resolution devices, and devices with unusual viewing distances, it is recommended instead that the anchor unit be the pixel unit. For such devices it is recommended that the pixel unit refer to the whole number of device pixels that best approximates the reference pixel.</p></blockquote><p>翻译一下：</p><blockquote><p>对于一个 CSS 设备来说，这些维度必须要和下面这两点之一对标锚定</p><ol><li>衡量设备物理尺寸的物理单位</li><li>参考像素的像素单位</li></ol><p>对于在典型的阅读距离印刷行业来说，CSS 锚定的单位应该是一个标准的物理单位（英寸、厘米等）。对于媒体屏幕（包括高分辨率屏幕设备）、低分辨率屏幕设备和具有不寻常阅读距离的设备来说，建议将 CSS 单位锚定为物理像素单元。对于这样的设备，物理像素单元指的是最接近<code>参考像素</code>的<code>物理像素数</code>。</p></blockquote><p>阅读完就很清楚明了，<code>CSS 像素</code>的长度其实就是最<code>接近</code>参考像素的物理像素数（整数），是一个<code>相对单位</code>！同样是在 <code>0.0213°</code> 的视觉角度下观察，距离为 <code>71cm（28 英寸）</code>下的屏幕设备，观察范围内的物理像素数就是该设备建议的 CSS 像素 <code>1px</code> 的长度。</p><p>用草案里一张图片来表示，同样是 <code>1px</code>（<code>1</code> 个 CSS 像素长度），在左面的高分辨率屏幕下 <code>1 个 CSS 像素长度</code>相当于 <code>4</code> 个物理像素，而右面的普通低分辨率屏幕 <code>1px</code> 就代表 <code>1</code> 个物理像素。</p><p><img src="/posts/3680799e/pixel2.png" alt></p><h3 id="设备独立像素-逻辑像素（Device-independent-Pixel，DIP）"><a href="#设备独立像素-逻辑像素（Device-independent-Pixel，DIP）" class="headerlink" title="设备独立像素=逻辑像素（Device independent Pixel，DIP）"></a>设备独立像素=逻辑像素（Device independent Pixel，DIP）</h3><p><code>逻辑像素</code>又称设备独立像素（<code>Device independent Pixel</code>），简称 DIP。最简单的理解就是设备无关像素，或者与 <code>PPI</code> 无关的像素。放在前端的 JS 或者 CSS 里理解其实就是 CSS 像素，或者说 CSS 像素是逻辑像素的一种。</p><h3 id="设备像素比（Device-Pixels-Ratio，DPR）"><a href="#设备像素比（Device-Pixels-Ratio，DPR）" class="headerlink" title="设备像素比（Device Pixels Ratio，DPR）"></a>设备像素比（Device Pixels Ratio，DPR）</h3><p><code>设备像素比</code>是设备像素数与对应的逻辑像素数的比值，再拿出这张图片，左边的高分屏的 <code>DPR</code> 为 <code>4</code>，右边普通屏的 <code>DPR</code> 为 <code>1</code>.</p><p><img src="/posts/3680799e/pixel2.png" alt></p><p>在浏览器中，<code>window.devicePixelRatio</code> 可以拿到当前设备的 <code>DPR</code>。</p><h3 id="视窗（viewport）"><a href="#视窗（viewport）" class="headerlink" title="视窗（viewport）"></a>视窗（viewport）</h3><p>以 iPhone11 Pro 举例，设备像素数为 <code>1125×2436</code>，逻辑像素数为 <code>375×812</code>，<code>DPR</code> 为 <code>3</code>。写一个宽高为 <code>200px</code>、字体大小为 <code>16px</code> 的 <code>div</code>，结果如下：</p><p><img src="/posts/3680799e/200.jpg" alt></p><p>可以发现，文字几乎看不清，<code>div</code> 所占的比例也很小，说明这里的 <code>px</code> 使用的是设备像素，所以 <code>200px</code> 的宽高 和 <code>16px</code> 的文字 相对屏幕来说很小。</p><p>给 head 标签中添加一个 <code>meta</code> 元信息标签，让 <code>px</code> 使用逻辑像素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>结果如下图所示，可以发现，设置一个 <code>width=device-width</code>，可以让类似 IPhone 这种 <code>DPR</code> 不为 <code>1</code> 的高分屏使用逻辑像素来渲染，显示预想的正确宽高。</p><p><img src="/posts/3680799e/200viewport.jpg" alt></p><h2 id="几个长度单位"><a href="#几个长度单位" class="headerlink" title="几个长度单位"></a>几个长度单位</h2><p>除了常用的 <code>px</code> 和<code>%</code>，还有 <code>em</code>、<code>rem</code>、<code>vw</code>、<code>vh</code>、<code>vmax</code>、<code>vmin</code>，原文可见<a href="https://drafts.csswg.org/css-values-3/#viewport-relative-lengths" target="_blank" rel="external nofollow noopener noreferrer">CSS 工作组草案</a>。</p><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p><code>px</code> 是上文介绍的 <code>CSS 像素</code>，作为长度单位来说就是：该长度有多少个 <code>CSS 像素</code>就是多少 <code>px</code>。一般浏览器默认的字体大小是 <code>16px</code>。</p><h3 id><a href="#" class="headerlink" title="%"></a>%</h3><p>百分比符号的参照规则：</p><ol><li>普通定位，<code>%</code>参照的是父元素的对应属性；</li><li><code>position: absolute</code>，<code>%</code>参照的是定位后的父元素的对应属性；</li><li><code>position: fixed</code>，<code>%</code>参照的是 <code>viewport</code>（可视窗口）；</li></ol><p>后两种很容易理解，毕竟脱离了普通<code>文档流</code>，肯定以新文档流的父元素做对应。</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p><a href="https://drafts.csswg.org/css-values-3/#em" target="_blank" rel="external nofollow noopener noreferrer">草案原文</a>如下:</p><blockquote><p>Equal to the computed value of the <a href="https://drafts.csswg.org/css-fonts-3/#propdef-font-size" target="_blank" rel="external nofollow noopener noreferrer">font-size</a> property of the element on which it is used.</p></blockquote><blockquote><p><code>em</code> 单位的大小相当于所在元素的 font-size 属性大小。</p></blockquote><p>详细的说，<code>em</code> 优先参照的自己的字体大小 <code>font-size</code>、次之参照父元素的字体大小，如果没有就一直继承到 <code>body</code>。比如父元素设置 <code>font-size: 10px；</code>，那么 <code>1em=10px</code>，<code>1.6em</code> 就是 <code>16px</code>。</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p><a href="https://drafts.csswg.org/css-values-3/#rem" target="_blank" rel="external nofollow noopener noreferrer">草案原文</a>如下：</p><blockquote><p>Equal to the computed value of <a href="https://drafts.csswg.org/css-fonts-3/#propdef-font-size" target="_blank" rel="external nofollow noopener noreferrer">font-size</a> on the root element.</p><p>If used in the <a href="https://drafts.csswg.org/css-fonts-3/#propdef-font-size" target="_blank" rel="external nofollow noopener noreferrer">font-size</a> property of the root element, or in a document with no root element, 1rem is equal to the initial value of the font-size property.</p></blockquote><blockquote><p>rem 单位的大小相当于根元素的 font-size 属性大小。</p><p>如果如果在根元素的 font-size 属性中使用，或者 document 中没有根元素，1rem 相当于 font-size 初始值的大小。</p></blockquote><p><code>rem</code> 与 <code>em</code> 的区别就是多了一个 <code>root</code>，所以 <code>rem</code> 是以根元素 html 的 <code>font-size</code> 为参照，避免了中间多层 <code>em</code> 的混乱。比如根元素 <code>font-size: 16px</code>，如果想得到 <code>10px</code>的大小，就用 <code>10/16=0.625rem</code>。</p><h3 id="vw-和-vh"><a href="#vw-和-vh" class="headerlink" title="vw 和 vh"></a>vw 和 vh</h3><p><a href="https://drafts.csswg.org/css-values-3/#vw" target="_blank" rel="external nofollow noopener noreferrer">草案原文</a>如下：</p><blockquote><p><code>vw</code> unit Equal to 1% of the width of the initial containing block.</p><p><code>vh</code> unit Equal to 1% of the height of the initial containing block.</p></blockquote><blockquote><p><code>vw</code> 单位大小相当于初始包含块（不含滚动条的视窗）宽度的 1%。</p><p><code>vh</code> 单位大小相当于初始包含块（不含滚动条的视窗）高度的 1%。</p></blockquote><p><code>vw</code>、<code>vh</code> 就是 viewport width、viewport height 的意思，这两个单位只与视窗高宽有关系，<code>1</code>单位 <code>vw</code> 或 <code>vh</code> 是视窗高度或宽度的 <code>1%</code>。</p><h3 id="vmax-和-vmin"><a href="#vmax-和-vmin" class="headerlink" title="vmax 和 vmin"></a>vmax 和 vmin</h3><p><a href="https://drafts.csswg.org/css-values-3/#vmin" target="_blank" rel="external nofollow noopener noreferrer">草案原文</a>如下：</p><blockquote><p><code>vmin</code> unit Equal to the smaller of <a href="https://drafts.csswg.org/css-values-3/#vw" target="_blank" rel="external nofollow noopener noreferrer">vw</a> or <a href="https://drafts.csswg.org/css-values-3/#vh" target="_blank" rel="external nofollow noopener noreferrer">vh</a>.</p><p><code>vmax</code> unit Equal to the larger of <a href="https://drafts.csswg.org/css-values-3/#vw" target="_blank" rel="external nofollow noopener noreferrer">vw</a> or <a href="https://drafts.csswg.org/css-values-3/#vh" target="_blank" rel="external nofollow noopener noreferrer">vh</a>.</p></blockquote><blockquote><p><code>vmin</code> 单位大小相当于 <code>vw</code> 和 <code>vh</code> 中较小的那个。</p><p><code>vmax</code> 单位大小相当于 <code>vw</code> 和 <code>vh</code> 中较大的那个。</p></blockquote><p>有了 <code>vh</code> 和 <code>vw</code> 的铺垫，<code>vmax</code> 和 <code>vmin</code> 就比较清晰了，<code>vmax = max(vh, vw)，vmin = min(vh, vw)</code>。</p><p>使用这两个单位有一个很明显的好处，如果给一个块级元素的赋予了 <code>vmax</code> 或 <code>vmin</code> 做单位的宽高，当视窗被缩放时，这个块级元素既会跟随视窗一起缩放，又不会改变块级元素的宽高比导致内容畸形。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSS 遇事不懂，最标准的答案还是规范和草案！<a href="https://www.w3.org/Style/CSS/" target="_blank" rel="external nofollow noopener noreferrer">https://www.w3.org/Style/CSS/</a><br><img src="/posts/3680799e/w3c_logo-800x400.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> CSS </tag>
            
            <tag> 像素 </tag>
            
            <tag> 单位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts旭日图及轮播效果实现</title>
      <link href="/posts/4a90030.html"/>
      <url>/posts/4a90030.html</url>
      
        <content type="html"><![CDATA[<p>最近使用了 <code>sunburst 旭日图</code>，但 ECharts 的配置项实在是太多，边学习便记录。以<a href="https://gallery.echartsjs.com/explore.html#sort=rank~timeframe=all~author=all" target="_blank" rel="external nofollow noopener noreferrer">官网 gallery</a> 中的推荐 demo——<a href="https://gallery.echartsjs.com/editor.html?c=xeAESd00vq" target="_blank" rel="external nofollow noopener noreferrer">2018 豆瓣中国大陆影视剧评分排行</a>——为例，分析 <code>sunburst 旭日图</code>类型的实现，修改了原 demo 的一些错误和冗余，并给图表添加自定义的动态<code>轮播</code>效果，效果如下所示：</p><style>    div#container {    width: 100%;    height: 800px;    display: flex;    flex-direction: column;    justify-content: flex-start;    align-items: center;    background: #2e2733;    }    div#detail-container {    width: 100%;    height: 20%;    display: flex;    flex-direction: column;    justify-content: center;    align-items: center;    }    div#detail-container .kind {    color: #ffae57;    }    div#detail-container .title {    color: #ff7853;    font-size: 120%;    font-weight: bold;    }    div#echarts-container {    width: 100%;    height: 100%;    }</style><script src="https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"></script><div id="container">    <div id="detail-container"></div>    <div id="echarts-container"></div></div><script type="text/javascript">     // 基于准备好的dom，初始化echarts实例      let chartSunburst = echarts.init(        document.getElementById("echarts-container")      );      // 指定图表的配置项和数据      // 颜色序列      const colors = ["#FFAE57", "#FF7853", "#EA5151", "#CC3F57", "#9A2555"];      // 背景颜色      const bgColor = "#2E2733";      // 给不同星级分配不同颜色      let itemStyle = {        star5: {          color: colors[0]        },        star4: {          color: colors[1]        },        star3: {          color: colors[2]        },        star2: {          color: colors[3]        },        star1: {          color: colors[4]        }      };      // sunburst 旭日图树状数据      // https://www.echartsjs.com/zh/option.html#series-sunburst.data      let data = [        {          name: "电视剧",          itemStyle: {            // normal: {            color: colors[1]            // }          },          children: [            {              name: "现代",              children: [                {                  name: "5☆",                  children: [                    {                      name: "大江大河"                    },                    {                      name: "疯人院"                    },                    {                      name: "天坑鹰猎"                    }                  ]                },                {                  name: "4☆",                  children: [                    {                      name: "SCI谜案集"                    },                    {                      name: "古董局中局"                    },                    {                      name: "乡村爱情协奏曲"                    }                  ]                },                {                  name: "3☆",                  children: [                    {                      name: "上海女子图鉴"                    }                  ]                }              ]            },            {              name: "古装",              children: [                {                  name: "5☆",                  children: [                    {                      name: "天盛长歌"                    }                  ]                },                {                  name: "4☆",                  children: [                    {                      name: "小戏骨：水浒传"                    },                    {                      name: "香蜜沉沉烬如霜"                    }                  ]                },                {                  name: "3☆",                  children: [                    {                      name: "知否知否应是绿肥红瘦"                    }                  ]                }              ]            }          ]        },        {          name: "电影",          itemStyle: {            color: colors[2]          },          children: [            {              name: "喜剧",              children: [                {                  name: "5☆",                  children: [                    {                      name: "我不是药神"                    }                  ]                },                {                  name: "4☆",                  children: [                    {                      name: "无名之辈"                    },                    {                      name: "阿浪的远方"                    }                  ]                },                {                  name: "3☆",                  children: [                    {                      name: "一出好戏"                    }                  ]                }              ]            },            {              name: "剧情",              children: [                {                  name: "5☆",                  children: [                    {                      name: "无双"                    }                  ]                },                {                  name: "4☆",                  children: [                    {                      name: "大象席地而坐"                    },                    {                      name: "风中有朵雨做的云"                    },                    {                      name: "过春天"                    }                  ]                },                {                  name: "3☆",                  children: [                    {                      name: "无问西东"                    }                  ]                }              ]            },            {              name: "爱情",              children: [                {                  name: "5☆",                  children: [                    {                      name: "江湖儿女"                    }                  ]                },                {                  name: "4☆",                  children: [                    {                      name: "地球最后的夜晚"                    },                    {                      name: "你好之华"                    }                  ]                },                {                  name: "3☆"                },                {                  name: "2☆",                  children: [                    {                      name: "后来的我们"                    }                  ]                }              ]            },            {              name: "动作",              children: [                {                  name: "4☆",                  children: [                    {                      name: "红海行动"                    },                    {                      name: "影"                    },                    {                      name: "动物世界"                    }                  ]                }              ]            },            {              name: "动画",              children: [                {                  name: "5☆",                  children: [                    {                      name: "夜思"                    }                  ]                },                {                  name: "4☆",                  children: [                    {                      name: "切尔诺贝利之春"                    },                    {                      name: "女他"                    }                  ]                },                {                  name: "3☆",                  children: [                    {                      name: "风雨咒"                    }                  ]                }              ]            },            {              name: "惊悚",              children: [                {                  name: "4☆",                  children: [                    {                      name: "灵魂摆渡·黄泉"                    }                  ]                }              ]            },            {              name: "武侠",              children: [                {                  name: "3☆",                  children: [                    {                      name: "夺命剑之风云再起"                    }                  ]                },                {                  name: "2☆",                  children: [                    {                      name: "狄仁杰之四大天王"                    }                  ]                }              ]            }          ]        }      ];      // 循环处理数据，为了给不同的星级做区分      for (let j = 0; j < data.length; ++j) {        let level1 = data[j].children;        // level1中继续循环        for (let i = 0; i < level1.length; ++i) {          let block = level1[i].children;          for (let star = 0; star < block.length; ++star) {            // 定义了一个立即执行匿名函数，修改bookScoreId并从itemStyle数组返回对应的style            // 对demo进行了优化，直接拼凑字符串从itemStyle中取对应颜色            style = itemStyle["star" + parseInt(block[star].name)];            // 给不同星级文字label设置不同的颜色，并添加一个downplay不相关文本透明度0.5            block[star].label = {              color: style.color,              // 似乎不生效，没有这个api              downplay: {                opacity: 0.5              }            };            // 如果该星级下有书，就继续对下级循环            if (block[star].children) {              // 继续给星级下级分配相同颜色              style = {                opacity: 1,                color: style.color              };              // 循环              block[star].children.forEach(book => {                // 同一星级下的每本书value都设为1，用于平分扇形                book.value = 1;                book.itemStyle = style;                book.label = {                  color: style.color                };              });            }          }          level1[i].itemStyle = {            color: data[j].itemStyle.color          };        }      }      let option = {        backgroundColor: bgColor,        // 设置调色盘颜色        // https://www.echartsjs.com/zh/option.html#color        color: colors,        // https://www.echartsjs.com/zh/option.html#series-sunburst        series: [          {            // 旭日图            type: "sunburst",            // 中心位置            center: ["50%", "50%"],            // 数据来源            data: data,            // 排序时，如果是第一层深度，靠value排序，其余情况dataIndex排序            // https://www.echartsjs.com/zh/option.html#series-sunburst.sort            sort: (a, b) => {              if (a.depth === 1) {                return b.getValue() - a.getValue();              } else {                return a.dataIndex - b.dataIndex;              }            },            // 每一个标签样式            // https://www.echartsjs.com/zh/option.html#series-sunburst.label            label: {              // 径向旋转              rotate: "radial",              color: bgColor,              opacity: 0.9            },            // 每一项的样式            // https://www.echartsjs.com/zh/option.html#series-sunburst.itemStyle            itemStyle: {              borderColor: bgColor,              borderWidth: 2,              opacity: 0.9            },            // 未选中的样式            // https://www.echartsjs.com/zh/option.html#series-sunburst.downplay            downplay: {              itemStyle: {                opacity: 0.7              },              label: {                opacity: 0.7              }            },            // 选中的样式            // https://www.echartsjs.com/zh/option.html#series-sunburst.highlight            highlight: {              itemStyle: {                opacity: 1,              },              label: {                opacity: 1,              }            },            // 给每个级别单独设置            // https://www.echartsjs.com/zh/option.html#series-sunburst.levels            levels: [              // 这个空对象其实是第0级              {},              // 第1级              {                // r0时内半径，r是外半径                r0: 0,                r: 40,                label: {                  rotate: 0                }              },              // 第2级              {                r0: 40,                r: 105,              },              // 第3级              {                r0: 115,                r: 140,                // 单独给第三圈设置了边框样式和背景样式                itemStyle: {                  shadowBlur: 2,                  shadowColor: colors[2],                  color: "transparent"                },                // 给该层设置切向旋转                label: {                  rotate: "tangential",                  fontSize: 10,                  color: colors[0]                }              },              // 第4级              {                r0: 140,                r: 145,                itemStyle: {                  // 烟雾状的blur                  shadowBlur: 80,                  shadowColor: colors[0]                },                label: {                  // 最外圈把标签设置到了最外层                  position: "outside",                  textShadowBlur: 5,                  textShadowColor: "#333"                }              }            ]          }        ]      };      // 使用刚指定的配置项和数据显示图表。      chartSunburst.setOption(option);      // 下面是轮播效果      // 首先把整个树状结构的数据扁平化，形成一个由level1、2、3、4组成的数组      let dataArrSorted = [];      data.forEach(level1 => {        if (level1.children) {          level1.children.forEach(level2 => {            if (level2.children) {              level2.children.forEach(level3 => {                if (level3.children) {                  level3.children.forEach(level4 => {                    dataArrSorted.push({                      level1: level1.name,                      level2: level2.name,                      level3: level3.name,                      level4: level4.name                    });                  });                }              });            }          });        }      });      // https://www.echartsjs.com/zh/api.html#echartsInstance.on      // 监听chartSunburst的highlight事件，在回调函数中拿到params组成一个dom片段插入      chartSunburst.on("highlight", params => {        document.querySelector(          "#detail-container"        ).innerHTML = `<p class="kind">${params.level1} > ${params.level2} > ${params.level3}</p><p class="title">${params.level4}</p>`;      });      // 设置一个定时器，每2秒派发一个highlight事件，name是level4，再把整个dataArrSorted[i]对象解构进去发送      // https://www.echartsjs.com/zh/api.html#action.highlight      i = 0;      const key = setInterval(() => {        if (i < dataArrSorted.length) {          chartSunburst.dispatchAction({            type: "highlight",            name: dataArrSorted[i].level4,            ...dataArrSorted[i]          });        } else {          // 当循环完成，清除定时器          clearInterval(key);        }        i++;      }, 2000);</script><a id="more"></a><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><h3 id="引入-ECharts"><a href="#引入-ECharts" class="headerlink" title="引入 ECharts"></a>引入 ECharts</h3><p>首先，参照 ECharts 官方入门引导——<a href="https://www.echartsjs.com/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts" target="_blank" rel="external nofollow noopener noreferrer">5 分钟上手 ECharts</a>，通过<a href="https://www.jsdelivr.com/package/npm/echarts" target="_blank" rel="external nofollow noopener noreferrer">jsDelivr</a> CDN 方式引入 <code>echarts.min.js</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h3><p>其次，构建基础的 HTML 标签和 CSS。为了实现轮播，对原 demo 进行了修改，布局使用的是 CSS3 的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external nofollow noopener noreferrer">Flex 布局</a>，将页面分成上下两部分，<code>div#detail-container</code> 部分存放轮播内容，<code>div#echarts-container</code> 部分存放旭日图图表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  html,</span><br><span class="line">  body &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-id">#container</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    align-items: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#2e2733</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-id">#detail-container</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 20%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-id">#detail-container</span> <span class="selector-class">.kind</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ffae57</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-id">#detail-container</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ff7853</span>;</span></span><br><span class="line">    font-size: 120%;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-id">#echarts-container</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"detail-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"echarts-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ECharts-API"><a href="#ECharts-API" class="headerlink" title="ECharts API"></a>ECharts API</h3><p>接着参照入门引导，将 EChart <code>init</code> <a href="https://www.echartsjs.com/zh/api.html#echarts.init" target="_blank" rel="external nofollow noopener noreferrer">实例化</a>并 <code>setOption</code><a href="https://www.echartsjs.com/zh/api.html#echartsInstance.setOption" target="_blank" rel="external nofollow noopener noreferrer">设定配置项</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="keyword">let</span> chartSunburst = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'echarts-container'</span>));</span><br><span class="line"><span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  <span class="comment">// ...配置项内容</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">chartSunburst.setOption(option);</span><br></pre></td></tr></table></figure><h2 id="旭日图配置"><a href="#旭日图配置" class="headerlink" title="旭日图配置"></a>旭日图配置</h2><p>ECharts 是一个配置式的库，API 的文档内容比较短，而所有的图表的配置项非常之长。配置项是 ECharts 的核心。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p><code>colors</code> 主要是给后续代码做取色用，同时也是配置项中的<a href="https://www.echartsjs.com/zh/option.html#color" target="_blank" rel="external nofollow noopener noreferrer">调色盘颜色列表</a>，如果图表没有设置颜色，则会依次循环从该列表中取颜色作为系列颜色。</p><p><code>itemStyle</code> 中给影视剧星级从 <code>1</code> 到 <code>5</code> 都分配了不同的颜色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 颜色序列</span></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">'#FFAE57'</span>, <span class="string">'#FF7853'</span>, <span class="string">'#EA5151'</span>, <span class="string">'#CC3F57'</span>, <span class="string">'#9A2555'</span>];</span><br><span class="line"><span class="comment">// 背景颜色</span></span><br><span class="line"><span class="keyword">const</span> bgColor = <span class="string">'#2E2733'</span>;</span><br><span class="line"><span class="comment">// 给不同星级分配不同颜色</span></span><br><span class="line"><span class="keyword">let</span> itemStyle = &#123;</span><br><span class="line">  star5: &#123;</span><br><span class="line">    color: colors[<span class="number">0</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  star4: &#123;</span><br><span class="line">    color: colors[<span class="number">1</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  star3: &#123;</span><br><span class="line">    color: colors[<span class="number">2</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  star2: &#123;</span><br><span class="line">    color: colors[<span class="number">3</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  star1: &#123;</span><br><span class="line">    color: colors[<span class="number">4</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="原数据"><a href="#原数据" class="headerlink" title="原数据"></a>原数据</h4><p><code>sunburst 旭日图</code>类型的数据应该是<a href="https://www.echartsjs.com/zh/option.html#series-sunburst.data" target="_blank" rel="external nofollow noopener noreferrer">树状</a>的，每一级都含有一个 <code>name</code> 属性作为标签名，可选一个 <code>value（值）</code>、<code>itemStyle（数据样式配置项）</code>、<code>label（标签配置项）</code>，如果不是最后一级，都应该有一个 <code>children（子树）</code>。</p><p>代码所示数据举例，级别为<code>电视剧 &gt; 现代 &gt; 5☆ &gt; 大江大河</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sunburst 旭日图树状数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'电视剧'</span>,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      <span class="comment">// normal: &#123;</span></span><br><span class="line">      color: colors[<span class="number">1</span>]</span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'现代'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'5☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'大江大河'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'疯人院'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'天坑鹰猎'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'SCI谜案集'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'古董局中局'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'乡村爱情协奏曲'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'3☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'上海女子图鉴'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'古装'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'5☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'天盛长歌'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'小戏骨：水浒传'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'香蜜沉沉烬如霜'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'3☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'知否知否应是绿肥红瘦'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'电影'</span>,</span><br><span class="line">    itemStyle: &#123;</span><br><span class="line">      color: colors[<span class="number">2</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'喜剧'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'5☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'我不是药神'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'无名之辈'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'阿浪的远方'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'3☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'一出好戏'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'剧情'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'5☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'无双'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'大象席地而坐'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'风中有朵雨做的云'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'过春天'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'3☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'无问西东'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'爱情'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'5☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'江湖儿女'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'地球最后的夜晚'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'你好之华'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'3☆'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'2☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'后来的我们'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'动作'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'红海行动'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'影'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'动物世界'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'动画'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'5☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'夜思'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'切尔诺贝利之春'</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'女他'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'3☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'风雨咒'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'惊悚'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'4☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'灵魂摆渡·黄泉'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'武侠'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'3☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'夺命剑之风云再起'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">'2☆'</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                name: <span class="string">'狄仁杰之四大天王'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h4><p>上述的原始数据缺少了必填项，每个叶子节点处的 <code>name</code> 必须配有一个 <code>value</code>，有 <code>value</code> 才能给其分配一个<code>弧度</code>；其次，demo 作者想把<code>不同星级</code>的影视剧使用不同颜色区分开，所以还需要给星级节点和叶子节点都设置一个 <code>itemStyle</code>。下述代码就是四层循环实现这两个目的。</p><p>需要注意的地方：</p><ul><li>第一，修改了 <code>style</code> 属性，从原 demo 的<code>立即执行函数</code>改为了更简单的<code>拼凑字符串</code>直接取色；</li><li>第二，去除了 <code>label</code> 下的 <code>downplay</code>，原作者应该是想给标签设置 <code>downplay</code>，但是根据配置项手册这样是<code>不生效</code>的；</li><li>第三，去除了 <code>bookScore</code> 和 <code>bookScoreId</code> 相关的内容，我猜作者可能是想用这两个属性来给<code>非叶子节点</code>配置 <code>value</code>，后来发现不是必需的，就没有写完。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环处理数据，为了给不同的星级做区分</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; data.length; ++j) &#123;</span><br><span class="line">  <span class="comment">// level1是电视剧分类下古装、现代这个级别的数组</span></span><br><span class="line">  <span class="comment">// [</span></span><br><span class="line">  <span class="comment">//   &#123;</span></span><br><span class="line">  <span class="comment">//     name: "现代",</span></span><br><span class="line">  <span class="comment">//     children: [...]</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="comment">//   &#123;</span></span><br><span class="line">  <span class="comment">//     name: "古装",</span></span><br><span class="line">  <span class="comment">//     children: [...]</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// ];</span></span><br><span class="line">  <span class="keyword">let</span> level1 = data[j].children;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// level1中继续循环</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; level1.length; ++i) &#123;</span><br><span class="line">    <span class="comment">// block是现代分类下的5☆4☆2☆级别的数组</span></span><br><span class="line">    <span class="comment">// [</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     name: "5☆",</span></span><br><span class="line">    <span class="comment">//     children: [</span></span><br><span class="line">    <span class="comment">//       &#123;</span></span><br><span class="line">    <span class="comment">//         name: "大江大河"</span></span><br><span class="line">    <span class="comment">//       &#125;,</span></span><br><span class="line">    <span class="comment">//       &#123;</span></span><br><span class="line">    <span class="comment">//         name: "疯人院"</span></span><br><span class="line">    <span class="comment">//       &#125;,</span></span><br><span class="line">    <span class="comment">//       &#123;</span></span><br><span class="line">    <span class="comment">//         name: "天坑鹰猎"</span></span><br><span class="line">    <span class="comment">//       &#125;</span></span><br><span class="line">    <span class="comment">//     ]</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     name: "4☆",</span></span><br><span class="line">    <span class="comment">//     children: [</span></span><br><span class="line">    <span class="comment">//       &#123;</span></span><br><span class="line">    <span class="comment">//         name: "SCI谜案集"</span></span><br><span class="line">    <span class="comment">//       &#125;,</span></span><br><span class="line">    <span class="comment">//       &#123;</span></span><br><span class="line">    <span class="comment">//         name: "古董局中局"</span></span><br><span class="line">    <span class="comment">//       &#125;,</span></span><br><span class="line">    <span class="comment">//       &#123;</span></span><br><span class="line">    <span class="comment">//         name: "乡村爱情协奏曲"</span></span><br><span class="line">    <span class="comment">//       &#125;</span></span><br><span class="line">    <span class="comment">//     ]</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     name: "3☆",</span></span><br><span class="line">    <span class="comment">//     children: [</span></span><br><span class="line">    <span class="comment">//       &#123;</span></span><br><span class="line">    <span class="comment">//         name: "上海女子图鉴"</span></span><br><span class="line">    <span class="comment">//       &#125;</span></span><br><span class="line">    <span class="comment">//     ]</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// ];</span></span><br><span class="line">    <span class="keyword">let</span> block = level1[i].children;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> star = <span class="number">0</span>; star &lt; block.length; ++star) &#123;</span><br><span class="line">      <span class="comment">// 对demo进行了优化，直接拼凑字符串从itemStyle中取对应颜色</span></span><br><span class="line">      style = itemStyle[<span class="string">'star'</span> + <span class="built_in">parseInt</span>(block[star].name)];</span><br><span class="line">      <span class="comment">// 给不同星级文字label设置不同的颜色</span></span><br><span class="line">      block[star].label = &#123;</span><br><span class="line">        color: style.color</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 如果该星级下有影视剧，就继续对下级循环</span></span><br><span class="line">      <span class="keyword">if</span> (block[star].children) &#123;</span><br><span class="line">        <span class="comment">// 继续给星级下级分配相同颜色</span></span><br><span class="line">        style = &#123;</span><br><span class="line">          opacity: <span class="number">1</span>,</span><br><span class="line">          color: style.color</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 循环</span></span><br><span class="line">        block[star].children.forEach(<span class="function"><span class="params">book</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 同一星级下的每个影视剧value都设为1，用于平分扇形</span></span><br><span class="line">          book.value = <span class="number">1</span>;</span><br><span class="line">          book.itemStyle = style;</span><br><span class="line">          book.label = &#123;</span><br><span class="line">            color: style.color</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    level1[i].itemStyle = &#123;</span><br><span class="line">      color: data[j].itemStyle.color</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="option-配置"><a href="#option-配置" class="headerlink" title="option 配置"></a>option 配置</h3><p><code>option</code> 的配置才是 ECharts 的核心，在这个 demo 中，大部分的<code>配置项</code>都可以根据名字一眼看懂，把主要的几个<code>配置项</code>的文档列出来：</p><ul><li>color（调色盘）：<a href="https://www.echartsjs.com/zh/option.html#color" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#color</a></li><li>series（图表类型）：<a href="https://www.echartsjs.com/zh/option.html#series-sunburst" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-sunburst</a></li><li>sort（数据排序）：<a href="https://www.echartsjs.com/zh/option.html#series-sunburst.sort" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-sunburst.sort</a></li><li>label（标签样式）：<a href="https://www.echartsjs.com/zh/option.html#series-sunburst.label" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-sunburst.label</a></li><li>itemStyle（数据样式）：<a href="https://www.echartsjs.com/zh/option.html#series-sunburst.itemStyle" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-sunburst.itemStyle</a></li><li>downplay（未选中项样式）：<a href="https://www.echartsjs.com/zh/option.html#series-sunburst.downplay" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-sunburst.downplay</a></li><li>highlight（选中项样式）：<a href="https://www.echartsjs.com/zh/option.html#series-sunburst.highlight" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-sunburst.highlight</a></li><li>levels（不同级别的样式）：<a href="https://www.echartsjs.com/zh/option.html#series-sunburst.levels" target="_blank" rel="external nofollow noopener noreferrer">https://www.echartsjs.com/zh/option.html#series-sunburst.levels</a></li></ul><p>代码如下，需要注意的一点是，在旭日图中如果几个配置项对某一项样式<code>同时</code>做出了配置，那么优先级是：<code>downplay 或 highlight &gt; data &gt; levels &gt; series</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  backgroundColor: bgColor,</span><br><span class="line">  <span class="comment">// 设置调色盘颜色</span></span><br><span class="line">  <span class="comment">// https://www.echartsjs.com/zh/option.html#color</span></span><br><span class="line">  color: colors,</span><br><span class="line">  <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst</span></span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 旭日图</span></span><br><span class="line">      type: <span class="string">'sunburst'</span>,</span><br><span class="line">      <span class="comment">// 中心位置</span></span><br><span class="line">      center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">      <span class="comment">// 数据来源</span></span><br><span class="line">      data: data,</span><br><span class="line">      <span class="comment">// 排序时，如果是第一层深度，靠value排序，其余情况dataIndex排序</span></span><br><span class="line">      <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.sort</span></span><br><span class="line">      sort: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.depth === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> b.getValue() - a.getValue();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> a.dataIndex - b.dataIndex;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 每一个标签样式</span></span><br><span class="line">      <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.label</span></span><br><span class="line">      label: &#123;</span><br><span class="line">        <span class="comment">// 径向旋转</span></span><br><span class="line">        rotate: <span class="string">'radial'</span>,</span><br><span class="line">        color: bgColor,</span><br><span class="line">        opacity: <span class="number">0.9</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 每一项的样式</span></span><br><span class="line">      <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.itemStyle</span></span><br><span class="line">      itemStyle: &#123;</span><br><span class="line">        borderColor: bgColor,</span><br><span class="line">        borderWidth: <span class="number">2</span>,</span><br><span class="line">        opacity: <span class="number">0.9</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 未选中的样式</span></span><br><span class="line">      <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.downplay</span></span><br><span class="line">      downplay: &#123;</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          opacity: <span class="number">0.7</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          opacity: <span class="number">0.7</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 选中的样式</span></span><br><span class="line">      <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.highlight</span></span><br><span class="line">      highlight: &#123;</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          opacity: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          opacity: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 给每个级别单独设置</span></span><br><span class="line">      <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.levels</span></span><br><span class="line">      levels: [</span><br><span class="line">        <span class="comment">// 这个空对象其实是第0级</span></span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        <span class="comment">// 第1级</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// r0时内半径，r是外半径</span></span><br><span class="line">          r0: <span class="number">0</span>,</span><br><span class="line">          r: <span class="number">40</span>,</span><br><span class="line">          label: &#123;</span><br><span class="line">            rotate: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 第2级</span></span><br><span class="line">        &#123;</span><br><span class="line">          r0: <span class="number">40</span>,</span><br><span class="line">          r: <span class="number">105</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 第3级</span></span><br><span class="line">        &#123;</span><br><span class="line">          r0: <span class="number">115</span>,</span><br><span class="line">          r: <span class="number">140</span>,</span><br><span class="line">          <span class="comment">// 单独给第三圈设置了边框样式和背景样式</span></span><br><span class="line">          itemStyle: &#123;</span><br><span class="line">            shadowBlur: <span class="number">2</span>,</span><br><span class="line">            shadowColor: colors[<span class="number">2</span>],</span><br><span class="line">            color: <span class="string">'transparent'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 给该层设置切向旋转</span></span><br><span class="line">          label: &#123;</span><br><span class="line">            rotate: <span class="string">'tangential'</span>,</span><br><span class="line">            fontSize: <span class="number">10</span>,</span><br><span class="line">            color: colors[<span class="number">0</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 第4级</span></span><br><span class="line">        &#123;</span><br><span class="line">          r0: <span class="number">140</span>,</span><br><span class="line">          r: <span class="number">145</span>,</span><br><span class="line">          itemStyle: &#123;</span><br><span class="line">            <span class="comment">// 烟雾状的blur</span></span><br><span class="line">            shadowBlur: <span class="number">80</span>,</span><br><span class="line">            shadowColor: colors[<span class="number">0</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          label: &#123;</span><br><span class="line">            <span class="comment">// 最外圈把标签设置到了最外层</span></span><br><span class="line">            position: <span class="string">'outside'</span>,</span><br><span class="line">            textShadowBlur: <span class="number">5</span>,</span><br><span class="line">            textShadowColor: <span class="string">'#333'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="轮播效果"><a href="#轮播效果" class="headerlink" title="轮播效果"></a>轮播效果</h2><p>经过上述已经能实现原 demo 的样式，在这里继续给 demo 添加<code>轮播</code>效果。</p><h3 id="数据扁平化"><a href="#数据扁平化" class="headerlink" title="数据扁平化"></a>数据扁平化</h3><p>因为定时器按固定时间间隔遍历对象的叶子节点很麻烦，所以在这里先把数据四层循环由对象<code>扁平化</code>为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先把整个树状结构的数据扁平化，形成一个由level1、2、3、4组成的数组</span></span><br><span class="line"><span class="keyword">let</span> dataArrSorted = [];</span><br><span class="line">data.forEach(<span class="function"><span class="params">level1</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (level1.children) &#123;</span><br><span class="line">    level1.children.forEach(<span class="function"><span class="params">level2</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (level2.children) &#123;</span><br><span class="line">        level2.children.forEach(<span class="function"><span class="params">level3</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (level3.children) &#123;</span><br><span class="line">            level3.children.forEach(<span class="function"><span class="params">level4</span> =&gt;</span> &#123;</span><br><span class="line">              dataArrSorted.push(&#123;</span><br><span class="line">                level1: level1.name,</span><br><span class="line">                level2: level2.name,</span><br><span class="line">                level3: level3.name,</span><br><span class="line">                level4: level4.name</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><p><a href="https://www.echartsjs.com/zh/api.html#echartsInstance.on" target="_blank" rel="external nofollow noopener noreferrer">监听</a>Echarts 的旭日图实例 <code>chartSunburst</code> 上的 <code>highlight 事件</code>，并把回调的参数拼凑 <code>dom</code> 片段插入 <code>body</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听chartSunburst的highlight事件，在回调函数中拿到params组成一个dom片段插入</span></span><br><span class="line">chartSunburst.on(<span class="string">'highlight'</span>, params =&gt; &#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(</span><br><span class="line">    <span class="string">'#detail-container'</span></span><br><span class="line">  ).innerHTML = <span class="string">`&lt;p class="kind"&gt;<span class="subst">$&#123;params.level1&#125;</span> &gt; <span class="subst">$&#123;params.level2&#125;</span> &gt; <span class="subst">$&#123;params.level3&#125;</span>&lt;/p&gt;&lt;p class="title"&gt;<span class="subst">$&#123;params.level4&#125;</span>&lt;/p&gt;`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="定时器派发事件"><a href="#定时器派发事件" class="headerlink" title="定时器派发事件"></a>定时器派发事件</h3><p>使用 <code>setInterval</code> 定时器，每两秒<a href="https://www.echartsjs.com/zh/api.html#action.highlight" target="_blank" rel="external nofollow noopener noreferrer">派发</a>一个 <code>highlight 事件</code>，<code>name</code> 取 <code>dataArrSorted[i].level4</code>，并把整个 <code>dataArrSorted[i]</code>解构成<code>参数</code>传出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置一个定时器，每2秒派发一个highlight事件，name是level4，再把整个dataArrSorted[i]对象解构进去发送</span></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> key = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; dataArrSorted.length) &#123;</span><br><span class="line">    chartSunburst.dispatchAction(&#123;</span><br><span class="line">      type: <span class="string">'highlight'</span>,</span><br><span class="line">      name: dataArrSorted[i].level4,</span><br><span class="line">      ...dataArrSorted[i]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当循环完成，清除定时器</span></span><br><span class="line">    clearInterval(key);</span><br><span class="line">  &#125;</span><br><span class="line">  i++;</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/echarts@4.6.0/dist/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>echarts sunburst旭日图轮播<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-id">#container</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: flex-start;</span><br><span class="line">        align-items: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#2e2733</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-id">#detail-container</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 20%;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-id">#detail-container</span> <span class="selector-class">.kind</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ffae57</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-id">#detail-container</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ff7853</span>;</span></span><br><span class="line">        font-size: 120%;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-tag">div</span><span class="selector-id">#echarts-container</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"detail-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"echarts-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> chartSunburst = echarts.init(</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'echarts-container'</span>)</span></span><br><span class="line">      );</span><br><span class="line"><span class="actionscript">      <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 颜色序列</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> colors = [<span class="string">'#FFAE57'</span>, <span class="string">'#FF7853'</span>, <span class="string">'#EA5151'</span>, <span class="string">'#CC3F57'</span>, <span class="string">'#9A2555'</span>];</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 背景颜色</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> bgColor = <span class="string">'#2E2733'</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 给不同星级分配不同颜色</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> itemStyle = &#123;</span></span><br><span class="line">        star5: &#123;</span><br><span class="line">          color: colors[0]</span><br><span class="line">        &#125;,</span><br><span class="line">        star4: &#123;</span><br><span class="line">          color: colors[1]</span><br><span class="line">        &#125;,</span><br><span class="line">        star3: &#123;</span><br><span class="line">          color: colors[2]</span><br><span class="line">        &#125;,</span><br><span class="line">        star2: &#123;</span><br><span class="line">          color: colors[3]</span><br><span class="line">        &#125;,</span><br><span class="line">        star1: &#123;</span><br><span class="line">          color: colors[4]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// sunburst 旭日图树状数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.data</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> data = [</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">'电视剧'</span>,</span></span><br><span class="line">          itemStyle: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// normal: &#123;</span></span></span><br><span class="line">            color: colors[1]</span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'现代'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'5☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'大江大河'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'疯人院'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'天坑鹰猎'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'SCI谜案集'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'古董局中局'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'乡村爱情协奏曲'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'3☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'上海女子图鉴'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'古装'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'5☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'天盛长歌'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'小戏骨：水浒传'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'香蜜沉沉烬如霜'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'3☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'知否知否应是绿肥红瘦'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">'电影'</span>,</span></span><br><span class="line">          itemStyle: &#123;</span><br><span class="line">            color: colors[2]</span><br><span class="line">          &#125;,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'喜剧'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'5☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'我不是药神'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'无名之辈'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'阿浪的远方'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'3☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'一出好戏'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'剧情'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'5☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'无双'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'大象席地而坐'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'风中有朵雨做的云'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'过春天'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'3☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'无问西东'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'爱情'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'5☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'江湖儿女'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'地球最后的夜晚'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'你好之华'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'3☆'</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'2☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'后来的我们'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'动作'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'红海行动'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'影'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'动物世界'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'动画'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'5☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'夜思'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'切尔诺贝利之春'</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'女他'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'3☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'风雨咒'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'惊悚'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'4☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'灵魂摆渡·黄泉'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">              name: <span class="string">'武侠'</span>,</span></span><br><span class="line">              children: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'3☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'夺命剑之风云再起'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  name: <span class="string">'2☆'</span>,</span></span><br><span class="line">                  children: [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="actionscript">                      name: <span class="string">'狄仁杰之四大天王'</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ];</span><br><span class="line"><span class="actionscript">      <span class="comment">// 循环处理数据，为了给不同的星级做区分</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; data.length; ++j) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// level1是电视剧分类下古装、现代这个级别的数组</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// [</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     name: "现代",</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     children: [...]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     name: "古装",</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     children: [...]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ];</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> level1 = data[j].children;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// level1中继续循环</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; level1.length; ++i) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// block是现代分类下的5☆4☆2☆级别的数组</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// [</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     name: "5☆",</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     children: [</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//         name: "大江大河"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#125;,</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//         name: "疯人院"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#125;,</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//         name: "天坑鹰猎"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     ]</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     name: "4☆",</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     children: [</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//         name: "SCI谜案集"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#125;,</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//         name: "古董局中局"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#125;,</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//         name: "乡村爱情协奏曲"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     ]</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     name: "3☆",</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     children: [</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//         name: "上海女子图鉴"</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//       &#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     ]</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// ];</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> block = level1[i].children;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> star = <span class="number">0</span>; star &lt; block.length; ++star) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 对demo进行了优化，直接拼凑字符串从itemStyle中取对应颜色</span></span></span><br><span class="line"><span class="javascript">            style = itemStyle[<span class="string">'star'</span> + <span class="built_in">parseInt</span>(block[star].name)];</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 给不同星级文字label设置不同的颜色</span></span></span><br><span class="line">            block[star].label = &#123;</span><br><span class="line">              color: style.color</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 如果该星级下有影视剧，就继续对下级循环</span></span></span><br><span class="line">            if (block[star].children) &#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 继续给星级下级分配相同颜色</span></span></span><br><span class="line">              style = &#123;</span><br><span class="line">                opacity: 1,</span><br><span class="line">                color: style.color</span><br><span class="line">              &#125;;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 循环</span></span></span><br><span class="line"><span class="javascript">              block[star].children.forEach(<span class="function"><span class="params">book</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 同一星级下的每个影视剧value都设为1，用于平分扇形</span></span></span><br><span class="line">                book.value = 1;</span><br><span class="line">                book.itemStyle = style;</span><br><span class="line">                book.label = &#123;</span><br><span class="line">                  color: style.color</span><br><span class="line">                &#125;;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          level1[i].itemStyle = &#123;</span><br><span class="line">            color: data[j].itemStyle.color</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> option = &#123;</span></span><br><span class="line">        backgroundColor: bgColor,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 设置调色盘颜色</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// https://www.echartsjs.com/zh/option.html#color</span></span></span><br><span class="line">        color: colors,</span><br><span class="line"><span class="actionscript">        <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst</span></span></span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 旭日图</span></span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'sunburst'</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 中心位置</span></span></span><br><span class="line"><span class="actionscript">            center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 数据来源</span></span></span><br><span class="line">            data: data,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 排序时，如果是第一层深度，靠value排序，其余情况dataIndex排序</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.sort</span></span></span><br><span class="line"><span class="javascript">            sort: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span></span><br><span class="line">              if (a.depth === 1) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> b.getValue() - a.getValue();</span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> a.dataIndex - b.dataIndex;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 每一个标签样式</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.label</span></span></span><br><span class="line">            label: &#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 径向旋转</span></span></span><br><span class="line"><span class="actionscript">              rotate: <span class="string">'radial'</span>,</span></span><br><span class="line">              color: bgColor,</span><br><span class="line">              opacity: 0.9</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 每一项的样式</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.itemStyle</span></span></span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              borderColor: bgColor,</span><br><span class="line">              borderWidth: 2,</span><br><span class="line">              opacity: 0.9</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 未选中的样式</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.downplay</span></span></span><br><span class="line">            downplay: &#123;</span><br><span class="line">              itemStyle: &#123;</span><br><span class="line">                opacity: 0.7</span><br><span class="line">              &#125;,</span><br><span class="line">              label: &#123;</span><br><span class="line">                opacity: 0.7</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 选中的样式</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.highlight</span></span></span><br><span class="line">            highlight: &#123;</span><br><span class="line">              itemStyle: &#123;</span><br><span class="line">                opacity: 1</span><br><span class="line">              &#125;,</span><br><span class="line">              label: &#123;</span><br><span class="line">                opacity: 1</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 给每个级别单独设置</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// https://www.echartsjs.com/zh/option.html#series-sunburst.levels</span></span></span><br><span class="line">            levels: [</span><br><span class="line"><span class="actionscript">              <span class="comment">// 这个空对象其实是第0级</span></span></span><br><span class="line">              &#123;&#125;,</span><br><span class="line"><span class="actionscript">              <span class="comment">// 第1级</span></span></span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// r0时内半径，r是外半径</span></span></span><br><span class="line">                r0: 0,</span><br><span class="line">                r: 40,</span><br><span class="line">                label: &#123;</span><br><span class="line">                  rotate: 0</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line"><span class="actionscript">              <span class="comment">// 第2级</span></span></span><br><span class="line">              &#123;</span><br><span class="line">                r0: 40,</span><br><span class="line">                r: 105</span><br><span class="line">              &#125;,</span><br><span class="line"><span class="actionscript">              <span class="comment">// 第3级</span></span></span><br><span class="line">              &#123;</span><br><span class="line">                r0: 115,</span><br><span class="line">                r: 140,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 单独给第三圈设置了边框样式和背景样式</span></span></span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                  shadowBlur: 2,</span><br><span class="line">                  shadowColor: colors[2],</span><br><span class="line"><span class="actionscript">                  color: <span class="string">'transparent'</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="comment">// 给该层设置切向旋转</span></span></span><br><span class="line">                label: &#123;</span><br><span class="line"><span class="actionscript">                  rotate: <span class="string">'tangential'</span>,</span></span><br><span class="line">                  fontSize: 10,</span><br><span class="line">                  color: colors[0]</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line"><span class="actionscript">              <span class="comment">// 第4级</span></span></span><br><span class="line">              &#123;</span><br><span class="line">                r0: 140,</span><br><span class="line">                r: 145,</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line"><span class="actionscript">                  <span class="comment">// 烟雾状的blur</span></span></span><br><span class="line">                  shadowBlur: 80,</span><br><span class="line">                  shadowColor: colors[0]</span><br><span class="line">                &#125;,</span><br><span class="line">                label: &#123;</span><br><span class="line"><span class="actionscript">                  <span class="comment">// 最外圈把标签设置到了最外层</span></span></span><br><span class="line"><span class="actionscript">                  position: <span class="string">'outside'</span>,</span></span><br><span class="line">                  textShadowBlur: 5,</span><br><span class="line"><span class="actionscript">                  textShadowColor: <span class="string">'#333'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line">      chartSunburst.setOption(option);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 下面是轮播效果</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 首先把整个树状结构的数据扁平化，形成一个由level1、2、3、4组成的数组</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> dataArrSorted = [];</span></span><br><span class="line"><span class="javascript">      data.forEach(<span class="function"><span class="params">level1</span> =&gt;</span> &#123;</span></span><br><span class="line">        if (level1.children) &#123;</span><br><span class="line"><span class="javascript">          level1.children.forEach(<span class="function"><span class="params">level2</span> =&gt;</span> &#123;</span></span><br><span class="line">            if (level2.children) &#123;</span><br><span class="line"><span class="javascript">              level2.children.forEach(<span class="function"><span class="params">level3</span> =&gt;</span> &#123;</span></span><br><span class="line">                if (level3.children) &#123;</span><br><span class="line"><span class="javascript">                  level3.children.forEach(<span class="function"><span class="params">level4</span> =&gt;</span> &#123;</span></span><br><span class="line">                    dataArrSorted.push(&#123;</span><br><span class="line">                      level1: level1.name,</span><br><span class="line">                      level2: level2.name,</span><br><span class="line">                      level3: level3.name,</span><br><span class="line">                      level4: level4.name</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// https://www.echartsjs.com/zh/api.html#echartsInstance.on</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 监听chartSunburst的highlight事件，在回调函数中拿到params组成一个dom片段插入</span></span></span><br><span class="line"><span class="actionscript">      chartSunburst.on(<span class="string">'highlight'</span>, params =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(</span></span><br><span class="line"><span class="actionscript">          <span class="string">'#detail-container'</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        ).innerHTML = `<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"kind"</span>&gt;</span>$&#123;params.level1&#125; &gt; $&#123;params.level2&#125; &gt; $&#123;params.level3&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>$&#123;params.level4&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`;</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 设置一个定时器，每2秒派发一个highlight事件，name是level4，再把整个dataArrSorted[i]对象解构进去发送</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// https://www.echartsjs.com/zh/api.html#action.highlight</span></span></span><br><span class="line">      i = 0;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> key = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">        if (i &lt; dataArrSorted.length) &#123;</span><br><span class="line">          chartSunburst.dispatchAction(&#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">'highlight'</span>,</span></span><br><span class="line">            name: dataArrSorted[i].level4,</span><br><span class="line">            ...dataArrSorted[i]</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 当循环完成，清除定时器</span></span></span><br><span class="line">          clearInterval(key);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;, 2000);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> ECharts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 前端 </tag>
            
            <tag> ECharts </tag>
            
            <tag> 旭日图 </tag>
            
            <tag> sunburst </tag>
            
            <tag> 轮播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Image Filters（滤镜效果）</title>
      <link href="/posts/8bd9ee4.html"/>
      <url>/posts/8bd9ee4.html</url>
      
        <content type="html"><![CDATA[<p>分析 Image Filters（滤镜效果） 这个 demo，官网介绍是：</p><blockquote><p>Layer rendering can be manipulated in <code>prerender</code> and <code>postrender</code> event listeners. These listeners get an event with a reference to the Canvas rendering context. In this example, the postrender listener applies a <code>filter</code> to the image data.<br><code>prerender</code>和<code>postrender</code>可以控制图层渲染。这两个监听器能够获得带有<code>Canvas上下文引用</code>的事件。在这个例子中，posetrender 事件监听器对图像数据应用了一个<code>卷积核（滤波器）</code>。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/image-filter.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Image Filters</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：12 渲染器机制的使用 &gt; 实例 81.图像滤镜效果</p><a id="more"></a></li></ul><p><img src="/posts/8bd9ee4/%E6%BB%A4%E9%95%9C.gif" alt="滤镜效果"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>先展示地图基本结构，这里的地图使用的是<a href="https://www.maptiler.com/" target="_blank" rel="external nofollow noopener noreferrer">maptiler</a>的服务，注册一个开发者账号获得 <code>key</code>。地图源 <code>source</code> 使用的是<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_XYZ-XYZ.html" target="_blank" rel="external nofollow noopener noreferrer">ol.source.XYZ</a>，通过拼接字符串访问地图服务，可参考以前的文章<a href="https://linjingyi.cn/posts/9190e623.html">OpenLayers6 瓦片地图加载</a>。</p><p>在 html 部分，还添加了 <code>id</code> 为 <code>kernel</code> 的 <code>select</code> 标签，用于选择不同的滤镜效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image Filters(滤镜效果)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"kernel"</span> <span class="attr">name</span>=<span class="string">"kernel"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"none"</span>&gt;</span>无<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sharpen"</span> <span class="attr">selected</span>&gt;</span>锐化<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sharpenless"</span>&gt;</span>锐化（轻）<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"blur"</span>&gt;</span>模糊<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shadow"</span>&gt;</span>阴影<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"emboss"</span>&gt;</span>浮雕<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"edge"</span>&gt;</span>边界识别<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 需要在https://www.maptiler.com/cloud/上注册个账号拿到key</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> key = <span class="string">"Get your own API key at https://www.maptiler.com/cloud/"</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 所有权</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> attributions =</span></span><br><span class="line"><span class="handlebars"><span class="xml">        '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.maptiler.com/copyright/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="symbol">&amp;copy;</span> MapTiler<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ' +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.openstreetmap.org/copyright"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="symbol">&amp;copy;</span> OpenStreetMap contributors<span class="tag">&lt;/<span class="name">a</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 地图底图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> imagery = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用ol.source.XYZ拼凑一个地图字符串</span></span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">          attributions: attributions,</span><br><span class="line">          url:</span><br><span class="line"><span class="actionscript">            <span class="string">"https://api.maptiler.com/tiles/satellite/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.jpg?key="</span> +</span></span><br><span class="line">            key,</span><br><span class="line">          maxZoom: 20,</span><br><span class="line"><span class="actionscript">          crossOrigin: <span class="string">""</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 构建一个地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [imagery],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: ol.proj.fromLonLat([-120, 50]),</span><br><span class="line">          zoom: 6</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="不同滤镜效果的卷积核"><a href="#不同滤镜效果的卷积核" class="headerlink" title="不同滤镜效果的卷积核"></a>不同滤镜效果的卷积核</h2><p>关于图像处理中的<code>卷积核</code>可以参考上篇文章<a href="https://linjingyi.cn/posts/9f68952.html">图像处理中的卷积核 kernel</a>。</p><p>在本文的示例卷积核中就是 <code>kernels</code> 数组中这些 <code>3×3</code> 的 <code>3 阶矩阵</code>，利用这个卷积核和图像像素之间进行<code>卷积运算</code>，就能做出模糊、锐化、凹凸、边缘检测等效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图像处理的卷积核</span></span><br><span class="line"><span class="keyword">let</span> kernels = &#123;</span><br><span class="line">  none: [</span><br><span class="line">              <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">              <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line">              <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">              ],</span><br><span class="line">        sharpen: [</span><br><span class="line">                  <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>,</span><br><span class="line">                  <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, </span><br><span class="line">                  <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span></span><br><span class="line">                  ],</span><br><span class="line">        sharpenless: [</span><br><span class="line">                      <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>,</span><br><span class="line">                      <span class="number">-1</span>, <span class="number">10</span>, <span class="number">-1</span>,</span><br><span class="line">                      <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span></span><br><span class="line">                      ],</span><br><span class="line">        blur: [</span><br><span class="line">              <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">              <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">              <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">              ],</span><br><span class="line">        shadow: [</span><br><span class="line">                <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>,</span><br><span class="line">                <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span></span><br><span class="line">                ],</span><br><span class="line">        emboss: [</span><br><span class="line">                <span class="number">-2</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">                ],</span><br><span class="line">        edge: [</span><br><span class="line">              <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">              <span class="number">1</span>, <span class="number">-4</span>, <span class="number">1</span>,</span><br><span class="line">              <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">              ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 矩阵标准化处理，让所有的元素加起来为1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>:返回标准化后的矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> normalize = <span class="function"><span class="params">kernel</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = kernel.length;</span><br><span class="line">  <span class="keyword">let</span> normal = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">  <span class="keyword">let</span> i,</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    sum += kernel[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (sum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 矩阵各位置相加小于等于零时，设定sum=1，normalized=false</span></span><br><span class="line">    normal.normalized = <span class="literal">false</span>;</span><br><span class="line">    sum = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    normal.normalized = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="comment">// 每一位除以sum来标准化</span></span><br><span class="line">    normal[i] = kernel[i] / sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> normal;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 一开始就从select标签中拿到kernel并标准化</span></span><br><span class="line"><span class="keyword">let</span> select = <span class="built_in">document</span>.getElementById(<span class="string">"kernel"</span>);</span><br><span class="line"><span class="keyword">let</span> selectedKernel = normalize(kernels[select.value]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// select标签值改变后重新标准化kernel并渲染地图</span></span><br><span class="line">select.onchange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  selectedKernel = normalize(kernels[select.value]);</span><br><span class="line">  map.render();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>给 <code>select 标签</code>添加一个 <code>onchange</code> 事件，当<code>改变选项</code>时就把对应的卷积核<code>标准化</code>后赋给 <code>selectedKernel</code>，然后对地图进行<code>redner</code>渲染，目的是为了去触发 <code>postrender</code> 事件。</p><h2 id="滤镜效果执行"><a href="#滤镜效果执行" class="headerlink" title="滤镜效果执行"></a>滤镜效果执行</h2><h3 id="imageData"><a href="#imageData" class="headerlink" title="imageData"></a>imageData</h3><p>经过 mentor 点醒，又查阅了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData" target="_blank" rel="external nofollow noopener noreferrer">MDN</a>上的相关资料，才真正理解了 Canvas 中的<code>imageData</code>。</p><p><code>imageData</code>其实是一个 Canvas 中一个隐含像素数据的区域，有三个属性<code>data</code>（数据）、<code>weight</code>（宽度）、<code>height</code>（高度），用到了三个相关方法<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData" target="_blank" rel="external nofollow noopener noreferrer">getImageData</a>（获取）、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createImageData" target="_blank" rel="external nofollow noopener noreferrer">createImageData</a>（创建）、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/putImageData" target="_blank" rel="external nofollow noopener noreferrer">putImageData</a>（写入）。</p><p>需要理解的最关键的地方就是<code>data</code>这个属性，它是一个 JavaScript 的很不常用的内置类型<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray" target="_blank" rel="external nofollow noopener noreferrer">Uint8ClampedArray</a>（<code>8位无符号整型固定数组</code>），这个数组中每一项的处理规则为：</p><ul><li>把内容转化为<code>Number</code>类型</li><li>如果是<code>NaN</code>，返回<code>+0</code></li><li>如果是<code>负数</code>，返回<code>+0</code></li><li>如果大于等于<code>255</code>，返回<code>255</code></li><li>如果是<code>小数</code>，就执行<a href="https://baike.baidu.com/item/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5" target="_blank" rel="external nofollow noopener noreferrer">银行家舍入</a></li></ul><p>简单说，就是如果你指定一个在 <code>[0,255]</code> 区间外的值，它将被替换为<code>0或255</code>；如果你指定一个<code>非整数</code>，那么它将被设置为<code>最接近它的整数</code>。<code>Uint8ClampedArray</code>类型其余的属性和方法都和普通的<code>Array</code>类型一致，所以非常适用于存放 8 位二进制的颜色数据。</p><h3 id="四层循环"><a href="#四层循环" class="headerlink" title="四层循环"></a>四层循环</h3><p>给 <code>imagery</code>图层添加 <code>postrender</code> 事件，当改变滤镜选择的 <code>select 标签</code>导致地图渲染后，就会获得 Canvas 上下文并执行 <code>convolve</code> 函数。</p><p><code>convolve</code> 函数接收两个参数，第一个参数 <code>context</code> 是 Canvas 上下文环境，第二个参数 <code>kernel</code> 是需要执行的卷积核。先拿到 Canvas 的宽度和高度，再使用 <code>getImageData</code> 方法获取像素数据 <code>inputData</code>，并用 <code>createImageData</code> 方法新建一个 <code>outputData</code>。</p><p>循环像素数据 <code>inputData</code> 中的每一个像素，就是 Canvas 中的 <code>imageData</code> 像素数据就是上述<code>width×height×4</code> 的<code>Uint8ClampedArray</code>类型的数组，每四位代表一个像素的 <code>r（red）</code>、<code>g（green）</code>、<code>b（blue）</code>、<code>a（alpha 透明度）</code>四个通道，所以在计算<code>加权结果</code>时 <code>index</code> 用的是<code>(neighborY × width + neighborX) × 4</code>。</p><p>在每个卷积核的循环中，将带有<code>权重</code>的 <code>r</code>、<code>g</code>、<code>b</code>、<code>a</code> 分别累加，就计算出了该像素的<code>加权后的结果</code>，赋予给新建的 <code>outputData</code> 相同位置处。最后使用 <code>putImageData</code> 方法将 <code>outputData</code> 覆盖给 Canvas 上下文环境 <code>context</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图层渲染完成后就触发滤镜函数</span></span><br><span class="line">imagery.on(<span class="string">"postrender"</span>, event =&gt; &#123;</span><br><span class="line">  convolve(event.context, selectedKernel);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 给canvas应用一个卷积核，任意大小的卷积核都能运行，但是如果大小超过了3 x 3后性能会下降</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;CanvasRenderingContext2D&#125;</span>  </span>context canvas2d上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&lt;number&gt;&#125;</span>  </span>kernel 卷积内核</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> convolve = <span class="function">(<span class="params">context, kernel</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 拿到canvas上下文环境和宽高</span></span><br><span class="line">  <span class="keyword">let</span> canvas = context.canvas;</span><br><span class="line">  <span class="keyword">let</span> width = canvas.width;</span><br><span class="line">  <span class="keyword">let</span> height = canvas.height;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 核矩阵的宽度</span></span><br><span class="line">  <span class="keyword">let</span> size = <span class="built_in">Math</span>.sqrt(kernel.length);</span><br><span class="line">  <span class="keyword">let</span> half = <span class="built_in">Math</span>.floor(size / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 拿到canvas全部范围imageData中的像素数据</span></span><br><span class="line">  <span class="keyword">let</span> inputData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height).data;</span><br><span class="line">  <span class="comment">// 新建一个imageData</span></span><br><span class="line">  <span class="keyword">let</span> output = context.createImageData(width, height);</span><br><span class="line">  <span class="keyword">let</span> outputData = output.data;</span><br><span class="line">  <span class="comment">// 循环列</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> pixelY = <span class="number">0</span>; pixelY &lt; height; ++pixelY) &#123;</span><br><span class="line">    <span class="comment">// pixelsAbove是已经运行了整行像素的像素数目</span></span><br><span class="line">    <span class="keyword">let</span> pixelsAbove = pixelY * width;</span><br><span class="line">    <span class="comment">// 循环行;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> pixelX = <span class="number">0</span>; pixelX &lt; width; ++pixelX) &#123;</span><br><span class="line">      <span class="comment">// rgba是red、green、blue、alpha</span></span><br><span class="line">      <span class="keyword">let</span> r = <span class="number">0</span>,</span><br><span class="line">        g = <span class="number">0</span>,</span><br><span class="line">        b = <span class="number">0</span>,</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 对于每一个像素位置上，再进行卷积核矩阵循环</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> kernelY = <span class="number">0</span>; kernelY &lt; size; ++kernelY) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> kernelX = <span class="number">0</span>; kernelX &lt; size; ++kernelX) &#123;</span><br><span class="line">          <span class="comment">// 由于js没有原生二维矩阵，所以用下面的转换来代替，</span></span><br><span class="line">          <span class="comment">// weight是核矩阵该位置的权重</span></span><br><span class="line">          <span class="keyword">let</span> weight = kernel[kernelY * size + kernelX];</span><br><span class="line">          <span class="comment">// 求出该像素位置的相邻位置（与卷积核矩阵对应，并防止越界）</span></span><br><span class="line">          <span class="keyword">let</span> neighborY = <span class="built_in">Math</span>.min(</span><br><span class="line">            height - <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">Math</span>.max(<span class="number">0</span>, pixelY + kernelY - half)</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">let</span> neighborX = <span class="built_in">Math</span>.min(</span><br><span class="line">            width - <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">Math</span>.max(<span class="number">0</span>, pixelX + kernelX - half)</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">// 经mentor点醒，才看懂在imagedata中，数据是一个数组排列</span></span><br><span class="line">          <span class="comment">// 每四个位置rgba分别代表一个像素</span></span><br><span class="line">          <span class="keyword">let</span> inputIndex = (neighborY * width + neighborX) * <span class="number">4</span>;</span><br><span class="line">          <span class="comment">// 该neighbor位置像素的rgba每一个都要乘该neightbor位置的weight</span></span><br><span class="line">          <span class="comment">// 在size*size中的每一个相邻像素[neighborX,neighborY],rgba都乘该位置的权重weight</span></span><br><span class="line">          <span class="comment">// 进行了size*size次迭代，累加起来，求出了该像素位置[pixelX,pixelY]最终的rgba</span></span><br><span class="line">          r += inputData[inputIndex] * weight;</span><br><span class="line">          g += inputData[inputIndex + <span class="number">1</span>] * weight;</span><br><span class="line">          b += inputData[inputIndex + <span class="number">2</span>] * weight;</span><br><span class="line">          a += inputData[inputIndex + <span class="number">3</span>] * weight;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 把该像素的位置的累加后的rgba赋值给新建的output这个imageData的对应像素位置</span></span><br><span class="line">      <span class="keyword">let</span> outputIndex = (pixelsAbove + pixelX) * <span class="number">4</span>;</span><br><span class="line">      outputData[outputIndex] = r;</span><br><span class="line">      outputData[outputIndex + <span class="number">1</span>] = g;</span><br><span class="line">      outputData[outputIndex + <span class="number">2</span>] = b;</span><br><span class="line">      <span class="comment">// 如果矩阵未标准化，就把a设置为255</span></span><br><span class="line">      outputData[outputIndex + <span class="number">3</span>] = kernel.normalized ? a : <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后把output写进上下文环境，完成替换</span></span><br><span class="line">  context.putImageData(output, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image Filters(滤镜效果)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"kernel"</span> <span class="attr">name</span>=<span class="string">"kernel"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"none"</span>&gt;</span>无<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sharpen"</span> <span class="attr">selected</span>&gt;</span>锐化<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sharpenless"</span>&gt;</span>锐化（轻）<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"blur"</span>&gt;</span>模糊<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shadow"</span>&gt;</span>阴影<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"emboss"</span>&gt;</span>浮雕<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"edge"</span>&gt;</span>边界识别<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 需要在https://www.maptiler.com/cloud/上注册个账号拿到key</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> key = <span class="string">"Get your own API key at https://www.maptiler.com/cloud/"</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 所有权</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> attributions =</span></span><br><span class="line"><span class="handlebars"><span class="xml">        '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.maptiler.com/copyright/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="symbol">&amp;copy;</span> MapTiler<span class="tag">&lt;/<span class="name">a</span>&gt;</span> ' +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.openstreetmap.org/copyright"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="symbol">&amp;copy;</span> OpenStreetMap contributors<span class="tag">&lt;/<span class="name">a</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 地图底图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> imagery = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用ol.source.XYZ拼凑一个地图字符串</span></span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">          attributions: attributions,</span><br><span class="line">          url:</span><br><span class="line"><span class="actionscript">            <span class="string">"https://api.maptiler.com/tiles/satellite/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.jpg?key="</span> +</span></span><br><span class="line">            key,</span><br><span class="line">          maxZoom: 20,</span><br><span class="line"><span class="actionscript">          crossOrigin: <span class="string">""</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 构建一个地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [imagery],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: ol.proj.fromLonLat([-120, 50]),</span><br><span class="line">          zoom: 6</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 图像处理的卷积核</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> kernels = &#123;</span></span><br><span class="line">        none: [</span><br><span class="line">              0, 0, 0,</span><br><span class="line">              0, 1, 0, </span><br><span class="line">              0, 0, 0</span><br><span class="line">              ],</span><br><span class="line">        sharpen: [</span><br><span class="line">                  0, -1, 0,</span><br><span class="line">                  -1, 5, -1, </span><br><span class="line">                  0, -1, 0</span><br><span class="line">                  ],</span><br><span class="line">        sharpenless: [</span><br><span class="line">                      0, -1, 0,</span><br><span class="line">                      -1, 10, -1,</span><br><span class="line">                      0, -1, 0</span><br><span class="line">                      ],</span><br><span class="line">        blur: [</span><br><span class="line">              1, 1, 1,</span><br><span class="line">              1, 1, 1,</span><br><span class="line">              1, 1, 1</span><br><span class="line">              ],</span><br><span class="line">        shadow: [</span><br><span class="line">                1, 2, 1,</span><br><span class="line">                0, 1, 0,</span><br><span class="line">                -1, -2, -1</span><br><span class="line">                ],</span><br><span class="line">        emboss: [</span><br><span class="line">                -2, 1, 0,</span><br><span class="line">                -1, 1, 1,</span><br><span class="line">                0, 1, 2</span><br><span class="line">                ],</span><br><span class="line">        edge: [</span><br><span class="line">              0, 1, 0,</span><br><span class="line">              1, -4, 1,</span><br><span class="line">              0, 1, 0</span><br><span class="line">              ]</span><br><span class="line">      &#125;;</span><br><span class="line">      /**</span><br><span class="line">       * @description: 卷积矩阵标准化处理</span><br><span class="line">       * @param &#123;type&#125;</span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>:</span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> normalize = <span class="function"><span class="params">kernel</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> len = kernel.length;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> normal = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> i,</span></span><br><span class="line">          sum = 0;</span><br><span class="line">        for (i = 0; i &lt; len; ++i) &#123;</span><br><span class="line">          sum += kernel[i];</span><br><span class="line">        &#125;</span><br><span class="line">        if (sum &lt;= 0) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 矩阵各位置相加小于等于零时，设定sum=1，normalized=false</span></span></span><br><span class="line"><span class="actionscript">          normal.normalized = <span class="literal">false</span>;</span></span><br><span class="line">          sum = 1;</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          normal.normalized = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        for (i = 0; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 每一位除以sum来标准化</span></span></span><br><span class="line">          normal[i] = kernel[i] / sum;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(normal);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> normal;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 一开始就从select标签中拿到kernel并标准化</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> select = <span class="built_in">document</span>.getElementById(<span class="string">"kernel"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> selectedKernel = normalize(kernels[select.value]);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// select标签值改变后重新标准化kernel并渲染地图</span></span></span><br><span class="line"><span class="javascript">      select.onchange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">        selectedKernel = normalize(kernels[select.value]);</span><br><span class="line">        map.render();</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 图层渲染完成后就触发滤镜函数</span></span></span><br><span class="line"><span class="actionscript">      imagery.on(<span class="string">"postrender"</span>, event =&gt; &#123;</span></span><br><span class="line">        convolve(event.context, selectedKernel);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * @description: 给canvas应用一个卷积核，任意大小的卷积核都能运行，但是如果大小超过了3 x 3后性能会下降</span><br><span class="line">       * @param &#123;CanvasRenderingContext2D&#125;  context canvas2d上下文</span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Array</span>&lt;number&gt;&#125;  kernel 卷积内核</span></span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>:</span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> convolve = <span class="function">(<span class="params">context, kernel</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拿到canvas上下文环境和宽高</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> canvas = context.canvas;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> width = canvas.width;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> height = canvas.height;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 核矩阵的宽度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> size = <span class="built_in">Math</span>.sqrt(kernel.length);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> half = <span class="built_in">Math</span>.floor(size / <span class="number">2</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拿到canvas全部范围imageData中的像素数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> inputData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height).data;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 新建一个imageData</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> output = context.createImageData(width, height);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> outputData = output.data;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 循环列</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> pixelY = <span class="number">0</span>; pixelY &lt; height; ++pixelY) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// pixelsAbove是已经运行了整行像素的像素数目</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> pixelsAbove = pixelY * width;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 循环行;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> pixelX = <span class="number">0</span>; pixelX &lt; width; ++pixelX) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// rgba是red、green、blue、alpha</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> r = <span class="number">0</span>,</span></span><br><span class="line">              g = 0,</span><br><span class="line">              b = 0,</span><br><span class="line">              a = 0;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 对于每一个像素位置上，再进行卷积核矩阵循环</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> kernelY = <span class="number">0</span>; kernelY &lt; size; ++kernelY) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">for</span> (<span class="keyword">let</span> kernelX = <span class="number">0</span>; kernelX &lt; size; ++kernelX) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 由于js没有原生二维矩阵，所以用下面的转换来代替，</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// weight是核矩阵该位置的权重</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> weight = kernel[kernelY * size + kernelX];</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 求出该像素位置的相邻位置（与核矩阵对应，并防止越界）</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> neighborY = <span class="built_in">Math</span>.min(</span></span><br><span class="line">                  height - 1,</span><br><span class="line"><span class="javascript">                  <span class="built_in">Math</span>.max(<span class="number">0</span>, pixelY + kernelY - half)</span></span><br><span class="line">                );</span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> neighborX = <span class="built_in">Math</span>.min(</span></span><br><span class="line">                  width - 1,</span><br><span class="line"><span class="javascript">                  <span class="built_in">Math</span>.max(<span class="number">0</span>, pixelX + kernelX - half)</span></span><br><span class="line">                );</span><br><span class="line"><span class="actionscript">                <span class="comment">// 经mentor点醒，才看懂在imagedata中，数据是一个数组排列</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 每四个位置rgba分别代表一个像素</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> inputIndex = (neighborY * width + neighborX) * <span class="number">4</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 该neighbor位置像素的rgba每一个都要乘该neightbor位置的weight</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 在size*size中的每一个相邻像素[neighborX,neighborY],rgba都乘该位置的权重weight</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 进行了size*size次迭代，累加起来，求出了该像素位置[pixelX,pixelY]最终的rgba</span></span></span><br><span class="line">                r += inputData[inputIndex] * weight;</span><br><span class="line">                g += inputData[inputIndex + 1] * weight;</span><br><span class="line">                b += inputData[inputIndex + 2] * weight;</span><br><span class="line">                a += inputData[inputIndex + 3] * weight;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 把该像素的位置的累加后的rgba赋值给新建的output这个imageData的对应像素位置</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> outputIndex = (pixelsAbove + pixelX) * <span class="number">4</span>;</span></span><br><span class="line">            outputData[outputIndex] = r;</span><br><span class="line">            outputData[outputIndex + 1] = g;</span><br><span class="line">            outputData[outputIndex + 2] = b;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 如果矩阵未标准化，就把a设置为255</span></span></span><br><span class="line">            outputData[outputIndex + 3] = kernel.normalized ? a : 255;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 最后把output写进上下文环境，完成替换</span></span></span><br><span class="line">        context.putImageData(output, 0, 0);</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像处理中的卷积核kernel</title>
      <link href="/posts/9f68952.html"/>
      <url>/posts/9f68952.html</url>
      
        <content type="html"><![CDATA[<p>最近稍微研究了下 canvas 滤镜在 OpenLayers 中的应用，发现自己照猫画虎可以做出滤镜效果，但是最关键的 <code>kernel</code> 这个<code>卷积核</code>却一点都不了解，参考<a href="https://en.wikipedia.org/wiki/Kernel_(image_processing)#Convolution" target="_blank" rel="external nofollow noopener noreferrer">wiki</a>深入学习一下写一篇笔记。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>卷积核</code>（<code>kernel</code>），也叫<code>卷积矩阵</code>（<code>convolution matrix</code>）或者<code>掩膜</code>（<code>mask</code>），本质上是一个非常小的矩阵，最常用的是 <code>3×3</code> 矩阵。主要是利用核与图像之间进行卷积运算来实现图像处理，能做出模糊、锐化、凹凸、边缘检测等效果。</p><a id="more"></a><h2 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h2><p><code>卷积</code>在通俗上理解是把原始矩阵中的每一个元素，都与其相邻的元素根据<code>卷积核</code>的<code>权重分布</code>做<code>加权平均</code>，卷积运算的公式如下：<br><img src="/posts/9f68952/convolution.svg" alt="convolution"></p><p>其中，<code>g(x,y)</code>是被处理后的矩阵，<code>w</code> 是卷积核，<code>f(x,y)</code>是原始矩阵，<code>-a≤s≤a</code> 并且 <code>-b≤t≤b</code>。<br>以下示例就是卷积的通俗理解，第一个矩阵是<code>卷积核</code>（其中的每个元素都是<code>权重</code>），第二个矩阵是<code>被处理的矩阵</code>，这里的*并不是真正矩阵运算中的*，而是将卷积核中的<code>行和列都反转</code>再*，将计算得到的加权结果赋值给<code>[2, 2]</code>位置处，一次运算就完成了。<br><img src="/posts/9f68952/conexample.svg" alt="convolution example"><br>用一张图片更容易说明这个过程：<br><img src="/posts/9f68952/%E5%8D%B7%E7%A7%AF.png" alt><br>将一个比较大的原始矩阵的<code>每一个位置处</code>都根据核进行上述的运算，就得到整个原始矩阵的加权平均结果，也就是原始矩阵卷积运算后的结果。</p><h2 id="将卷积运算应用到图像矩阵"><a href="#将卷积运算应用到图像矩阵" class="headerlink" title="将卷积运算应用到图像矩阵"></a>将卷积运算应用到图像矩阵</h2><p>对于一个普通的 <code>8 位 RGB 位图</code>来举例，是由<code>像素点矩阵</code>组成的，每个像素点都有 <code>r（red）、g（green）、b（blue）</code>三个属性，每个属性的区间为<code>[0, 2^8-1]</code>也就是<code>[0, 255]</code>。</p><p>所以对于 <code>r、g、b</code> 任何一个通道来说，都是一个单纯的 <code>xSize × ySize</code> 的矩阵（<code>xSize</code>、<code>ySize</code> 是图片的横向和纵向的<code>像素点数</code>），就可以使用 <code>kernel 卷积核</code>对其进行<code>全图卷积运算</code>，实现图像的滤镜处理效果，如下所示：</p><p><img src="/posts/9f68952/%E5%85%A8%E5%9B%BE%E5%8D%B7%E7%A7%AF.png" alt></p><p>以下示例中图片来自维基百科<a href="https://en.wikipedia.org/wiki/Kernel_(image_processing)#Convolution" target="_blank" rel="external nofollow noopener noreferrer">wiki</a>，原图如下所示：<br><img src="/posts/9f68952/Vd-Orig.png" alt></p><h3 id="恒等（Identity）"><a href="#恒等（Identity）" class="headerlink" title="恒等（Identity）"></a>恒等（Identity）</h3><p><code>identity 恒等卷积核</code>如下所示，</p><p>$$<br>\left[<br>  \begin{matrix}<br>  0 &amp; 0 &amp; 0 \\<br>  0 &amp; 1 &amp; 0 \\<br>  0 &amp; 0 &amp; 0 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Orig.png" alt></p><p>在 <code>identity 卷积核</code>中，只有<code>中心位置[2, 2]</code>位置处的权重为 <code>1</code>，其余均为 <code>0</code>，所以在进行卷积运算加权后时，像素只与自己本身位置进行了运算，最后返回的还是原像素的值，所以图像处理后是<code>不变</code>的。</p><h3 id="边缘检测（Edge-detection）"><a href="#边缘检测（Edge-detection）" class="headerlink" title="边缘检测（Edge detection）"></a>边缘检测（Edge detection）</h3><p><code>edge detction（边缘检测）</code>对图像识别中的特征提取是非常有作用的，边缘检测卷积核都有一个共同点，就是能够突出图片矩阵中<code>变化剧烈</code>的位置。矩阵如下所示，三种边缘检测核的效果是越来越明显，主要原因就是<code>加强</code>了卷积核中<code>[2, 2]</code>位置处与周围元素的<code>区别</code>，图片中变化剧烈位置的在加权后，数值大的更大，数值小的更小，形成了边缘检测效果。</p><p>$$<br>\left[<br>  \begin{matrix}<br>  1 &amp; 0 &amp; -1 \\<br>  0 &amp; 0 &amp; 0 \\<br>  -1 &amp; 0 &amp; 1 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Edge1.png" alt></p><p>$$<br>\left[<br>  \begin{matrix}<br>  0 &amp; 1 &amp; 0 \\<br>  1 &amp; -4 &amp; 1 \\<br>  0 &amp; 1 &amp; 0 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Edge2.png" alt></p><p>$$<br>\left[<br>  \begin{matrix}<br>  -1 &amp; -1 &amp; -1 \\<br>  -1 &amp; 8 &amp; -1 \\<br>  -1 &amp; -1 &amp; -1 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Edge3.png" alt></p><p>比对三个核，第一个核中的权重<code>左上往右下</code>都是 <code>1、0、1</code>，而<code>右上往左下</code>是<code>-1、0、-1</code>，在进行卷积运算时，<code>对角方向</code>的边缘更容易识别出来；第二个核中，权重<code>从左往右</code>是 <code>1、-4、1</code>,从<code>上往下</code>也是 <code>1、-4、1</code>，所以<code>水平和垂直</code>方向的边缘更容易识别出来；第三个核中权重<code>水平垂直和对角</code>都是<code>-1、8、-1</code>，所以<code>水平和倾斜</code>的边缘都容易识别。</p><h3 id="锐化-Sharpen"><a href="#锐化-Sharpen" class="headerlink" title="锐化(Sharpen)"></a>锐化(Sharpen)</h3><p>锐化的本质还是利用的边缘检测的原理，放大<code>[2, 2]位置</code>与周围元素的权重的区别。与边缘检测权重和为 <code>0</code> 相比，锐化卷积核中所有权重加起来后的值为 <code>1</code>。当权重和大于 <code>1</code> 时，会整体使图片<code>变亮</code>，小于 <code>1</code> 会<code>变暗</code>，等于 <code>1</code> 就会保留<code>原始亮度</code>，所以锐化卷积核保留了原始图形的亮度，而上述的三个边缘检测核使图像变暗。</p><p>$$<br>\left[<br>  \begin{matrix}<br>  0 &amp; -1 &amp; 0 \\<br>  -1 &amp; 5 &amp; -1 \\<br>  0 &amp; -1 &amp; 0 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Sharp.png" alt></p><h3 id="盒模糊（Box-blur）"><a href="#盒模糊（Box-blur）" class="headerlink" title="盒模糊（Box blur）"></a>盒模糊（Box blur）</h3><p>在盒模糊卷积核中，所有位置的权重均为 <code>1/9</code>，所以<code>[2, 2]位置处</code>的元素值会以一个<code>相同权重</code>与周围变得更<code>相似</code>，达到<code>均匀模糊</code>的效果</p><p>$$<br>\frac{1}{9}<br>\left[<br>  \begin{matrix}<br>  1 &amp; 1 &amp; 1 \\<br>  1 &amp; 1 &amp; 1 \\<br>  1 &amp; 1 &amp; 1 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Blur2.png" alt></p><h3 id="高斯模糊（Gaussian-blur）"><a href="#高斯模糊（Gaussian-blur）" class="headerlink" title="高斯模糊（Gaussian blur）"></a>高斯模糊（Gaussian blur）</h3><p><code>高斯模糊卷积核</code>依赖的是<code>高斯函数</code>，所以卷积核的值是围绕着<code>中心点</code>分布的，离中心点越近，贡献也就越大，所以权重值就越高，<code>二维区域高斯曲线图</code>如下：</p><p><img src="/posts/9f68952/Gaussian_2d.png" alt></p><h4 id="3×3"><a href="#3×3" class="headerlink" title="3×3"></a>3×3</h4><p>首先列出一个 <code>3×3</code> 的高斯模糊卷积核，<code>中心点</code>权重为 <code>4</code>，离得最近的<code>上下左右</code>权重都是 <code>2</code>，稍远一点的<code>对角位置</code>贡献的权重都是 <code>1</code>，最后除以<code>权重和 16</code>，矩阵和效果如下所示：</p><p>$$<br>\frac{1}{16}<br>\left[<br>  \begin{matrix}<br>  1 &amp; 2 &amp; 1 \\<br>  2 &amp; 4 &amp; 2 \\<br>  1 &amp; 2 &amp; 1 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Blur1.png" alt></p><p>可以发现，因为权重更加<code>聚焦</code>到<code>中心点</code>位置，高斯模糊的效果相比盒模糊要更清晰一些。</p><h4 id="5×5"><a href="#5×5" class="headerlink" title="5×5"></a>5×5</h4><p>再列出 <code>5×5</code> 的高斯模糊卷积核，和 <code>3×3</code> 类似，以<code>中心点画圆</code>，离圆心越<code>远</code>权重越<code>小</code>，最后除以<code>权重和 256</code>，矩阵和效果图如下：</p><p>$$<br>\frac{1}{256}<br>\left[<br>  \begin{matrix}<br>  1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\<br>  4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\<br>  6 &amp; 24 &amp; 36 &amp; 24 &amp; 6 \\<br>  4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\<br>  1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\<br>  \end{matrix}<br>\right]<br>$$</p><p><img src="/posts/9f68952/Vd-Blur_Gaussian_5x5.png" alt><br>与 <code>3×3</code> 的高斯模糊对比，由于距离中心点<code>更远</code>的位置也贡献了<code>权重</code>，所以 <code>5×5</code> 要更模糊一些。</p><h3 id="反锐化掩膜（Unsharp-masking）"><a href="#反锐化掩膜（Unsharp-masking）" class="headerlink" title="反锐化掩膜（Unsharp masking）"></a>反锐化掩膜（Unsharp masking）</h3><p><code>反锐化掩膜</code>与 <code>5 阶高斯模糊</code>的卷积核，所有位置都取<code>相反数</code>，中间位置取值 <code>476（-36+256+256）</code>，其实还是达到一种<code>锐化</code>的效果，卷积核如下所示：</p><p>$$<br>-\frac{1}{256}<br>\left[<br>  \begin{matrix}<br>  1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\<br>  4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\<br>  6 &amp; 24 &amp; -476 &amp; 24 &amp; 6 \\<br>  4 &amp; 16 &amp; 24 &amp; 16 &amp; 4 \\<br>  1 &amp; 4 &amp; 6 &amp; 4 &amp; 1 \\<br>  \end{matrix}<br>\right]<br>$$</p><p>实现原理如下图所示：<br><img src="/posts/9f68952/UnsharpMask.gif" alt></p><ul><li>第一步：正常的<code>原始信号</code>，在本文中也就是<code>原始图像矩阵</code>。</li><li>第二步：进行<code>模糊</code>处理，本文中进行 <code>5 阶高斯模糊</code>。</li><li>第三步：使用原始信号<code>减去</code>模糊后的信号，取得<code>差值</code>，本文中就是 <code>36</code>。</li><li>第四步：给原始信号<code>反向</code>加上<code>差值</code>，本文中就是<code>-36+256+256</code>，完成了对原始图像的<code>锐化</code>。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>无限感慨，对不起王老师，对不起曾老师！这就是本科不认真学<code>数字信号处理</code>、硕士一知半解的处理<code>物探数据</code>的下场。竟然等工作以后才明白，这里的卷积核不就是滤波器吗！研究前端竟然研究到地球物理头上去了 T.T！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 图像处理 </tag>
            
            <tag> 卷积核 </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：GeoJSON</title>
      <link href="/posts/a3cc2dcd.html"/>
      <url>/posts/a3cc2dcd.html</url>
      
        <content type="html"><![CDATA[<p>之前翻译了 GeoJSON 的规范全文——<a href="https://linjingyi.cn/posts/22f1fd78.html">《GeoJson 规范（RFC 7946）全文翻译》</a>，在本篇中应用 GeoJSON 的各个特征对象和几何对象到 OpenLayers 中，熟悉 GeoJSON 格式在 OpenLayers 中的应用，也能熟悉 OpenGIS 的各个术语在 OpenLayers 的映射。</p><ul><li><p><a href="https://openlayers.org/en/latest/examples/geojson.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：GeoJSON</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：07 要素 ol.feature 的使用（二） &gt; 实例 44.使用 geojson</p><a id="more"></a></li></ul><p><img src="/posts/a3cc2dcd/geojson.jpg" alt="geojson"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>先把地图基本结构展示出来，地图底图使用的是 OSM 地图，关键在于<code>vectorLayer</code>中的<code>source:vectorSource</code>源和<code>style:styleFunction</code>样式函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GeoJSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 定义一个矢量图层vectorLayer，源source为vectorSource，样式style为样式函数styleFunction</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">        source: vectorSource,</span><br><span class="line">        style: styleFunction</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 给地图加一个OSM底图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [</span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">            source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">          &#125;),</span><br><span class="line">          vectorLayer</span><br><span class="line">        ],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加-GeoJSON-对象"><a href="#添加-GeoJSON-对象" class="headerlink" title="添加 GeoJSON 对象"></a>添加 GeoJSON 对象</h2><p>正常情况应该使用 ajax 从后端读取 geojson 对象，为了便于观察和理解，将 geojson 直接定义成一个 <code>geojsonObject</code> 对象。</p><p>观察 <code>geojsonObject</code> 这个对象，可以发现比普通的 geojson 多了一个 <code>crs</code> 属性，这是一个GeoJson2008规范<a href="https://tools.ietf.org/html/rfc7946#ref-GJ2008" target="_blank" rel="external nofollow noopener noreferrer">GJ2008</a>中的成员，放置了投影方式，但是在最新的GeoJSON规范<a href="https://tools.ietf.org/html/rfc7946" target="_blank" rel="external nofollow noopener noreferrer">RFC 7946</a>已经被废弃。其次，拥有正常的 <code>FeatureCollection特征集合</code>，在 <code>features</code> 数组中的每一项都是一个 <code>Feature 特征</code>。</p><p>再观察每一个 <code>feature 特征对象</code>，其中的 <code>geometry 几何对象</code>中，类型分别是 <code>Point</code>、<code>LineString</code>、<code>Polygon</code>、<code>MultiLineString</code>、<code>MultiPolygon</code>，均为<a href="https://linjingyi.cn/posts/22f1fd78.html#%E5%AE%9A%E4%B9%89">GeoJSON 规范</a>中定义的七种几何类型之一。每一个类型都按照自己规定的格式存放 <code>coordinates</code> 位置坐标。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> geojsonObject = &#123;</span><br><span class="line">  <span class="comment">// FeatureCollection是规范中的九种GeoJSON类型之一</span></span><br><span class="line">  type: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="comment">// crs是规范中的自定义的外部成员</span></span><br><span class="line">  crs: &#123;</span><br><span class="line">    type: <span class="string">"name"</span>,</span><br><span class="line">    properties: &#123;</span><br><span class="line">      <span class="comment">// 投影方式为EPSG:3857</span></span><br><span class="line">      name: <span class="string">"EPSG:3857"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// features中存放特征对象</span></span><br><span class="line">  features: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Feature也是规范中的九种GeoJSON类型之一</span></span><br><span class="line">      type: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="comment">// geometry是几何对象</span></span><br><span class="line">      geometry: &#123;</span><br><span class="line">        <span class="comment">// Point是规范中的七种几何类型之一</span></span><br><span class="line">        type: <span class="string">"Point"</span>,</span><br><span class="line">        <span class="comment">// coordinates数组中存放位置，第一个是经度方向，第二个是纬度方向，如果有第三个则为高度方向</span></span><br><span class="line">        coordinates: [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"Feature"</span>,</span><br><span class="line">      geometry: &#123;</span><br><span class="line">        type: <span class="string">"LineString"</span>,</span><br><span class="line">        <span class="comment">// LineString中存放的是位置数组</span></span><br><span class="line">        coordinates: [</span><br><span class="line">          [<span class="number">4e6</span>, <span class="number">-2e6</span>],</span><br><span class="line">          [<span class="number">8e6</span>, <span class="number">2e6</span>]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"Feature"</span>,</span><br><span class="line">      geometry: &#123;</span><br><span class="line">        type: <span class="string">"LineString"</span>,</span><br><span class="line">        coordinates: [</span><br><span class="line">          [<span class="number">4e6</span>, <span class="number">2e6</span>],</span><br><span class="line">          [<span class="number">8e6</span>, <span class="number">-2e6</span>]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"Feature"</span>,</span><br><span class="line">      geometry: &#123;</span><br><span class="line">        type: <span class="string">"Polygon"</span>,</span><br><span class="line">        <span class="comment">// Polygon中存放的“linear ring数组”组成的数组，第一个数组是外环，如果有其他的则为内环</span></span><br><span class="line">        coordinates: [</span><br><span class="line">          [</span><br><span class="line">            [<span class="number">-5e6</span>, <span class="number">-1e6</span>],</span><br><span class="line">            [<span class="number">-4e6</span>, <span class="number">1e6</span>],</span><br><span class="line">            [<span class="number">-3e6</span>, <span class="number">-1e6</span>]</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"Feature"</span>,</span><br><span class="line">      geometry: &#123;</span><br><span class="line">        type: <span class="string">"MultiLineString"</span>,</span><br><span class="line">        <span class="comment">// MutiLineString中存放的是也是“linear ring数组”组成的数组，每个linear ring数组都是一条线</span></span><br><span class="line">        coordinates: [</span><br><span class="line">          [</span><br><span class="line">            [<span class="number">-1e6</span>, <span class="number">-7.5e5</span>],</span><br><span class="line">            [<span class="number">-1e6</span>, <span class="number">7.5e5</span>]</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            [<span class="number">1e6</span>, <span class="number">-7.5e5</span>],</span><br><span class="line">            [<span class="number">1e6</span>, <span class="number">7.5e5</span>]</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            [<span class="number">-7.5e5</span>, <span class="number">-1e6</span>],</span><br><span class="line">            [<span class="number">7.5e5</span>, <span class="number">-1e6</span>]</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            [<span class="number">-7.5e5</span>, <span class="number">1e6</span>],</span><br><span class="line">            [<span class="number">7.5e5</span>, <span class="number">1e6</span>]</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"Feature"</span>,</span><br><span class="line">      geometry: &#123;</span><br><span class="line">        type: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">        <span class="comment">// MultiPolygon中存放的是“Polygon坐标数组”组成的数组</span></span><br><span class="line">        coordinates: [</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              [<span class="number">-5e6</span>, <span class="number">6e6</span>],</span><br><span class="line">              [<span class="number">-5e6</span>, <span class="number">8e6</span>],</span><br><span class="line">              [<span class="number">-3e6</span>, <span class="number">8e6</span>],</span><br><span class="line">              [<span class="number">-3e6</span>, <span class="number">6e6</span>]</span><br><span class="line">            ]</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              [<span class="number">-2e6</span>, <span class="number">6e6</span>],</span><br><span class="line">              [<span class="number">-2e6</span>, <span class="number">8e6</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">8e6</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">6e6</span>]</span><br><span class="line">            ]</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              [<span class="number">1e6</span>, <span class="number">6e6</span>],</span><br><span class="line">              [<span class="number">1e6</span>, <span class="number">8e6</span>],</span><br><span class="line">              [<span class="number">3e6</span>, <span class="number">8e6</span>],</span><br><span class="line">              [<span class="number">3e6</span>, <span class="number">6e6</span>]</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"Feature"</span>,</span><br><span class="line">      geometry: &#123;</span><br><span class="line">        type: <span class="string">"GeometryCollection"</span>,</span><br><span class="line">        <span class="comment">// GeometryCollection中有geometries几何集合对象，里面每一项都是一个几何对象</span></span><br><span class="line">        geometries: [</span><br><span class="line">          &#123;</span><br><span class="line">            type: <span class="string">"LineString"</span>,</span><br><span class="line">            coordinates: [</span><br><span class="line">              [<span class="number">-5e6</span>, <span class="number">-5e6</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">-5e6</span>]</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            type: <span class="string">"Point"</span>,</span><br><span class="line">            coordinates: [<span class="number">4e6</span>, <span class="number">-5e6</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            type: <span class="string">"Polygon"</span>,</span><br><span class="line">            coordinates: [</span><br><span class="line">              [</span><br><span class="line">                [<span class="number">1e6</span>, <span class="number">-6e6</span>],</span><br><span class="line">                [<span class="number">2e6</span>, <span class="number">-4e6</span>],</span><br><span class="line">                [<span class="number">3e6</span>, <span class="number">-6e6</span>]</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个矢量源vectorSource，features读取自geojson对象</span></span><br><span class="line"><span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">  features: <span class="keyword">new</span> ol.format.GeoJSON().readFeatures(geojsonObject)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 给vectorSource添加圆这个特征对象</span></span><br><span class="line">vectorSource.addFeature(<span class="keyword">new</span> ol.Feature(<span class="keyword">new</span> ol.geom.Circle([<span class="number">5e6</span>, <span class="number">7e6</span>], <span class="number">1e6</span>)));</span><br></pre></td></tr></table></figure><p>定义完 geojson 对象后，使用<a href="https://openlayers.org/en/latest/apidoc/module-ol_format_GeoJSON-GeoJSON.html#readFeatures" target="_blank" rel="external nofollow noopener noreferrer">new ol.format.GeoJSON().readFeatures(geojsonObject)</a>方法返回一个<code>特征对象集合</code>，API 如下所示，作为 <code>vectorSource</code> 源中 <code>features</code> 的值。</p><p><img src="/posts/a3cc2dcd/readFeatures.jpg" alt="readFeatures"></p><p>OpenLayers 与 GeoJSON 格式规范不同的是，OpenLayers 可以绘制“圆”这种 <code>feature 特征对象</code>，如上述代码所示，使用<a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_Circle-Circle.html" target="_blank" rel="external nofollow noopener noreferrer">new ol.geom.Circle([5e6, 7e6], 1e6)</a>新建一个 <code>circle 几何对象</code>，再用<a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html" target="_blank" rel="external nofollow noopener noreferrer">new ol.Feature</a>将<code>几何对象</code>变为<code>特征对象</code>，再用<code>addFeature</code>将“圆”添加给 <code>vectorSource</code> 源。</p><h3 id="样式函数"><a href="#样式函数" class="headerlink" title="样式函数"></a>样式函数</h3><p>定义样式的时候，主要是遵循下面这个原则：</p><ul><li><code>LineString</code> 和 <code>MultiLineString</code> 这两种<code>一维线类型</code>，只能 <code>stroke</code> 画线；</li><li><code>Polygon</code> 和 <code>MultiPolygon</code> 这两种<code>二维多边形类型</code>，既可以 <code>stroke</code> 画线描边，也可以 <code>fill</code> 填充；</li><li><code>Point</code>、<code>MultiPoint</code> 这种<code>零维点类型</code>，既不能 <code>stroke</code> 画线，又不能 <code>fill</code> 填充，所以定义一个 <code>image</code>对象，专门给点类型画一个小圆点；</li><li><code>GeometryCollection</code> 属于<code>几何集合类型</code>，要把 <code>stroke</code> 画线、<code>fill</code> 填充和 <code>image</code> 小圆点都加上；</li><li><code>Circle</code> 这种 OpenLayers 自定义的<code>二维几何类型</code>，同样也是既可以 <code>stroke</code> 画线，又可以 <code>fill</code> 填充；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当type为Point和MultiPoint时既不能stroke也不能fill，所以创建一个小圆点</span></span><br><span class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">  radius: <span class="number">5</span>,</span><br><span class="line">  fill: <span class="literal">null</span>,</span><br><span class="line">  stroke: <span class="keyword">new</span> ol.style.Stroke(&#123; <span class="attr">color</span>: <span class="string">"red"</span>, <span class="attr">width</span>: <span class="number">1</span> &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> styles = &#123;</span><br><span class="line">  <span class="comment">// 当几何对象为Point时，使用image样式</span></span><br><span class="line">  Point: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: image</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 当几何对象为LineString时，使用stroke样式</span></span><br><span class="line">  LineString: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">      color: <span class="string">"green"</span>,</span><br><span class="line">      width: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 当几何对象为MultiLineString时，使用stroke样式</span></span><br><span class="line">  MultiLineString: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">      color: <span class="string">"green"</span>,</span><br><span class="line">      width: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 当几何对象为MultiPoint时，使用image样式</span></span><br><span class="line">  MultiPoint: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: image</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 当几何对象为MultiPolygon时，有stroke和fill样式</span></span><br><span class="line">  MultiPolygon: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">      color: <span class="string">"yellow"</span>,</span><br><span class="line">      width: <span class="number">1</span></span><br><span class="line">    &#125;),</span><br><span class="line">    fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">      color: <span class="string">"rgba(255, 255, 0, 0.1)"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 当几何对象为Polygon时，有stroke和fill样式</span></span><br><span class="line">  Polygon: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">      color: <span class="string">"blue"</span>,</span><br><span class="line">      lineDash: [<span class="number">4</span>],</span><br><span class="line">      width: <span class="number">3</span></span><br><span class="line">    &#125;),</span><br><span class="line">    fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">      color: <span class="string">"rgba(0, 0, 255, 0.1)"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 当几何对象为GeometryCollection，stroke、fill、image三个样式都加上</span></span><br><span class="line">  GeometryCollection: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">      color: <span class="string">"magenta"</span>,</span><br><span class="line">      width: <span class="number">2</span></span><br><span class="line">    &#125;),</span><br><span class="line">    fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">      color: <span class="string">"magenta"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">      radius: <span class="number">10</span>,</span><br><span class="line">      fill: <span class="literal">null</span>,</span><br><span class="line">      stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">        color: <span class="string">"magenta"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 当几何对象为Circle时，有stroke和fill样式</span></span><br><span class="line">  Circle: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">      color: <span class="string">"red"</span>,</span><br><span class="line">      width: <span class="number">2</span></span><br><span class="line">    &#125;),</span><br><span class="line">    fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">      color: <span class="string">"rgba(255,0,0,0.2)"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 样式函数styleFunction，根据特征对象中几何对象的type来返回样式</span></span><br><span class="line"><span class="keyword">const</span> styleFunction = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> styles[feature.getGeometry().getType()];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后定义一个 <code>styleFunction</code>样式返回函数，使用<code>feature.getGeometry().getType()</code>根据每一个<code>特征对象</code>中<code>几何对象</code>的<code>类型</code>来返回对应的样式。</p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.2.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GeoJSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 当type为Point和MultiPoint时既不能stroke也不能fill，所以创建一个小圆点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> image = <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line">        radius: 5,</span><br><span class="line"><span class="actionscript">        fill: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123; color: <span class="string">"red"</span>, width: <span class="number">1</span> &#125;)</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> styles = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为Point时，使用image样式</span></span></span><br><span class="line"><span class="actionscript">        Point: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line">          image: image</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为LineString时，使用stroke样式</span></span></span><br><span class="line"><span class="actionscript">        LineString: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"green"</span>,</span></span><br><span class="line">            width: 1</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为MultiLineString时，使用stroke样式</span></span></span><br><span class="line"><span class="actionscript">        MultiLineString: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"green"</span>,</span></span><br><span class="line">            width: 1</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为MultiPoint时，使用image样式</span></span></span><br><span class="line"><span class="actionscript">        MultiPoint: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line">          image: image</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为MultiPolygon时，有stroke和fill样式</span></span></span><br><span class="line"><span class="actionscript">        MultiPolygon: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"yellow"</span>,</span></span><br><span class="line">            width: 1</span><br><span class="line">          &#125;),</span><br><span class="line"><span class="actionscript">          fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"rgba(255, 255, 0, 0.1)"</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为Polygon时，有stroke和fill样式</span></span></span><br><span class="line"><span class="actionscript">        Polygon: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"blue"</span>,</span></span><br><span class="line">            lineDash: [4],</span><br><span class="line">            width: 3</span><br><span class="line">          &#125;),</span><br><span class="line"><span class="actionscript">          fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"rgba(0, 0, 255, 0.1)"</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为GeometryCollection，stroke、fill、image三个样式都加上</span></span></span><br><span class="line"><span class="actionscript">        GeometryCollection: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"magenta"</span>,</span></span><br><span class="line">            width: 2</span><br><span class="line">          &#125;),</span><br><span class="line"><span class="actionscript">          fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"magenta"</span></span></span><br><span class="line">          &#125;),</span><br><span class="line"><span class="actionscript">          image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line">            radius: 10,</span><br><span class="line"><span class="actionscript">            fill: <span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">              color: <span class="string">"magenta"</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当几何对象为Circle时，有stroke和fill样式</span></span></span><br><span class="line"><span class="actionscript">        Circle: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"red"</span>,</span></span><br><span class="line">            width: 2</span><br><span class="line">          &#125;),</span><br><span class="line"><span class="actionscript">          fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">"rgba(255,0,0,0.2)"</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 样式函数styleFunction，根据特征对象中几何对象的type来返回样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> styleFunction = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> styles[feature.getGeometry().getType()];</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// geojson对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> geojsonObject = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// FeatureCollection是规范中的九种GeoJSON类型之一</span></span></span><br><span class="line"><span class="actionscript">        type: <span class="string">"FeatureCollection"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// crs是规范中的自定义的外部成员</span></span></span><br><span class="line">        crs: &#123;</span><br><span class="line"><span class="actionscript">          type: <span class="string">"name"</span>,</span></span><br><span class="line">          properties: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 投影方式为EPSG:3857</span></span></span><br><span class="line"><span class="actionscript">            name: <span class="string">"EPSG:3857"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">// features中存放特征对象</span></span></span><br><span class="line">        features: [</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// Feature也是规范中的九种GeoJSON类型之一</span></span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"Feature"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// geometry是几何对象</span></span></span><br><span class="line">            geometry: &#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// Point是规范中的七种几何类型之一</span></span></span><br><span class="line"><span class="actionscript">              type: <span class="string">"Point"</span>,</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// coordinates数组中存放位置，第一个是经度方向，第二个是纬度方向，如果有第三个则为高度方向</span></span></span><br><span class="line">              coordinates: [0, 0]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">"Feature"</span>,</span></span><br><span class="line">            geometry: &#123;</span><br><span class="line"><span class="actionscript">              type: <span class="string">"LineString"</span>,</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// LineString中存放的是位置数组</span></span></span><br><span class="line">              coordinates: [</span><br><span class="line">                [4e6, -2e6],</span><br><span class="line">                [8e6, 2e6]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">"Feature"</span>,</span></span><br><span class="line">            geometry: &#123;</span><br><span class="line"><span class="actionscript">              type: <span class="string">"LineString"</span>,</span></span><br><span class="line">              coordinates: [</span><br><span class="line">                [4e6, 2e6],</span><br><span class="line">                [8e6, -2e6]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">"Feature"</span>,</span></span><br><span class="line">            geometry: &#123;</span><br><span class="line"><span class="actionscript">              type: <span class="string">"Polygon"</span>,</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// Polygon中存放的“linear ring数组”组成的数组，第一个数组是外环，如果有其他的则为内环</span></span></span><br><span class="line">              coordinates: [</span><br><span class="line">                [</span><br><span class="line">                  [-5e6, -1e6],</span><br><span class="line">                  [-4e6, 1e6],</span><br><span class="line">                  [-3e6, -1e6]</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">"Feature"</span>,</span></span><br><span class="line">            geometry: &#123;</span><br><span class="line"><span class="actionscript">              type: <span class="string">"MultiLineString"</span>,</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// MutiLineString中存放的是也是“linear ring数组”组成的数组，每个linear ring数组都是一条线</span></span></span><br><span class="line">              coordinates: [</span><br><span class="line">                [</span><br><span class="line">                  [-1e6, -7.5e5],</span><br><span class="line">                  [-1e6, 7.5e5]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                  [1e6, -7.5e5],</span><br><span class="line">                  [1e6, 7.5e5]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                  [-7.5e5, -1e6],</span><br><span class="line">                  [7.5e5, -1e6]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                  [-7.5e5, 1e6],</span><br><span class="line">                  [7.5e5, 1e6]</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">"Feature"</span>,</span></span><br><span class="line">            geometry: &#123;</span><br><span class="line"><span class="actionscript">              type: <span class="string">"MultiPolygon"</span>,</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// MultiPolygon中存放的是“Polygon坐标数组”组成的数组</span></span></span><br><span class="line">              coordinates: [</span><br><span class="line">                [</span><br><span class="line">                  [</span><br><span class="line">                    [-5e6, 6e6],</span><br><span class="line">                    [-5e6, 8e6],</span><br><span class="line">                    [-3e6, 8e6],</span><br><span class="line">                    [-3e6, 6e6]</span><br><span class="line">                  ]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                  [</span><br><span class="line">                    [-2e6, 6e6],</span><br><span class="line">                    [-2e6, 8e6],</span><br><span class="line">                    [0, 8e6],</span><br><span class="line">                    [0, 6e6]</span><br><span class="line">                  ]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                  [</span><br><span class="line">                    [1e6, 6e6],</span><br><span class="line">                    [1e6, 8e6],</span><br><span class="line">                    [3e6, 8e6],</span><br><span class="line">                    [3e6, 6e6]</span><br><span class="line">                  ]</span><br><span class="line">                ]</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="actionscript">            type: <span class="string">"Feature"</span>,</span></span><br><span class="line">            geometry: &#123;</span><br><span class="line"><span class="actionscript">              type: <span class="string">"GeometryCollection"</span>,</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// GeometryCollection中有geometries几何集合对象，里面每一项都是一个几何对象</span></span></span><br><span class="line">              geometries: [</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  type: <span class="string">"LineString"</span>,</span></span><br><span class="line">                  coordinates: [</span><br><span class="line">                    [-5e6, -5e6],</span><br><span class="line">                    [0, -5e6]</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  type: <span class="string">"Point"</span>,</span></span><br><span class="line">                  coordinates: [4e6, -5e6]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                  type: <span class="string">"Polygon"</span>,</span></span><br><span class="line">                  coordinates: [</span><br><span class="line">                    [</span><br><span class="line">                      [1e6, -6e6],</span><br><span class="line">                      [2e6, -4e6],</span><br><span class="line">                      [3e6, -6e6]</span><br><span class="line">                    ]</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 定义一个矢量源vectorSource，features读取自geojson对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorSource = <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        features: <span class="keyword">new</span> ol.format.GeoJSON().readFeatures(geojsonObject)</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 给vectorSource添加圆这个特征对象</span></span></span><br><span class="line">      vectorSource.addFeature(</span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> ol.Feature(<span class="keyword">new</span> ol.geom.Circle([<span class="number">5e6</span>, <span class="number">7e6</span>], <span class="number">1e6</span>))</span></span><br><span class="line">      );</span><br><span class="line"><span class="actionscript">      <span class="comment">// 定义一个矢量图层vectorLayer，源source为vectorSource，样式style为样式函数styleFunction</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">        source: vectorSource,</span><br><span class="line">        style: styleFunction</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 给地图加一个OSM底图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [</span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">            source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">          &#125;),</span><br><span class="line">          vectorLayer</span><br><span class="line">        ],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地图 </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoJson规范（RFC 7946）全文翻译</title>
      <link href="/posts/22f1fd78.html"/>
      <url>/posts/22f1fd78.html</url>
      
        <content type="html"><![CDATA[<p>最近使用 <a href="https://geojson.org/" target="_blank" rel="external nofollow noopener noreferrer">GeoJson</a> 的时候总是感觉一知半解，腾出时间来翻译一遍 GeoJson 的规范，让自己理解的更透彻些。<br>2015 年，<a href="https://ietf.org/" target="_blank" rel="external nofollow noopener noreferrer">国际互联网工程任务组</a>（<code>IETF</code>）与最初的规范作者共同组建了一个 <a href="https://datatracker.ietf.org/wg/geojson/charter/" target="_blank" rel="external nofollow noopener noreferrer">GeoJson 工作组</a>(<code>GeoJSON WG</code>) 来标准化 <code>GeoJSON</code>。 <code>RFC 7946</code> 于 2016 年 8 月发布，取代了 2008 年的 <code>GeoJSON</code>规范成为 <code>GeoJSON</code> 格式的新标准规范。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><code>GeoJson</code> 是一种基于 <code>JSON</code> 的地理空间数据交换格式。 它定义了几种类型的 <code>JSON</code> 对象，以及将它们组合起来表示有关地理特征、属性和空间范围的数据的方式。 <code>GeoJson</code> 使用了经纬度参考系统、 <code>WGS84</code> 坐标系统和十进制单位。</p><h2 id="本备忘录的状况"><a href="#本备忘录的状况" class="headerlink" title="本备忘录的状况"></a>本备忘录的状况</h2><p>这是一个 Internet 标准跟踪文档。</p><p>本文档是国际互联网工程任务组(<code>IETF</code>)的产品。 它代表 <code>IETF</code> 社区的一致意见。 它已经接受了公众的审查，并且已经被美国互联网工程指导委员会批准出版。 有关互联网标准的更多资料，请参阅 <a href="https://tools.ietf.org/html/rfc7841#section-2" target="_blank" rel="external nofollow noopener noreferrer">RFC 7841 第 2 节</a>。</p><p><a href="https://tools.ietf.org/html/rfc7841#section-2" target="_blank" rel="external nofollow noopener noreferrer">https://tools.ietf.org/html/rfc7841#section-2</a></p><p>有关本文件的现状、任何勘误表，以及如何提供反馈的信息可以在<a href="http://www.rfc-editor.org/info/rfc7946获得。" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc7946获得。</a></p><a id="more"></a><h2 id="著作权警告"><a href="#著作权警告" class="headerlink" title="著作权警告"></a>著作权警告</h2><p><code>IETF</code> 被确认为文档作者，保留所有权利。</p><p>本文档受 <a href="https://tools.ietf.org/html/bcp78" target="_blank" rel="external nofollow noopener noreferrer">BCP 78</a>和 IETF 信托基金有关 <a href="https://trustee.ietf.org/trust-legal-provisions.html" target="_blank" rel="external nofollow noopener noreferrer">IETF 文档的法律规定</a>的约束，这些约束规定在本文档发布之日起生效。 请仔细阅读这些文件，因为它们描述了您对本文件的权利和限制。 从此文档中提取的代码组件必须包含第 4 节中描述的简化 <code>BSD</code> 许可证文本，并提供的简化 <code>BSD</code> 许可证。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><code>GeoJson</code> 是一种使用 <code>JSON</code> 编码（<a href="https://tools.ietf.org/html/rfc7159" target="_blank" rel="external nofollow noopener noreferrer">RFC7159</a>）对各种地理数据结构进行编码的格式。 <code>GeoJson</code> 对象可以表示一个空间区域(<code>Geometry</code>)、一个空间有界实体(<code>Feature</code>)或一系列特征集合(<code>FeatureCollection</code>)。 <code>GeoJson</code> 支持以下几何类型: <code>Point</code>、 <code>LineString</code>、 <code>Polygon</code>、 <code>MultiPoint</code>、 <code>MultiLineString</code>、 <code>MultiPolygon</code>和 <code>GeometryCollection</code>。 特征包含一个 <code>Geometry</code> 对象和其他属性，而特征集合包含一个特征列表。</p><p>这种格式从最广泛的意义上讲与地理数据有关，任何具有地理空间界限的特性的东西都可能是一个特征，不管它是否是一个物理结构。 <code>GeoJson</code> 中的概念并不新鲜，它们来自于先前存在的开放地理信息系统标准，并且已经进行了简化，以更好地适应使用 <code>JSON</code> 的 <code>WEB</code> 应用程序开发。</p><p><code>GeoJson</code> 包含了在 <code>OpenGIS</code> 的简单特征实现规范中定义的七种具体的几何类型: <code>0</code> 维是 <code>Point</code> 和 <code>MultiPoint</code>;<code>1</code> 维曲线 <code>LineString</code> 和 <code>MultiLineString</code>; <code>2</code> 维曲面 <code>Polygon</code> 和 <code>MultiPolygon</code>;异构的 <code>GeometryCollection</code>。 这些几何类型的 <code>GeoJSON</code> 实例类似于在同一规范中描述的二进制(<code>WKB</code>)和文本(<code>WKT</code>)。</p><p><code>GeoJson</code> 还包含类型 <code>Feature</code> 和 <code>FeatureCollection</code>。 <code>GeoJson</code> 中的 <code>Feature</code> 对象包含一个 <code>Geometry</code> 对象，该对象具有上述几何类型之一和其他属性。 <code>FeatureCollection</code> 对象包含一个 <code>Feature</code> 对象数组。</p><p>自 2008 年首次发布<a href="https://tools.ietf.org/html/rfc7946#ref-GJ2008" target="_blank" rel="external nofollow noopener noreferrer">GJ2008</a>以来，<code>GeoJSON</code> 格式规范的流行程度一直在稳步增长。 它广泛应用于 <code>JavaScript</code> 网页地图库、基于 <code>json</code> 的文档数据库和 <code>web API</code>。</p><h3 id="必需的词汇"><a href="#必需的词汇" class="headerlink" title="必需的词汇"></a>必需的词汇</h3><p>本文件中的”必须”、”不得”、”必需”、”应当”、”不应当”、”应该”、”不应该”、”建议”、”不建议”、”可能”和”可选”等关键词应解释为<a href="https://tools.ietf.org/html/rfc2119" target="_blank" rel="external nofollow noopener noreferrer">RFC2119</a>所述。</p><h3 id="本文件中使用的约定"><a href="#本文件中使用的约定" class="headerlink" title="本文件中使用的约定"></a>本文件中使用的约定</h3><p>必须按照<a href="https://tools.ietf.org/html/rfc7159" target="_blank" rel="external nofollow noopener noreferrer">RFC7159</a>的指定，将本文档中定义的任何 <code>JSON</code> 对象的成员的顺序视为无关的。</p><p>一些示例使用 <code>JavaScript</code> 语言的单行注释(/ /)和省略号(…)的组合作为作者认为不相关的内容的占位符。 当然，在试图验证相应的<code>JSON</code> 代码示例之前，必须删除或替换这些占位符。</p><p>本文档中的示例使用空格来帮助说明数据结构，但不是必需的。 不带引号的空格在<code>JSON</code> 中不重要。</p><h3 id="GeoJson-规范"><a href="#GeoJson-规范" class="headerlink" title="GeoJson 规范"></a>GeoJson 规范</h3><p>本文档取代原来的 <code>GeoJSON</code> 格式规范<a href="https://tools.ietf.org/html/rfc7946#ref-GJ2008" target="_blank" rel="external nofollow noopener noreferrer">GJ2008</a>。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><code>JSON</code>，以及术语对象、成员、名称、值、数组、数字、 <code>true</code>、 <code>false</code> 和 <code>null</code>，将被解释为在<a href="https://tools.ietf.org/html/rfc7159" target="_blank" rel="external nofollow noopener noreferrer">RFC7159</a>中的定义。</li><li>在本文档中，术语“几何类型”指七个区分大小写的字符串: “ <code>Point</code>”、“ <code>MultiPoint</code>”、“ <code>LineString</code>”、“ <code>MultiLineString</code>”、“ <code>Polygon</code>”、“ <code>MultiPolygon</code>”和“ <code>GeometryCollection</code>”。</li><li>作为另一种速记符号，术语“ <code>GeoJSON 类型</code>”指的是九个区分大小写的字符串: “ <code>Feature</code>”、“ <code>FeatureCollection</code>”以及上面列出的几何类型。</li><li>“ <code>FeatureCollection</code>”和“ <code>GeometryCollection</code>”中的“ <code>Collection</code>”一词对于数组成员的语义没有任何意义。 这些对象的“ <code>features</code>”和“ <code>geometry</code>”成员分别是标准的有序 <code>JSON</code> 数组，而不是无序集。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>一个 <code>GeoJSON</code>类型中的 <code>FeatureCollection</code> 类型：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"Point"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: [<span class="number">102.0</span>, <span class="number">0.5</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"prop0"</span>: <span class="string">"value0"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: [</span><br><span class="line">          [<span class="number">102.0</span>, <span class="number">0.0</span>],</span><br><span class="line">          [<span class="number">103.0</span>, <span class="number">1.0</span>],</span><br><span class="line">          [<span class="number">104.0</span>, <span class="number">0.0</span>],</span><br><span class="line">          [<span class="number">105.0</span>, <span class="number">1.0</span>]</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"prop0"</span>: <span class="string">"value0"</span>,</span><br><span class="line">        <span class="attr">"prop1"</span>: <span class="number">0.0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: [</span><br><span class="line">          [</span><br><span class="line">            [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            [<span class="number">101.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            [<span class="number">101.0</span>, <span class="number">1.0</span>],</span><br><span class="line">            [<span class="number">100.0</span>, <span class="number">1.0</span>],</span><br><span class="line">            [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"prop0"</span>: <span class="string">"value0"</span>,</span><br><span class="line">        <span class="attr">"prop1"</span>: &#123;</span><br><span class="line">          <span class="attr">"this"</span>: <span class="string">"that"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/%E4%BE%8B%E5%AD%90.jpg" alt></p><h2 id="GeoJson-文本"><a href="#GeoJson-文本" class="headerlink" title="GeoJson 文本"></a>GeoJson 文本</h2><p><code>GeoJson 文本</code>是 JSON 文本，由单个 <code>GeoJSON 对象</code>组成。</p><h2 id="GeoJson-对象"><a href="#GeoJson-对象" class="headerlink" title="GeoJson 对象"></a>GeoJson 对象</h2><p><code>GeoJson 对象</code>表示一个几何对象、特征或特征集合。</p><ul><li>一个 <code>GeoJSON 对象</code>是一个<code>JSON 对象</code>。</li><li>一个 <code>GeoJSON 对象</code>有一个名为“ <code>type</code>”的成员。 成员的值必须是 <code>GeoJSON 九种类型</code>之一。</li><li>一个 <code>GeoJSON 对象</code>可能有一个“<code>bbox</code>”成员，其值必须是一个边界框数组(参见<a href="https://tools.ietf.org/html/rfc7946#section-5" target="_blank" rel="external nofollow noopener noreferrer">第 5 节</a>)。</li><li><code>GeoJSON 对象</code>可能有其他成员(见<a href="https://tools.ietf.org/html/rfc7946#section-6" target="_blank" rel="external nofollow noopener noreferrer">第 6 节</a>)。</li></ul><h3 id="几何对象"><a href="#几何对象" class="headerlink" title="几何对象"></a>几何对象</h3><p>几何对象在坐标空间中表示点、曲线和曲面。 每个 <code>Geometry</code> 对象都是一个 <code>GeoJSON 对象</code>，不管它出现在 <code>GeoJSON 文本</code>的哪个位置。</p><ul><li>几何对象的“<code>type</code>”成员的值必须是七种几何类型之一(见<a href="https://tools.ietf.org/html/rfc7946#section-1.4" target="_blank" rel="external nofollow noopener noreferrer">第 1.4 节</a>)。</li><li>除了“ <code>GeometryCollection</code>”以外的任何类型的 <code>GeoJSON 几何对象</code>都有一个名为“ <code>coordinates</code>”的成员。 “<code>coordinates</code>”成员的值是一个数组。 此数组中元素的结构由几何形状类型决定。 <code>GeoJson 处理器</code>可能将含有空“coordinates”数组的几何对象解释为空对象。</li></ul><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>位置是基本的几何构造。 几何对象的“coordinates”成员由以下两部分组成:</p><ul><li>在 <code>Point</code> 几何情况下有一个位置。</li><li>在 <code>LineString</code> 或 <code>MultiPoint</code> 情况下有一个位置数组。</li><li>在 <code>Polygon</code> 或 <code>MultiLineString</code> 情况下有一个 <code>LineString</code> 或 linear ring(见<a href="https://tools.ietf.org/html/rfc7946#section-3.1.6" target="_blank" rel="external nofollow noopener noreferrer">第 3.1.6 节</a>)坐标数组。</li><li>在 <code>MultiPolygon</code>情况下有一个 <code>Polygon</code> 坐标数组。</li></ul><p>一个位置是一组数字。 必须有两个或两个以上的元素。 前两个元素是<code>经度和纬度</code>，或者叫做 <code>easting</code> 和 <code>northing</code>，精确地按照这个顺序使用十进制数字。 <code>海拔或高度</code>可作为可选的第三个要素。</p><p>实现时不应该扩展位置超过三个元素，因为额外元素的语义是不确定和模糊的。 历史上，有些实现使用第四个元素来携带线性参考度量值(有时表示为“ <code>m</code>”)或数字时间戳，但在大多数情况下，解析器不能正确解释这些值。 附加元素的解释和含义超出了本规范的范围，附加元素可能会被解析器忽略。</p><p>两个位置之间的直线是<code>笛卡尔坐标系下的直线</code>，也就是坐标系中两点之间最短的直线(见<a href="https://tools.ietf.org/html/rfc7946#section-4" target="_blank" rel="external nofollow noopener noreferrer">第 4 节</a>)。</p><p>换句话说，在<code>(lon0、 lat0)</code>和<code>(lon1、 lat1)</code>之间的一条直线上的每个点不会穿过 <code>180 度经线</code>，这些点可以计算为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F(lon, lat) &#x3D; (lon0 + (lon1 - lon0) * t, lat0 + (lat1 - lat0) * t)</span><br></pre></td></tr></table></figure><p><code>t</code>是大于等于 <code>0</code>小于等于 <code>1</code>的实数。 请注意，这条线可能明显不同于沿着参考椭球体曲面的测地线路径。</p><p>这同样适用于可选的高度元素，但条件是高度的方向在坐标参考系是指定的。</p><p>请再次注意，这并不意味着高度相等的曲面遵循例如水体的曲率。 同样高度的曲面也不会垂直于铅垂线。</p><p>位置和几何图形的例子见<a href="https://tools.ietf.org/html/rfc7946#appendix-A" target="_blank" rel="external nofollow noopener noreferrer">附录 a</a>“几何示例“</p><h4 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h4><p>对于类型“ <code>Point</code>” ，“ <code>coordinates</code>”成员是一个位置。</p><h4 id="MultiPoint"><a href="#MultiPoint" class="headerlink" title="MultiPoint"></a>MultiPoint</h4><p>对于类型“ <code>MultiPoint</code>” ，“<code>coordinates</code>”成员是位置数组。</p><h4 id="LineString"><a href="#LineString" class="headerlink" title="LineString"></a>LineString</h4><p>对于类型“ LineString” ，“ <code>coordinates</code>”成员是两个或多个位置的数组。</p><h4 id="MultiLineString"><a href="#MultiLineString" class="headerlink" title="MultiLineString"></a>MultiLineString</h4><p>对于类型“ <code>MultiLineString</code>” ，“ <code>coordinates</code>”成员是 ”<code>LineString 坐标数组</code>“的数组。</p><h4 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h4><p>为了指定多边形特有的约束，引入<code>线性环</code>的概念是有用的:</p><ul><li><code>线性环</code>是具有四个或更多位置的闭合 <code>LineString</code>。</li><li>第一个和最后一个位置是相同的，它们必须包含相同的值; 它们的表示也应该相同。</li><li><code>线性环</code>是曲面的边界或曲面上孔的边界。</li><li><code>线性环</code>必须遵循右手法则，也就是说，外环为逆时针方向，孔为顺时针方向。</li></ul><p>注: <a href="https://tools.ietf.org/html/rfc7946#ref-GJ2008" target="_blank" rel="external nofollow noopener noreferrer">GJ2008</a>规范没有讨论<code>线性环绕顺序</code>。 为了向后兼容，解析器不应该拒绝不遵循右边规则的多边形。</p><p>虽然线性环没有被显式地表示为 <code>GeoJSON 几何类型</code>，但它导致了 <code>Polygon</code> 几何类型定义的规范化表述如下:</p><ul><li>对于类型“<code>Polygon</code>” ，“<code>coordinates</code>”成员必须是一个”<code>线性环坐标数组</code>“组成的数组。</li><li>对于多边形有一个以上的环，第一个必须是外环，其他的必须是内环。 外环与表面形成边界，内环(如果存在)与表面形成边界孔。</li></ul><h4 id="MultiPolygon"><a href="#MultiPolygon" class="headerlink" title="MultiPolygon"></a>MultiPolygon</h4><p>对于类型“ <code>MultiPolygon</code>” ，“ <code>coordinates</code>”成员是”<code>Polygon 坐标数组</code>“组成的数组。</p><h4 id="GeometryCollection"><a href="#GeometryCollection" class="headerlink" title="GeometryCollection"></a>GeometryCollection</h4><p>类型为“ <code>GeometryCollection</code>”的 <code>GeoJSON 对象</code>是一个几何对象。 <code>Geometrycollection</code> 有一个名为“ <code>geometries</code>”的成员。 “<code>geometries</code>”的值是一个数组。 这个数组的每个元素都是一个 <code>GeoJSON 几何对象</code>。 这个数组可能是<code>空</code>的。</p><p>与上面描述的其他几何类型不同，<code>GeometryCollection</code> 可以是较小几何对象的异构组合。 例如，小写罗马字体“ i”形状的几何对象可以由一个 <code>Point</code> 和一个 <code>LineString</code> 组成。</p><p><code>Geometrycollections</code> 有不同于单一类型的几何对象(<code>Point</code>、 <code>LineString</code> 和 <code>Polygon</code>)和多部分几何对象(<code>MultiPoint</code>、 <code>MultiLineString</code> 和 <code>MultiPolygon</code>)的语法，但没有不同的语义。 虽然 <code>GeometryCollection</code> 对象没有“<code>coordinates</code>”成员，但它确实有坐标:，其所有部分的坐标都属于该集合。 <code>Geometrycollection</code> 的“<code>geometries</code>”成员描述了这个组合的各个部分。 实现不应该对“<code>geometries</code>”数组应用任何附加语义。</p><p>为了最大化互用性，实现应该避免嵌套的 <code>GeometryCollection</code>s。 此外，当可以使用单个部件或多部件类型的单个对象(<code>MultiPoint</code>、 <code>MultiLineString</code> 或 <code>MultiPolygon</code>)时，应避免使用由单个部件或单个类型的多个部件组成的 <code>GeometryCollection</code>s。</p><h4 id="180-度经线切割"><a href="#180-度经线切割" class="headerlink" title="180 度经线切割"></a>180 度经线切割</h4><p>在表示跨越 <code>180 度经线</code>的<code>特征</code>时，通过修改它们的几何形状可以提高互操作性。 任何穿过 <code>180 度经线</code>的几何体都应该被切割成两部分，这样任何一部分的表示都不会穿过 <code>180 度经线</code>。</p><p>例如，一条从<code>北纬 45 度</code>，<code>东经 170 度</code>延伸到<code>北纬 45 度</code>，<code>西经 170 度</code>的直线应该被切成两段并表示为 <code>MultiLineString</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"MultiLineString"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">170.0</span>, <span class="number">45.0</span>],</span><br><span class="line">      [<span class="number">180.0</span>, <span class="number">45.0</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">-180.0</span>, <span class="number">45.0</span>],</span><br><span class="line">      [<span class="number">-170.0</span>, <span class="number">45.0</span>]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/180.jpg" alt></p><p>一个从<code>北纬 40 度</code>，<code>东经 170 度</code>到<code>北纬 50 度</code>，<code>西经 170 度</code>的矩形应该被切割成两个并表示为一个多边形。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">180.0</span>, <span class="number">40.0</span>],</span><br><span class="line">        [<span class="number">180.0</span>, <span class="number">50.0</span>],</span><br><span class="line">        [<span class="number">170.0</span>, <span class="number">50.0</span>],</span><br><span class="line">        [<span class="number">170.0</span>, <span class="number">40.0</span>],</span><br><span class="line">        [<span class="number">180.0</span>, <span class="number">40.0</span>]</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">-170.0</span>, <span class="number">40.0</span>],</span><br><span class="line">        [<span class="number">-170.0</span>, <span class="number">50.0</span>],</span><br><span class="line">        [<span class="number">-180.0</span>, <span class="number">50.0</span>],</span><br><span class="line">        [<span class="number">-180.0</span>, <span class="number">40.0</span>],</span><br><span class="line">        [<span class="number">-170.0</span>, <span class="number">40.0</span>]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/1801.jpg" alt></p><h4 id="不确定性和精确性"><a href="#不确定性和精确性" class="headerlink" title="不确定性和精确性"></a>不确定性和精确性</h4><p>在<a href="https://tools.ietf.org/html/rfc5870" target="_blank" rel="external nofollow noopener noreferrer">RFC5870</a>中规定，坐标位置上的数值的位数不能被解释为不确定度级别。</p><h3 id="特征对象"><a href="#特征对象" class="headerlink" title="特征对象"></a>特征对象</h3><p>一个<code>特征对象</code>表示一个空间上有界的对象。 每个<code>特征对象</code>都是一个 <code>GeoJSON 对象</code>，不管它出现在 <code>GeoJSON 文本</code>的哪个位置。</p><ul><li>一个<code>特征对象</code>有一个值为“ <code>Feature</code>”的“<code>type</code>”成员。</li><li>一个<code>特征对象</code>有一个名为“ <code>geometry</code>”的成员。 <code>geometry</code>成员的值应该是上面定义的几何对象，或者在功能未定位的情况下为<code>JSON 空值</code>。</li><li>一个<code>特征对象</code>有一个名为“<code>properties</code>”的成员。 属性成员的值是一个对象(任何<code>JSON 对象</code>或 <code>JSON 空值</code>)。</li><li>如果一个<code>特征</code>有一个常用的标识符，那么这个标识符应该包含在特征对象的名为“ <code>id</code>”的成员中，并且这个成员的值是 <code>JSON 字符串</code>或<code>数字</code>。</li></ul><h3 id="特征集合对象"><a href="#特征集合对象" class="headerlink" title="特征集合对象"></a>特征集合对象</h3><p>类型为“ <code>FeatureCollection</code>”的 <code>GeoJSON 对象</code>是 <code>FeatureCollection</code> 对象。 <code>FeatureCollection</code> 对象有一个名为“ <code>feature</code>s”的成员。 “<code>features</code>”的值是一个 <code>JSON 数组</code>。 数组的每个元素都是上面定义的<code>特征对象</code>。 这个数组可能为空。</p><h2 id="坐标参考系统"><a href="#坐标参考系统" class="headerlink" title="坐标参考系统"></a>坐标参考系统</h2><p>所有 <code>GeoJSON 坐标</code>的坐标参考系统是同一个地理经纬度坐标参考系统，使用<a href="https://tools.ietf.org/html/rfc7946#ref-WGS84" target="_blank" rel="external nofollow noopener noreferrer">WGS84</a>基准，以十进制经纬度为单位。 这相当于开放地理空间协会标识的坐标引用系统 <code>URN: OGC: def: crs: OGC: : CRS84</code>。 一个可选的<code>第三位元素</code>应该是 WGS 84 参考椭球体以上或以下的高度（米）。 在没有高程值的情况下，对高度或深度敏感的应用程序应该将<code>第三位元素</code>解释为在该坐标的地面或海平面高度。</p><p>注: 备选坐标参考系统在<a href="https://tools.ietf.org/html/rfc7946#ref-GJ2008" target="_blank" rel="external nofollow noopener noreferrer">GJ2008</a>中有规定，但已从本规范版本中删除，因为使用不同的坐标参考系统，特别是以 <code>GJ2008</code> 中规定的方式已证明存在互用性问题。 一般来说，<code>GeoJSON 处理软件</code>不需要访问坐标参考系统数据库或网络访问坐标参考系统转换参数。 然而，如果所有参与方事先都有安排而不会有数据被误解的风险，可以使用其他的坐标参考系统。</p><h2 id="边界框"><a href="#边界框" class="headerlink" title="边界框"></a>边界框</h2><p><code>GeoJson 对象</code>可能有一个名为“<code>bbox</code>”的成员，包含关于其<code>几何对象</code>、<code>特征对象</code>或<code>特征对象集合</code>的<code>坐标范围</code>的信息。 <code>bbox</code> 成员的值必须是一个长度为 <code>2 * n</code> 的数组，其中 <code>n</code> 是所包含的几何图形中表示的<code>维数</code>，最西南点的坐标轴后跟最东北点的坐标轴。<code>bbox</code> 的坐标轴顺序遵循几何图形的坐标轴顺序。</p><p>“<code>bbox</code>”值定义沿着固定的经度、纬度和海拔线作为边缘的形状。</p><p>特征对象中的<code>2D bbox</code> 示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="attr">"bbox"</span>: [<span class="number">-10.0</span>, <span class="number">-10.0</span>, <span class="number">10.0</span>, <span class="number">10.0</span>],</span><br><span class="line">  <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">    <span class="attr">"coordinates"</span>: [</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">-10.0</span>, <span class="number">-10.0</span>],</span><br><span class="line">        [<span class="number">10.0</span>, <span class="number">-10.0</span>],</span><br><span class="line">        [<span class="number">10.0</span>, <span class="number">10.0</span>],</span><br><span class="line">        [<span class="number">-10.0</span>, <span class="number">-10.0</span>]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特征集合中 <code>2D bbox</code> 成员示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"bbox"</span>: [<span class="number">100.0</span>, <span class="number">0.0</span>, <span class="number">105.0</span>, <span class="number">1.0</span>],</span><br><span class="line">  <span class="attr">"features"</span>: [</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有 <code>100m 深度</code>的 <code>3D bbox</code>成员示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"bbox"</span>: [<span class="number">100.0</span>, <span class="number">0.0</span>, <span class="number">-100.0</span>, <span class="number">105.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>],</span><br><span class="line">  <span class="attr">"features"</span>: [</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接线"><a href="#连接线" class="headerlink" title="连接线"></a>连接线</h3><p>边界框的四条线完全在坐标参考系中定义。也就是说，组成一个<code>以“西”、“南”、“东”和“北”值为边界的框</code>（四至），最北线上的每一点都可以表示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lon, lat) &#x3D; (west + (east - west) * t, north)</span><br><span class="line">0 &lt;&#x3D; t &lt;&#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="180-度经线"><a href="#180-度经线" class="headerlink" title="180 度经线"></a>180 度经线</h3><p>参照一组位于斐济群岛上的 <code>Point</code> 特征对象，它横跨在<code>南纬 16 度到南纬 20 度</code>之间。 包含这些特征的框的西南角是在<code>南纬 20 度 和东经 177 度</code>，西北角是在<code>南纬 16 度和西经 178 度</code>。 这个跨越<code>180 经度线</code>的<code>特征</code>的 <code>GeoJSON 包围框</code>是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bbox&quot;: [177.0, -20.0, -178.0, -16.0]</span><br></pre></td></tr></table></figure><p>跨越了<code>5 经度</code>。</p><p>同一纬度带的<code>互补包围框</code>，不穿过 <code>180 度经线</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bbox&quot;: [-178.0, -20.0, 177.0, -16.0]</span><br></pre></td></tr></table></figure><p>跨越了 <code>355 经度</code>。</p><p>东北角的纬度总是大于西南角的纬度，但是穿过 <code>180 度经线</code>的边框的东北角经度小于西南角的经度。</p><h3 id="两极"><a href="#两极" class="headerlink" title="两极"></a>两极</h3><p>一个包含北极的包围框从<code>[最小纬度，西经 180 度]</code>的西南角延伸到<code>[北纬 90 度，东经 180 度]</code>的东北角。在地球仪上看，这个包围框近似于一个被纬线包围着的球帽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bbox&quot;: [-180.0, minlat, 180.0, 90.0]</span><br></pre></td></tr></table></figure><p>一个包含南极的包围框从<code>[南纬 90 度，西经 180 度]</code>的西南角延伸到<code>[最大纬度，南纬 180 度]</code>的东北角。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bbox&quot;: [-180.0, -90.0, 180.0, maxlat]</span><br></pre></td></tr></table></figure><p>一个刚刚接触到北极的包围框，在地球仪上观察时形成一个近似球形的帽子，从<code>最小纬度和最西经度的西南角</code>延伸到<code>北纬 90 度和最东经度的东北角</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bbox&quot;: [westlon, minlat, eastlon, 90.0]</span><br></pre></td></tr></table></figure><p>类似地，一个刚刚接触到南极的包围框，在地球仪上观察时，形成一个近似球帽的切片，在 <code>GeoJSON</code> 中有以下表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bbox&quot;: [westlon, -90.0, eastlon, maxlat]</span><br></pre></td></tr></table></figure><p>实现时不能使用<code>大于 90 或小于-90 的纬度值</code>来表示一个范围。</p><h2 id="扩展-GeoJson"><a href="#扩展-GeoJson" class="headerlink" title="扩展 GeoJson"></a>扩展 GeoJson</h2><h3 id="外部成员"><a href="#外部成员" class="headerlink" title="外部成员"></a>外部成员</h3><p>本规范中未描述的成员(“外部成员”)可以在 <code>GeoJSON 文档</code>中使用。 注意，对外部成员的支持可能因具体实现而异，并且没有为外部成员定义规范的处理模型。 因此，过于依赖外部成员的实现可能会减少与其他实现的互用性。</p><p>例如，在下面显示的(删减的) <code>特征对象</code>中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">       <span class="attr">"id"</span>: <span class="string">"f1"</span>,</span><br><span class="line">       "geometry": &#123;...&#125;,</span><br><span class="line">       "properties": &#123;...&#125;,</span><br><span class="line">       "title": "Example Feature"</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>“ title” : “ Example Feature”</code>的<code>名称 : 值</code>对是外部成员。 当<code>外部成员</code>的值为对象时，该对象的所有后代成员本身都是<code>外部成员</code>。<code>GeoJson 语义</code>不适用于外部成员及其后代，无论它们的名称和值如何。 例如，在下面的(删减的) <code>特征对象</code>中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"f2"</span>,</span><br><span class="line">    "geometry": &#123;...&#125;,</span><br><span class="line">    "properties": &#123;...&#125;,</span><br><span class="line">    "centerline": &#123;</span><br><span class="line">        "type": "LineString",</span><br><span class="line">        "coordinates": [</span><br><span class="line">            [-170, 10],</span><br><span class="line">            [<span class="number">170</span>, <span class="number">11</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“<code>centerline</code>”成员不是 <code>GeoJSON 几何对象</code>。</p><h2 id="GeoJson-类型不可扩展"><a href="#GeoJson-类型不可扩展" class="headerlink" title="GeoJson 类型不可扩展"></a>GeoJson 类型不可扩展</h2><p>实现时不能扩展 <code>GeoJSON 类型</code>的固定集合: <code>FeatureCollection</code>、 <code>Feature</code>、 <code>Point</code>、 <code>LineString</code>、 <code>MultiPoint</code>、 <code>Polygon</code>、 <code>MultiLineString</code>、 <code>MultiLineString</code>、 <code>MultiPolygon</code>、 <code>MultiPolygon</code>和 <code>GeometryCollection</code>。</p><h3 id="GeoJson-成员和类型的语义不可变"><a href="#GeoJson-成员和类型的语义不可变" class="headerlink" title="GeoJson 成员和类型的语义不可变"></a>GeoJson 成员和类型的语义不可变</h3><p>实现时不能更改 <code>GeoJSON 成员和类型</code>的语义。</p><p><code>GeoJson</code> 的“<code>coordinates</code>”和“<code>geometries</code>”成员定义<code>几何对象</code>。 <code>FeatureCollection</code> 和 <code>Feature</code> 对象不能包含“<code>coordinates</code>”或“<code>geometries</code>”成员。</p><p><code>GeoJson</code> 的“<code>geometry</code>”和“<code>properties</code>”成员定义一个<code>特征对象</code>、<code>特征集合对象</code>和<code>几何对象</code>，不能包含一个“<code>geometry</code>”或“<code>properties</code>”成员。</p><p><code>GeoJson</code>“ <code>features</code>”成员定义一个<code>特征集合对象</code>。 <code>特征对象</code>和<code>几何对象</code>不能包含一个“<code>features</code>”成员。</p><h2 id="版本标识"><a href="#版本标识" class="headerlink" title="版本标识"></a>版本标识</h2><p><code>GeoJson 格式</code>可以像这里定义的那样进行扩展，但是没有定义明确的版本控制方案。 改变 <code>GeoJSON 成员</code>的语义或者修改格式的规范不会创建这种格式的新版本; 相反，它定义了一种全新的格式，不能被标识为 <code>GeoJSON</code>。</p><h2 id="映射到‘geo’URIs"><a href="#映射到‘geo’URIs" class="headerlink" title="映射到‘geo’URIs"></a>映射到‘geo’URIs</h2><p><code>“ geo” URIs</code> <a href="https://tools.ietf.org/html/rfc5870" target="_blank" rel="external nofollow noopener noreferrer">RFC5870</a>定义的地理位置和精确位置，可以映射到<code>GeoJSON 几何对象</code>。</p><p>对于本节，如 RFC5870 中所示，“<code>lat</code>”、“ <code>lon</code>”、“ <code>alt</code>”和“ <code>unc</code>”分别是<code>‘ geo’ URIs</code> 中<code>纬度</code>、<code>经度</code>、<code>海拔</code>和<code>不确定值的占位符</code>。</p><p>一个具有<code>两个坐标和一个不确定性(u)参数</code>的<code>“ geo” URIs</code>，可以和一个 <code>GeoJSON</code> <code>Point</code> 几何图形互相映射。 <code>GeoJson</code> <code>Point</code> 总是转换为没有<code>不确定性参数</code>的<code>‘ geo’ URIs</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#39;geo&#39; URI:</span><br><span class="line"></span><br><span class="line">geo:lat,lon</span><br><span class="line"></span><br><span class="line">GeoJSON:</span><br><span class="line"></span><br><span class="line">&#123;&quot;type&quot;: &quot;&#96;Point&#96;&quot;, &quot;coordinates&quot;: [lon, lat]&#125;</span><br></pre></td></tr></table></figure><p>在 <code>&#39;geo’ URIs</code> 和 <code>GeoJSON</code> 之间指定海拔的映射如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#39;geo&#39; URI:</span><br><span class="line"></span><br><span class="line">geo:lat,lon,alt</span><br><span class="line"></span><br><span class="line">GeoJSON:</span><br><span class="line"></span><br><span class="line">&#123;&quot;type&quot;: &quot;&#96;Point&#96;&quot;, &quot;coordinates&quot;: [lon, lat, alt]&#125;</span><br></pre></td></tr></table></figure><p><code>GeoJson</code> 没有<code>不确定性</code>的概念; 因此不确定的 <code>&#39;geo&#39; URIs</code> 无法被映射到 <code>GeoJSON 几何图形</code>。</p><h2 id="安全考虑"><a href="#安全考虑" class="headerlink" title="安全考虑"></a>安全考虑</h2><p><code>GeoJson</code> 有 <code>JSON</code> 内容类型所共有的安全问题。 详情请参阅<a href="https://tools.ietf.org/html/rfc7159#section-12" target="_blank" rel="external nofollow noopener noreferrer">RFC7159 ，第 12 节</a>。 <code>GeoJson</code> 不提供可执行内容。 <code>GeoJson</code> 不提供隐私或完整性服务。</p><p>如果敏感数据需要隐私或完整性保护，那么传输必须提供这些保护——例如，传输层安全性(<code>TLS</code>)或 <code>HTTPS</code>。 在某些情况下，存储的数据需要保护，这超出了本文档的范围。</p><p>与其他地理数据格式一样，如<a href="https://tools.ietf.org/html/rfc7946#ref-KMLv2.2" target="_blank" rel="external nofollow noopener noreferrer">KMLv2.2</a>，提供关于敏感人物、动物、栖息地和设施的位置的详细信息可能会使它们受到未经授权的跟踪或伤害。 数据提供者应当认识到，如果匿名数据集中的位置<a href="https://tools.ietf.org/html/rfc7946#ref-Sweeney" target="_blank" rel="external nofollow noopener noreferrer">未充分模糊</a>，就有可能无意识地识别出个人。数据提供者也应当认识到位置模糊的有效性受到若干因素的限制，不太可能成为抵御攻击的有效防御<a href="https://tools.ietf.org/html/rfc6772" target="_blank" rel="external nofollow noopener noreferrer">RFC6772</a>。</p><h2 id="互用性考虑因素"><a href="#互用性考虑因素" class="headerlink" title="互用性考虑因素"></a>互用性考虑因素</h2><h3 id="I-JSON"><a href="#I-JSON" class="headerlink" title="I-JSON"></a>I-JSON</h3><p><code>GeoJson 文本</code>应遵循 <code>Internet JSON</code> (<code>I-JSON</code>)<a href="https://tools.ietf.org/html/rfc7493" target="_blank" rel="external nofollow noopener noreferrer">RFC7493</a>的约束，以实现最大程度的<code>互用性</code>。</p><h3 id="坐标精度"><a href="#坐标精度" class="headerlink" title="坐标精度"></a>坐标精度</h3><p><code>GeoJson 文本</code>的字节大小是一个主要的互用性考虑因素，坐标值的精度对文本的大小有很大的影响。 通过将坐标精度从小数点后 <code>6</code> 位提高到小数点后 <code>15</code> 位，一个包含许多详细多边形的 <code>GeoJSON 文本</code>几乎可以膨胀两倍。 对于以度数为单位的地理坐标，<code>6</code>位小数(例如 <code>sprintf</code> 中常见的默认位置)大约等于 <code>10</code> 厘米，这个精度远低于目前的 <code>GPS 系统</code>。 实现时应该考虑使用超出必要精度的代价。</p><p>此外，<a href="https://tools.ietf.org/html/rfc7946#ref-WGS84" target="_blank" rel="external nofollow noopener noreferrer">WGS 84</a>基准面是大地水准面的一个相对粗略的近似值，相对于平行于地球平均海平面的表面，高度变化可达<code>5 米</code>(但一般在 <code>2 至 3 米</code>之间)。</p><h2 id="IANA-考虑"><a href="#IANA-考虑" class="headerlink" title="IANA 考虑"></a>IANA 考虑</h2><p><code>GeoJson 文本</code>的媒体类型是“ <code>application / geo + json</code>” ，并在<a href="https://tools.ietf.org/html/rfc6838" target="_blank" rel="external nofollow noopener noreferrer">RFC6838</a>中描述的“ <code>Media Types</code>”注册表中注册。 同一注册表中的“ <code>application / vnd.geo + json</code>“ 应该将其状态更改为“<code>OBSOLETED</code>” ，并指向媒体类型“ <code>application / geo + json</code>”和添加到此 <code>RFC</code> 的引用。</p><ul><li>类型名称: <code>application</code></li><li>子类型名称: <code>geo + json</code></li><li>所需参数: <code>n/a</code></li><li>可选参数: <code>n/a</code></li><li>编码考虑因素: <code>二进制</code></li><li>安全考虑因素: 参见上文<a href="https://tools.ietf.org/html/rfc7946#section-10" target="_blank" rel="external nofollow noopener noreferrer">第 10 节</a></li><li>互用性考虑因素: 参见上文<a href="https://tools.ietf.org/html/rfc7946#section-11" target="_blank" rel="external nofollow noopener noreferrer">第 11 节</a></li><li>发布的规范: <a href="https://tools.ietf.org/html/rfc7946" target="_blank" rel="external nofollow noopener noreferrer">RFC7946</a></li><li>使用此媒体类型的应用程序: 目前没有已知的应用程序使用此媒体类型。 这种媒体类型适用于目前使用“ <code>application / vnd.geo + json</code>”或“ <code>application / json</code>”媒体类型的 GeoJSON 应用程序，其中包括几个类别: <code>web 地图</code>、<code>地理空间数据库</code>、<code>地理数据处理 api</code>、<code>数据分析</code>和<code>存储服务</code>以及<code>数据传输</code>。</li></ul><p>附加信息:</p><ul><li>幻数: <code>n / a</code></li><li>文件扩展名:<code>.json .geojson</code></li><li>Macintosh 文件类型代码: <code>n / a</code></li><li>对象标识符: <code>n / a</code></li><li>Windows 剪贴板名称: <code>GeoJSON</code></li><li>Macintosh 统一类型标识符: <code>public.geojson conforms to public.json</code></li><li>联系人详细信息: <code>Sean Gillies (Sean.Gillies@gmail. com)</code></li><li>预期用途: <code>COMMON</code></li><li>使用限制: <code>无</code></li><li>作者: 见<a href="https://tools.ietf.org/html/rfc7946" target="_blank" rel="external nofollow noopener noreferrer">RFC7946</a>“作者地址”一节。</li><li>变更管理者: <code>互联网工程任务组</code></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><h3 id="标准参考资料"><a href="#标准参考资料" class="headerlink" title="标准参考资料"></a>标准参考资料</h3><ul><li><p>[RFC2119] Bradner, S., “Key words for use in RFCs to Indicate Requirement Levels”, BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <a href="http://www.rfc-editor.org/info/rfc2119" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc2119</a>.</p></li><li><p>[RFC6838] Freed, N., Klensin, J., and T. Hansen, “Media Type Specifications and Registration Procedures”, BCP 13, RFC 6838, DOI 10.17487/RFC6838, January 2013, <a href="http://www.rfc-editor.org/info/rfc6838" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc6838</a>.</p></li><li><p>[RFC7159] Bray, T., Ed., “The JavaScript Object Notation (JSON) Data Interchange Format”, RFC 7159, DOI 10.17487/RFC7159, March 2014, <a href="http://www.rfc-editor.org/info/rfc7159" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc7159</a>.</p></li><li><p>[RFC7493] Bray, T., Ed., “The I-JSON Message Format”, RFC 7493, DOI 10.17487/RFC7493, March 2015, <a href="http://www.rfc-editor.org/info/rfc7493" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc7493</a>.</p></li><li><p>[WGS84] National Imagery and Mapping Agency, “Department of Defense World Geodetic System 1984: Its Definition and Relationships with Local Geodetic Systems”, Third Edition, 1984.</p></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><p>[GJ2008] Butler, H., Daly, M., Doyle, A., Gillies, S., Schaub, T., and C. Schmidt, “The GeoJSON Format Specification”, June 2008.</p></li><li><p>[KMLv2.2] Wilson, T., “OGC KML”, OGC 07-147r2, Version 2.2.0, April 2008.</p></li><li><p>[RFC5870] Mayrhofer, A. and C. Spanring, “A Uniform Resource Identifier for Geographic Locations (‘geo’ URI)”, RFC 5870, DOI 10.17487/RFC5870, June 2010, <a href="http://www.rfc-editor.org/info/rfc5870" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc5870</a>.</p></li><li><p>[RFC6772] Schulzrinne, H., Ed., Tschofenig, H., Ed., Cuellar, J.,Polk, J., Morris, J., and M. Thomson, “Geolocation Policy: A Document Format for Expressing Privacy Preferences for Location Information”, RFC 6772, DOI 10.17487/RFC6772, January 2013, <a href="http://www.rfc-editor.org/info/rfc6772" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc6772</a>.</p></li><li><p>[RFC7464] Williams, N., “JavaScript Object Notation (JSON) Text Sequences”, RFC 7464, DOI 10.17487/RFC7464, February 2015, <a href="http://www.rfc-editor.org/info/rfc7464" target="_blank" rel="external nofollow noopener noreferrer">http://www.rfc-editor.org/info/rfc7464</a>.</p></li><li><p>[SFSQL] OpenGIS Consortium, Inc., “OpenGIS Simple Features Specification For SQL Revision 1.1”, OGC 99-049, May 1999. [Sweeney] Sweeney, L., “k-anonymity: a model for protecting privacy”, International Journal on Uncertainty, Fuzziness and Knowledge-based Systems 10 (5), 2002; 557-570, DOI 10.1142/S0218488502001648, 2002.</p></li><li><p>[WFSv1] Vretanos, P., “Web <code>Feature</code> Service Implementation Specification”, OGC 04-094, Version 1.1.0, May 2005.</p></li></ul><h2 id="附录-A-几何对象实例"><a href="#附录-A-几何对象实例" class="headerlink" title="附录 A. 几何对象实例"></a>附录 A. 几何对象实例</h2><p>下面的每个示例都表示一个有效且完整的 <code>GeoJSON 对象</code></p><h3 id="Points"><a href="#Points" class="headerlink" title="Points"></a>Points</h3><p>点坐标按<code>x</code>、 <code>y</code> 顺序排列(向<code>东</code>、向<code>北</code>为<code>投影坐标</code>，<code>经度</code>和<code>纬度</code>为<code>地理坐标</code>) :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"Point"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/Points.jpg" alt></p><h3 id="LineStrings"><a href="#LineStrings" class="headerlink" title="LineStrings"></a>LineStrings</h3><p><code>Linestring</code> 的坐标是一个<code>位置数组</code>(见<a href="https://tools.ietf.org/html/rfc7946#section-3.1.1" target="_blank" rel="external nofollow noopener noreferrer">第 3.1.1 节</a>)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">    [<span class="number">101.0</span>, <span class="number">1.0</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/LineStrings.jpg" alt></p><h3 id="Polygons"><a href="#Polygons" class="headerlink" title="Polygons"></a>Polygons</h3><p>一个多边形的坐标是一个 <code>linear ring 数组</code>(见 <a href="https://tools.ietf.org/html/rfc7946#section-3.1.6" target="_blank" rel="external nofollow noopener noreferrer">3.1.6 节</a>)的<code>坐标数组</code>。 数组中的<code>第一个元素</code>表示<code>最外环</code>。 任何后续元素都表示<code>内部环(或孔)</code>。</p><p>没有孔的情况:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">      [<span class="number">101.0</span>, <span class="number">0.0</span>],</span><br><span class="line">      [<span class="number">101.0</span>, <span class="number">1.0</span>],</span><br><span class="line">      [<span class="number">100.0</span>, <span class="number">1.0</span>],</span><br><span class="line">      [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/Polygons1.jpg" alt></p><p>内部有<code>孔</code>的情况：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">      [<span class="number">101.0</span>, <span class="number">0.0</span>],</span><br><span class="line">      [<span class="number">101.0</span>, <span class="number">1.0</span>],</span><br><span class="line">      [<span class="number">100.0</span>, <span class="number">1.0</span>],</span><br><span class="line">      [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">100.8</span>, <span class="number">0.8</span>],</span><br><span class="line">      [<span class="number">100.8</span>, <span class="number">0.2</span>],</span><br><span class="line">      [<span class="number">100.2</span>, <span class="number">0.2</span>],</span><br><span class="line">      [<span class="number">100.2</span>, <span class="number">0.8</span>],</span><br><span class="line">      [<span class="number">100.8</span>, <span class="number">0.8</span>]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/Polygons2.jpg" alt></p><h3 id="MultiPoints"><a href="#MultiPoints" class="headerlink" title="MultiPoints"></a>MultiPoints</h3><p><code>MultiPoints</code> 的坐标是一个<code>位置数组</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"MultiPoint"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">    [<span class="number">101.0</span>, <span class="number">1.0</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/MultiPoints.jpg" alt></p><h3 id="MultiLineStrings"><a href="#MultiLineStrings" class="headerlink" title="MultiLineStrings"></a>MultiLineStrings</h3><p><code>Multilinestring</code> 的坐标是一个 ”<code>LineString 坐标数组</code>“组成的数组:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"MultiLineString"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">      [<span class="number">101.0</span>, <span class="number">1.0</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">102.0</span>, <span class="number">2.0</span>],</span><br><span class="line">      [<span class="number">103.0</span>, <span class="number">3.0</span>]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/MultiLineStrings.jpg" alt></p><h3 id="MultiPolygons"><a href="#MultiPolygons" class="headerlink" title="MultiPolygons"></a>MultiPolygons</h3><p><code>MultiPolygons</code> 的坐标是”<code>Polygon 坐标数组</code>“组成的数组:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">  <span class="attr">"coordinates"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">102.0</span>, <span class="number">2.0</span>],</span><br><span class="line">        [<span class="number">103.0</span>, <span class="number">2.0</span>],</span><br><span class="line">        [<span class="number">103.0</span>, <span class="number">3.0</span>],</span><br><span class="line">        [<span class="number">102.0</span>, <span class="number">3.0</span>],</span><br><span class="line">        [<span class="number">102.0</span>, <span class="number">2.0</span>]</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">        [<span class="number">101.0</span>, <span class="number">0.0</span>],</span><br><span class="line">        [<span class="number">101.0</span>, <span class="number">1.0</span>],</span><br><span class="line">        [<span class="number">100.0</span>, <span class="number">1.0</span>],</span><br><span class="line">        [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">      ],</span><br><span class="line">      [</span><br><span class="line">        [<span class="number">100.2</span>, <span class="number">0.2</span>],</span><br><span class="line">        [<span class="number">100.2</span>, <span class="number">0.8</span>],</span><br><span class="line">        [<span class="number">100.8</span>, <span class="number">0.8</span>],</span><br><span class="line">        [<span class="number">100.8</span>, <span class="number">0.2</span>],</span><br><span class="line">        [<span class="number">100.2</span>, <span class="number">0.2</span>]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/MultiPolygons.jpg" alt></p><h3 id="GeometryCollections"><a href="#GeometryCollections" class="headerlink" title="GeometryCollections"></a>GeometryCollections</h3><p><code>Geometrycollection</code> 的“ <code>Geometry</code>”数组中的每个元素都是上面描述的<code>几何对象</code>之一:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"GeometryCollection"</span>,</span><br><span class="line">  <span class="attr">"geometries"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Point"</span>,</span><br><span class="line">      <span class="attr">"coordinates"</span>: [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="attr">"coordinates"</span>: [</span><br><span class="line">        [<span class="number">101.0</span>, <span class="number">0.0</span>],</span><br><span class="line">        [<span class="number">102.0</span>, <span class="number">1.0</span>]</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者：使用<a href="http://geojson.io/绘制图形如下：" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.io/绘制图形如下：</a></p><p><img src="/posts/22f1fd78/GeometryCollections.jpg" alt></p><h2 id="附录-B-对之前-GeoJSON-格式规范的修改"><a href="#附录-B-对之前-GeoJSON-格式规范的修改" class="headerlink" title="附录 B. 对之前 GeoJSON 格式规范的修改"></a>附录 B. 对之前 GeoJSON 格式规范的修改</h2><p>本附录简要总结了 2008 规范<a href="https://tools.ietf.org/html/rfc7946#ref-GJ2008" target="_blank" rel="external nofollow noopener noreferrer">GJ2008</a>中的非编辑性变更。</p><h3 id="规范更改"><a href="#规范更改" class="headerlink" title="规范更改"></a>规范更改</h3><ul><li>取消了坐标参考系统的规格，即不再使用<a href="https://tools.ietf.org/html/rfc7946#ref-GJ2008" target="_blank" rel="external nofollow noopener noreferrer">GJ2008</a>的“ <code>crs</code>”成员。</li><li>在没有高程值的情况下，对高度或深度敏感的应用程序应将<code>第三个位置</code>解释为在当地的地面或海平面(见<a href="https://tools.ietf.org/html/rfc7946#section-4" target="_blank" rel="external nofollow noopener noreferrer">第 4 节</a>)。</li><li>实现时不应扩展位置数组超过 <code>3</code> 个元素(参见<a href="https://tools.ietf.org/html/rfc7946#section-3.1.1" target="_blank" rel="external nofollow noopener noreferrer">3.1.1 节</a>)。</li><li>两个位置之间的直线是<code>笛卡尔坐标直线</code>(见<a href="https://tools.ietf.org/html/rfc7946#section-3.1.1" target="_blank" rel="external nofollow noopener noreferrer">3.1.1 节</a>)。</li><li>多边形环必须遵循<code>右手定位法则</code>(逆时针方向外环，顺时针内环)。</li><li>“ <code>bbox</code>”数组的值是“<code>[ west，south，east，north ]</code>” ，而不是“<code>[ minx，miny，maxx，maxy ]</code>”(参见<a href="https://tools.ietf.org/html/rfc7946#section-5" target="_blank" rel="external nofollow noopener noreferrer">第 5 节</a>)。</li><li><code>Feature</code> 对象的“ <code>id</code>”成员是一个字符串或数字(见<a href="https://tools.ietf.org/html/rfc7946#section-3.2" target="_blank" rel="external nofollow noopener noreferrer">第 3.2 节</a>)。</li><li>可以使用扩展，但不能改变 <code>GeoJSON 成员</code>和类型的语义(参见<a href="https://tools.ietf.org/html/rfc7946#section-6" target="_blank" rel="external nofollow noopener noreferrer">第 6 节</a>)。</li><li><code>GeoJSON 对象</code>不能包含其他类型的定义成员(参见<a href="https://tools.ietf.org/html/rfc7946#section-7.1" target="_blank" rel="external nofollow noopener noreferrer">第 7.1 节</a>)。</li><li><code>GeoJSON</code> 的媒体类型是“ <code>application / geo + json</code>”。</li></ul><h3 id="增加-GeoJSON-文本的定义"><a href="#增加-GeoJSON-文本的定义" class="headerlink" title="增加 GeoJSON 文本的定义"></a>增加 GeoJSON 文本的定义</h3><ul><li>添加了映射到 <code>geo’ URIs</code> 的规则。</li><li>增加了<code>I-JSON</code> <a href="https://tools.ietf.org/html/rfc7493" target="_blank" rel="external nofollow noopener noreferrer">RFC7493</a>限制的建议。</li><li>提醒实施者注意坐标精度过高对<code>互用性</code>的影响。</li><li>注意到几何集合的<code>互用性</code>问题。 这些对象应该谨慎使用(见<a href="https://tools.ietf.org/html/rfc7946#section-3.1.8" target="_blank" rel="external nofollow noopener noreferrer">3.1.8 节</a>)。</li></ul><h2 id="附录-C-GeoJSON-文本序列"><a href="#附录-C-GeoJSON-文本序列" class="headerlink" title="附录 C. GeoJSON 文本序列"></a>附录 C. GeoJSON 文本序列</h2><p>在这个规范中定义的所有 <code>GeoJSON 对象</code>—— <code>FeatureCollection</code>、 <code>Feature</code> 和 <code>Geometry</code> ——只包含一个 <code>JSON 对象</code>。 然而，在某些情况下，应用程序可能需要表示这些对象的集合或序列(超过在 <code>FeatureCollection</code> 中对 <code>Feature</code> 对象的分组) ，例如，为了有效地“<code>stream</code>”大量的 <code>Feature</code> 对象。 这种集合或序列的定义超出了本规范的范围。</p><p>如果需要这样的表示，则需要能够表示这些集合或序列的新媒体类型。 在定义这样的媒体类型时，基于“ <code>JSON 文本序列(JSON)</code>”<a href="https://tools.ietf.org/html/rfc7464" target="_blank" rel="external nofollow noopener noreferrer">RFC7464</a>可能是有用的，这样规范就不需要考虑如何表示多个<code>JSON 对象</code>，只需定义它如何应用于<code>GeoJSON 对象</code>。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>在 2015 年 10 月之前，<code>GeoJSON 格式</code>是<code>GeoJSON 邮件列表</code>的讨论结果，在 2015 年 10 月之后，在<code>IETF</code>的 <code>GeoJSON 工作组</code> 中，<code>GeoJSON 格式</code>是 <a href="http://lists.GeoJSON.org/listinfo.cgi/" target="_blank" rel="external nofollow noopener noreferrer">http://lists.GeoJSON.org/listinfo.cgi/</a> ，<code>GeoJSON-GeoJSON.org</code> 的讨论结果。</p><p>本文档中的材料是根据 <a href="http://geojson.org/geojson-spec.html" target="_blank" rel="external nofollow noopener noreferrer">http://geojson.org/geojson-spec.html</a> 修改而来的，<a href="http://creativecommons.org/licenses/by/3.0/us/" target="_blank" rel="external nofollow noopener noreferrer">http://creativecommons.org/licenses/by/3.0/us/</a> 授权许可。</p><h2 id="作者联系方式"><a href="#作者联系方式" class="headerlink" title="作者联系方式"></a>作者联系方式</h2><ul><li><p>Howard Butler<br>Hobu Inc.</p><p>Email: <a href="mailto:howard@hobu.co" rel="external nofollow noopener noreferrer" target="_blank">howard@hobu.co</a></p></li><li><p>Martin Daly<br>Cadcorp</p><p>Email: <a href="mailto:martin.daly@cadcorp.com" rel="external nofollow noopener noreferrer" target="_blank">martin.daly@cadcorp.com</a></p></li><li><p>Allan Doyle</p><p>Email: <a href="mailto:adoyle@intl-interfaces.com" rel="external nofollow noopener noreferrer" target="_blank">adoyle@intl-interfaces.com</a></p></li><li><p>Sean Gillies<br>Mapbox</p><p>Email: <a href="mailto:sean.gillies@gmail.com" rel="external nofollow noopener noreferrer" target="_blank">sean.gillies@gmail.com</a><br>URI: <a href="http://sgillies.net" target="_blank" rel="external nofollow noopener noreferrer">http://sgillies.net</a></p></li><li><p>Stefan Hagen<br>Rheinaustr. 62<br>Bonn 53225<br>Germany</p><p>Email: <a href="mailto:stefan@hagen.link" rel="external nofollow noopener noreferrer" target="_blank">stefan@hagen.link</a><br>URI: <a href="http://stefan-hagen.website/" target="_blank" rel="external nofollow noopener noreferrer">http://stefan-hagen.website/</a></p></li><li><p>Tim Schaub<br>Planet Labs</p><p>Email: <a href="mailto:tim.schaub@gmail.com" rel="external nofollow noopener noreferrer" target="_blank">tim.schaub@gmail.com</a></p></li></ul><h2 id="翻译完成"><a href="#翻译完成" class="headerlink" title="翻译完成"></a>翻译完成</h2><p>翻译工作大部分是机翻完成，然后根据自己的理解做了修改和补充。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6瓦片地图加载</title>
      <link href="/posts/9190e623.html"/>
      <url>/posts/9190e623.html</url>
      
        <content type="html"><![CDATA[<p>在之前的实例中设置图层的 <code>source</code> 属性时，可以发现经常用<code>ol.source.OSM()</code>或 <code>ol.source.BingMaps()</code>来创建图层的源。之所以加载源这么简单，是因为 OpenLayers 库中对 OSM（<a href="https://www.openstreetmap.org/" target="_blank" rel="external nofollow noopener noreferrer">OpenStreetMap 地图</a>）和 BingMap（<a href="https://www.bing.com/maps/" target="_blank" rel="external nofollow noopener noreferrer">必应地图</a>）这类的国际比较常用的地图加载做了封装。但是 OpenLayers 不可能对所有的地图厂商都进行封装，这时候就需要自己手动拼接字符串来加载瓦片地图。绝大多数的瓦片地图都是用的大致相同的规律来加载的，这就使手动拼接字符串简单了许多。</p><a id="more"></a><h2 id="LOD"><a href="#LOD" class="headerlink" title="LOD"></a>LOD</h2><p>介绍瓦片地图之前，首先应该了解 <code>LOD</code>（<code>Levels of Detail</code>），意思是<code>多细节层次</code>。这是一种常用的游戏优化技术，按照模型的位置和重要程度来决定渲染时的资源分配，把非重要物体的面数和细节度降低，在渲染时就能更加高效。</p><p>在地图中，<code>LOD</code> 的概念也很重要，比如观察国家层次的地图时，街道信息就是我们不想要了解的信息。而且如果街道信息全部加载，地图一定非常的辣眼睛，设备也不一定能带的动。所以在不同的高度观察地图时，所需要展示信息的细节类型和程度都应该是不同的。所以对于同一个地点来说，在鼠标滚轮放大缩小处在不同层级时，其实是在眼皮底下完成了图片替换。</p><p>为了便于理解 <code>GIS</code> 系统中“层级的不同就是图片不同”这个概念，使用 google 的在线瓦片地图来说明。在为最小层级 <code>0</code> 的情况下，只使用了 <code>1</code> 张 <code>256×256</code> 像素的图片来表示整个地球平面：</p><p><img src="/posts/9190e623/0-0-0.png" alt></p><p>放大一个层级，为 <code>1</code> 的时候，用了 4 张 <code>256×256</code> 像素的图片来表示整个地球：</p><p><img src="/posts/9190e623/4map.jpg" alt="4map"></p><h2 id="瓦片计算"><a href="#瓦片计算" class="headerlink" title="瓦片计算"></a>瓦片计算</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>虽然瓦片地图其实是利用了 <code>LOD</code> 技术实现图片替换，但是由 google 地图的例子可以发现，示例的层级是 <code>0</code> 级和 <code>1</code> 级，所需要的图片数目是 <code>1</code> 和 <code>4</code>，也就是 <code>2^0</code> 和 <code>2^2</code>。如果层级越大，显示整个地球时所需要的<code>256×256</code> 像素的图片就越多，<code>n</code> 层的图片数为 <code>2^2n</code>，如下所示：</p><p><img src="/posts/9190e623/%E7%93%A6%E7%89%87%E5%88%87%E5%89%B2%EF%BC%88%E7%93%A6%E7%89%87%E9%87%91%E5%AD%97%E5%A1%94%EF%BC%89.jpg" alt></p><p>按照这个规律，如果层级为 <code>10</code>，那么显示全球时所需要 <code>256×256</code> 像素的图片数是 1048576，这个数目是非常大的，全部展示在浏览器是不现实的。但是不管你的屏幕分辨率是 <code>1920×1080</code> 还是 <code>1024×768</code>，一个浏览器的能同时显示的内容最大范围是固定的，所以只显示我们正在观察的这一张地图图片的附近若干张地图，就可以把屏幕全撑满，当移动或者放大缩小时，再加载当前中心位置附近的若干张，就实现了一个 <code>WEB</code> 地图。</p><p>日常中我们使用的网页地图，在大幅度移动或者缩放地图时，经常能够发现地图其实就是一张张加载出来，这种情况在网速不好的时候尤其明显，本质上就是新的地图图片正在加载。</p><h3 id="瓦片坐标"><a href="#瓦片坐标" class="headerlink" title="瓦片坐标"></a>瓦片坐标</h3><p>当瓦片处于 <code>n</code> 层的时候，瓦片数目是 <code>2^2n</code>，<code>x</code> 和 <code>y</code> 方向上都被切割成了 <code>2^n</code> 个。所以对于任何一个层级，都可以对它的瓦片像一个矩阵一样进行编号。<br>在 OpenLayers 的 <code>source</code> 中，有一个可以用于调试瓦片的源 <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_TileDebug-TileDebug.html" target="_blank" rel="external nofollow noopener noreferrer">ol.source.TileDebug</a>，结合 <code>OSM</code> 的地图源可以清晰的观察到瓦片的坐标，在地图网格中，<code>z</code> 是层级，<code>x</code> 是经度方向的瓦片位置，<code>y</code> 是纬度的方向的瓦片位置。</p><link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css" type="text/css"><script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"></script><script src="https://cdn.bootcss.com/proj4js/2.5.0/proj4.js"></script><center id="map1" style="height: 500px;margin-left: 50px;margin-right: 50px"></center><script type="text/javascript">    let osmSource = new ol.source.OSM();    let map1 = new ol.Map({    layers: [        // 加载Open Street Map地图      new ol.layer.Tile({        source: osmSource      }),      // 添加一个显示Open Street Map地图瓦片网格的图层      new ol.layer.Tile({        source: new ol.source.TileDebug({          projection: 'EPSG:3857',          tileGrid: osmSource.getTileGrid()        })      })    ],    target: 'map1',    view: new ol.View({      center: ol.proj.transform(           [114.3177223, 30.528461], 'EPSG:4326', 'EPSG:3857'),      zoom: 10    })});</script><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">    layers: [</span><br><span class="line"><span class="actionscript">      <span class="comment">// 添加Open Street Map地图图层</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line">        source: osmSource</span><br><span class="line">      &#125;),</span><br><span class="line"><span class="actionscript">      <span class="comment">// 添加一个显示Open Street Map地图瓦片网格的图层</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.TileDebug(&#123;</span></span><br><span class="line"><span class="actionscript">          projection: <span class="string">"EPSG:3857"</span>,</span></span><br><span class="line">          tileGrid: osmSource.getTileGrid()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line"><span class="actionscript">    target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 把经纬度转化为3857坐标系的坐标</span></span></span><br><span class="line">      center: ol.proj.transform(</span><br><span class="line">        [114.3177223, 30.528461],</span><br><span class="line"><span class="actionscript">        <span class="string">"EPSG:4326"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"EPSG:3857"</span></span></span><br><span class="line">      ),</span><br><span class="line">      zoom: 10</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="瓦片地图标准"><a href="#瓦片地图标准" class="headerlink" title="瓦片地图标准"></a>瓦片地图标准</h2><p>在地图服务中，比较常用的两个标准如下：</p><h3 id="WMTS"><a href="#WMTS" class="headerlink" title="WMTS"></a>WMTS</h3><p><a href="https://www.opengeospatial.org/standards/wmts" target="_blank" rel="external nofollow noopener noreferrer">WMTS</a>（Web Map Tile Service），是由<a href="https://www.opengeospatial.org/" target="_blank" rel="external nofollow noopener noreferrer">OGC</a>（Open Geospatial Consortium）制定的网页地图瓦片服务标准，标准中，原点在左上角（西北角），<code>x</code> 向右（东）为正方向，<code>y</code> 向下（南）为正方向。这也是 OpenLayers 中 <a href="https://openlayers.org/en/latest/apidoc/module-ol_source_XYZ-XYZ.html" target="_blank" rel="external nofollow noopener noreferrer">ol.source.XYZ</a> 使用的标准。</p><p><img src="/posts/9190e623/WMTS.jpg" alt></p><h3 id="TMS"><a href="#TMS" class="headerlink" title="TMS"></a>TMS</h3><p><a href="https://wiki.osgeo.org/wiki/Tile_Map_Service_Specification" target="_blank" rel="external nofollow noopener noreferrer">TMS</a>（Tile Map Service），是由<a href="https://osgeo.org/" target="_blank" rel="external nofollow noopener noreferrer">OSGeo</a>（Open Source Geospatial Foundation）制定的地图瓦片服务标准，标准中，原点在左下角（西南角），<code>x</code> 向右（东）为正方向，<code>y</code>向上（北）为正方向。</p><p><img src="/posts/9190e623/TMS.png" alt></p><h2 id="自定义瓦片地图加载"><a href="#自定义瓦片地图加载" class="headerlink" title="自定义瓦片地图加载"></a>自定义瓦片地图加载</h2><h3 id="ol-source-XYZ"><a href="#ol-source-XYZ" class="headerlink" title="ol.source.XYZ"></a>ol.source.XYZ</h3><p>国内常用的一些 WEB 地图并没有被 OpenLayer 官方封装，但是 OpenLayers 中有一个<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_XYZ-XYZ.html" target="_blank" rel="external nofollow noopener noreferrer">ol.source.XYZ</a>对象，<code>ol.source.XYZ</code> 对象的 <code>url</code>属性 API 如下</p><blockquote><p>URL template. Must include <code>{x}</code>, <code>{y}</code> or <code>{-y}</code>, and <code>{z}</code> placeholders. A <code>{?-?}</code> template pattern, for example <code>subdomain{a-f}.domain.com</code>, may be used instead of defining each one separately in the <code>urls</code> option.</p></blockquote><p>翻译一下：</p><blockquote><p>URL 模板。必须包含<code>{x}</code>, <code>{y}</code> 或<code>{-y}</code>, 和<code>{z}</code> 占位符。一个<code>{?-?}</code>模板模式，比如<code>{a-f}.domain.com</code>。可以直接返回 <code>url</code> 代替定义 <code>urls</code> 属性。</p></blockquote><p>有了这个 <code>url</code> 模板字符串，就可以很轻松的自定义一个 <code>url</code> 模板来读取各厂家地图。</p><h4 id="高德地图示例"><a href="#高德地图示例" class="headerlink" title="高德地图示例"></a>高德地图示例</h4><p>比如常用的<a href="https://www.amap.com/" target="_blank" rel="external nofollow noopener noreferrer">高德地图</a>，关于高德地图的服务地址规则可以参考下面这篇简书博客《<a href="https://www.jianshu.com/p/e34f85029fd7" target="_blank" rel="external nofollow noopener noreferrer">高德 WMTS 瓦片地图服务地图图源规律</a>》，分析一个典型的高德地图瓦片请求：</p><blockquote><p><a href="https://wprd02.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=54658&amp;y=26799&amp;z=16&amp;scl=1&amp;ltype=1" target="_blank" rel="external nofollow noopener noreferrer">https://wprd02.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=54658&amp;y=26799&amp;z=16&amp;scl=1&amp;ltype=1</a></p></blockquote><p>分析这个请求，<code>protocol</code> 是 <code>https</code>，<code>hostname</code> 是 <code>wprd02.is.autonavi.com</code>，<code>path</code> 中的<code>/appmaptile</code> 代表瓦片，<code>query</code> 中参数效果如下：</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>hostname</td><td>目前还没有找出规律(webst、webrd、wpst、wprd)</td></tr><tr><td>lang</td><td>可以通过 zh_cn 设置中文，en 设置英文</td></tr><tr><td>style</td><td>地图类型控制，6（卫星图），7（简图），8（透明带道路详图）</td></tr><tr><td>scl</td><td>尺寸控制，1=256,2=512</td></tr><tr><td>ltype</td><td>线性控制，增加后，只对地图要素进行控制，没有文字注记，要素多少，是否透明</td></tr></tbody></table><p>知道了上述参数后，就可以很方便的来构造高德地图的 <code>URL</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 高德地图层</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> aMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">      url:</span><br><span class="line"><span class="actionscript">        <span class="string">"http://webrd0&#123;1-4&#125;.is.autonavi.com/appmaptile?x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;size=1&amp;scale=1&amp;style=7"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">    layers: [</span><br><span class="line">      aMapLayer,</span><br><span class="line"><span class="actionscript">      <span class="comment">// 添加一个显示高德地图瓦片网格的图层</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.TileDebug(&#123;</span></span><br><span class="line"><span class="actionscript">          projection: <span class="string">"EPSG:3857"</span>,</span></span><br><span class="line">          tileGrid: aMapSource.getTileGrid()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 设置武汉为地图中心</span></span></span><br><span class="line">      center: [114.3177223, 30.528461],</span><br><span class="line"><span class="actionscript">      projection: <span class="string">"EPSG:4326"</span>,</span></span><br><span class="line">      zoom: 10</span><br><span class="line">    &#125;),</span><br><span class="line"><span class="actionscript">    target: <span class="string">"map"</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>形成的地图如下所示：</p><center id="map2" style="height: 500px;margin-left: 50px;margin-right: 50px"></center><script type="text/javascript">    let aMapSource = new ol.source.XYZ({            url: 'http://webrd0{1-4}.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&size=1&scale=1&style=7'        });    // 高德地图层    let aMapLayer = new ol.layer.Tile({        source: aMapSource    });    let map2 = new ol.Map({            layers: [                aMapLayer,                // 添加一个显示高德地图瓦片网格的图层                new ol.layer.Tile({                  source: new ol.source.TileDebug({                    projection: "EPSG:3857",                    tileGrid: aMapSource.getTileGrid()                  })                }),            ],            view: new ol.View({                // 设置武汉为地图中心                center: [114.3177223, 30.528461],                projection: 'EPSG:4326',                zoom: 10            }),            target: 'map2'      });</script><h3 id="ol-source-TileImage"><a href="#ol-source-TileImage" class="headerlink" title="ol.source.TileImage"></a>ol.source.TileImage</h3><p>并不是所有的厂家的地图像 OpenLayers 或者高德地图那样按照 <code>WMTS</code> 标准，比如百度地图的坐标系，原点在地图中心位置，向右为 <code>x</code> 正方向，向上为 <code>y</code> 正方向，而且分辨率也和 OpenLayers 的分辨率不同，此时就需要更基础的<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_TileImage-TileImage.html" target="_blank" rel="external nofollow noopener noreferrer">ol.source.TileImage</a>来加载地图。主要需要的两个属性是<a href="https://openlayers.org/en/latest/apidoc/module-ol_tilegrid_TileGrid-TileGrid.html" target="_blank" rel="external nofollow noopener noreferrer">tileGrid</a>（瓦片网格）和<a href="https://openlayers.org/en/latest/apidoc/module-ol_Tile.html#~LoadFunction" target="_blank" rel="external nofollow noopener noreferrer">tileUrlFunction</a>（瓦片 URL 函数）。</p><h4 id="百度地图示例"><a href="#百度地图示例" class="headerlink" title="百度地图示例"></a>百度地图示例</h4><p>百度地图坐标系和 Openlayers 默认坐标系的主要区别是：</p><ul><li>原点：百度坐标系原点在地图中心，OpenLayers 默认坐标系在地图左上角（西北角）；</li><li>y 方向：百度地图向上（北）为正方向，OpenLayers 默认坐标系向（下）南为正方向；</li><li>网格分辨率：百度地图每一层级网格的分辨率与 OpenLayers 默认不同；</li><li>投影格式：百度地图投影格式为 <a href="https://github.com/openlayers/openlayers/issues/3522" target="_blank" rel="external nofollow noopener noreferrer">BD-MC</a>，OpenLayers 默认为 <code>EPSG:3857</code>；</li></ul><p>首先看<a href="http://lbsyun.baidu.com/index.php?title=jspopular3.0" target="_blank" rel="external nofollow noopener noreferrer">百度地图瓦片链接</a>，这个链接是百度地图开发者平台的<code>Javascript API</code>，里面有一个地图展示的 demo。如下图所示，打开控制台<code>Network</code>，筛选请求为<code>img</code>，然后随便在地图上拖动或者放大缩小，就会发现左下方列表里请求了新的瓦片图片。</p><p><img src="/posts/9190e623/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%93%A6%E7%89%87.jpg" alt="百度地图瓦片"></p><blockquote><p><a href="http://maponline1.bdimg.com/tile/?qt=vtile&amp;x=787&amp;y=294&amp;z=12&amp;styles=pl&amp;scaler=1&amp;udt=20200211" target="_blank" rel="external nofollow noopener noreferrer">http://maponline1.bdimg.com/tile/?qt=vtile&amp;x=787&amp;y=294&amp;z=12&amp;styles=pl&amp;scaler=1&amp;udt=20200211</a></p></blockquote><p>分析这个请求，<code>protocol</code> 是 <code>http</code>，<code>hostname</code>是 <code>maponline1.bdimg.com</code>，<code>path</code> 中的<code>/tile</code> 代表瓦片，<code>query</code> 是最关键的，<code>x=787&amp;y=294&amp;z=12</code> 说明 <code>x&gt;y&gt;z</code> 就是百度瓦片地图的模板字符串顺序。</p><p>加载百度地图代码如下：</p><ul><li>原点：在 <a href="https://openlayers.org/en/latest/apidoc/module-ol_tilegrid_TileGrid-TileGrid.html" target="_blank" rel="external nofollow noopener noreferrer">ol.tilegrid.TileGrid</a> 设置 <code>origin</code> 坐标为<code>[0, 0]</code>，也就是地图中央。</li><li>分辨率：根据百度地图网格分辨率规律递归计算出了一个<a href="http://anzhihun.coding.me/ol3-primer/ch05/05-03.html" target="_blank" rel="external nofollow noopener noreferrer">分辨率数组</a>，赋给了 <code>ol.tilegrid.TileGrid</code> 的 <code>resolutions</code>。</li><li>投影方式：百度地图使用的投影格式为<a href="https://github.com/openlayers/openlayers/issues/3522" target="_blank" rel="external nofollow noopener noreferrer">BD-MC</a>，使用 <code>proj4</code> 定义了 <code>BD-MC</code> 的投影，并 <a href="https://openlayers.org/en/latest/apidoc/module-ol_proj_proj4.html#.register" target="_blank" rel="external nofollow noopener noreferrer">ol.proj.proj4.register(proj4)</a>注册给了 OpenLayers。</li><li>xyz：在瓦片 URL 返回函数 tileUrlFunction 中，把<a href="https://github.com/openlayers/openlayers/issues/10535" target="_blank" rel="external nofollow noopener noreferrer">y 坐标+1</a>并加一个负号；再把所有为负数的 <code>x</code> 和 <code>y</code>的<code>负号</code>换为 <code>M</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"height: 100%;width: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  proj4.defs(<span class="string">"EPSG:4008"</span>, <span class="string">"+proj=longlat +ellps=clrk66 +no_defs"</span>);</span></span><br><span class="line"><span class="actionscript">  proj4.defs(<span class="string">"BD-MC"</span>, <span class="string">"+proj=merc +lon_0=0 +units=m +ellps=clrk66 +no_defs"</span>);</span></span><br><span class="line">  ol.proj.proj4.register(proj4);</span><br><span class="line"><span class="actionscript">  <span class="comment">// 自定义分辨率和瓦片坐标系</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> resolutions = [];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> maxZoom = <span class="number">18</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 计算百度使用的分辨率</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= maxZoom; i++) &#123;</span></span><br><span class="line"><span class="javascript">    resolutions[i] = <span class="built_in">Math</span>.pow(<span class="number">2</span>, maxZoom - i);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> tilegrid = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span></span><br><span class="line"><span class="actionscript">    origin: [<span class="number">0</span>, <span class="number">0</span>], <span class="comment">// 设置原点坐标</span></span></span><br><span class="line"><span class="actionscript">    resolutions: resolutions <span class="comment">// 设置分辨率</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建百度地图的数据源</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> baiduSource = <span class="keyword">new</span> ol.source.TileImage(&#123;</span></span><br><span class="line"><span class="actionscript">    projection: <span class="string">"BD-MC"</span>,</span></span><br><span class="line">    tileGrid: tilegrid,</span><br><span class="line"><span class="actionscript">    tileUrlFunction: <span class="function"><span class="keyword">function</span><span class="params">(tileCoord, pixelRatio, proj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> y = tileCoord[<span class="number">2</span>] + <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 百度瓦片服务url将负数使用M前缀来标识</span></span></span><br><span class="line">      if (x &lt; 0) &#123;</span><br><span class="line"><span class="actionscript">        x = <span class="string">"M"</span> + -x;</span></span><br><span class="line">      &#125;</span><br><span class="line">      y = -y;</span><br><span class="line">      if (y &lt; 0) &#123;</span><br><span class="line"><span class="actionscript">        y = <span class="string">"M"</span> + -y;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">3</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> (</span></span><br><span class="line"><span class="actionscript">        <span class="string">"http://maponline"</span> +</span></span><br><span class="line">        num +</span><br><span class="line"><span class="actionscript">        <span class="string">".bdimg.com//onlinelabel/?qt=vtile&amp;x="</span> +</span></span><br><span class="line">        x +</span><br><span class="line"><span class="actionscript">        <span class="string">"&amp;y="</span> +</span></span><br><span class="line">        y +</span><br><span class="line"><span class="actionscript">        <span class="string">"&amp;z="</span> +</span></span><br><span class="line">        z +</span><br><span class="line"><span class="actionscript">        <span class="string">"&amp;styles=pl&amp;udt=20200211&amp;scaler=1&amp;p=0"</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="comment">// 百度地图层</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> baiduMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line">    source: baiduSource</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">    layers: [baiduMapLayer],</span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 设置武汉为地图中心</span></span></span><br><span class="line"><span class="actionscript">      center: ol.proj.transform([<span class="number">114.3177223</span>, <span class="number">30.528461</span>], <span class="string">"EPSG:4326"</span>, <span class="string">"BD-MC"</span>),</span></span><br><span class="line">      zoom: 10</span><br><span class="line">    &#125;),</span><br><span class="line"><span class="actionscript">    target: <span class="string">"map"</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><center id="map3" style="height: 500px;margin-left: 50px;margin-right: 50px"></center><script>  proj4.defs('EPSG:4008', '+proj=longlat +ellps=clrk66 +no_defs')  proj4.defs('BD-MC', '+proj=merc +lon_0=0 +units=m +ellps=clrk66 +no_defs')  ol.proj.proj4.register(proj4);  // 自定义分辨率和瓦片坐标系  let resolutions = [];  let maxZoom = 18;  // 计算百度使用的分辨率  for (let i = 0; i <= maxZoom; i++) {    resolutions[i] = Math.pow(2, maxZoom - i);  }  let tilegrid = new ol.tilegrid.TileGrid({    origin: [0, 0], // 设置原点坐标    resolutions: resolutions // 设置分辨率  });  // 创建百度地图的数据源  let baiduSource = new ol.source.TileImage({    projection: 'BD-MC',    tileGrid: tilegrid,    tileUrlFunction: function (tileCoord, pixelRatio, proj) {      let z = tileCoord[0];      let x = tileCoord[1];      let y = tileCoord[2] + 1;      // 百度瓦片服务url将负数使用M前缀来标识      if (x < 0) {        x = 'M' + (-x);      }      y = -y;      if (y < 0) {        y = 'M' + (-y);      }      let num = Math.ceil(Math.random() * 3);      return "http://maponline" + num + ".bdimg.com//onlinelabel/?qt=vtile&x=" + x + "&y=" + y + "&z=" + z + "&styles=pl&udt=20200211&scaler=1&p=0";    }  });  // 百度地图层  let baiduMapLayer = new ol.layer.Tile({    source: baiduSource  });  // 创建地图  new ol.Map({    layers: [      baiduMapLayer,    ],    view: new ol.View({      // 设置武汉为地图中心      center: ol.proj.transform([114.3177223, 30.528461], 'EPSG:4326', 'BD-MC'),      zoom: 10    }),    target: 'map3'  });</script><h3 id="需要解密的瓦片地图"><a href="#需要解密的瓦片地图" class="headerlink" title="需要解密的瓦片地图"></a>需要解密的瓦片地图</h3><h4 id="谷歌地图示例"><a href="#谷歌地图示例" class="headerlink" title="谷歌地图示例"></a>谷歌地图示例</h4><p>首先说明因为地图服务商也是要恰饭的，所以建议大家最遵守版权和数据申明，通过申请开发者 API 合理合法的方式使用。</p><p>下面分析 google 加密后的地图 <code>url</code> 链接，加载 google 瓦片地图，通过调试工具拿到 <code>url</code> 如下：</p><blockquote><p><a href="https://www.google.com/maps/vt/pb=!1m4!1m3!1i8!2i211!3i105!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0" target="_blank" rel="external nofollow noopener noreferrer">https://www.google.com/maps/vt/pb=!1m4!1m3!1i8!2i211!3i105!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0</a></p><p><a href="https://www.google.com/maps/vt/pb=!1m4!1m3!1i8!2i212!3i106!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0" target="_blank" rel="external nofollow noopener noreferrer">https://www.google.com/maps/vt/pb=!1m4!1m3!1i8!2i212!3i106!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0</a></p></blockquote><p>很明显，两个瓦片 <code>url</code> 区别是 <code>!2i</code> 后的 <code>211</code> 和 <code>212</code> 以及 <code>!3i</code> 后的 <code>105</code> 和 <code>106</code>，这就是 <code>x</code> 和 <code>y</code> 的位置。再缩放一下地图，就能发现 <code>!1i</code>后的 <code>8</code> 就是层级 <code>z</code>，所以就可以构造 <code>url</code>，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"height: 100%;width: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// google地图层</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> googleMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line">      url:</span><br><span class="line"><span class="actionscript">        <span class="string">"http://www.google.com/maps/vt/pb=!1m4!1m3!1i&#123;z&#125;!2i&#123;x&#125;!3i&#123;y&#125;!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">    layers: [googleMapLayer],</span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 设置武汉为地图中心</span></span></span><br><span class="line">      center: [114.3177223, 30.528461],</span><br><span class="line"><span class="actionscript">      projection: <span class="string">"EPSG:4326"</span>,</span></span><br><span class="line">      zoom: 10</span><br><span class="line">    &#125;),</span><br><span class="line"><span class="actionscript">    target: <span class="string">"map"</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><center id="map4" style="height: 500px;margin-left: 50px;margin-right: 50px"></center><script>    // google地图层    let googleMapLayer = new ol.layer.Tile({        source: new ol.source.XYZ({            url:'http://www.google.com/maps/vt/pb=!1m4!1m3!1i{z}!2i{x}!3i{y}!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0'        })    });    // 创建地图    let map = new ol.Map({        layers: [            googleMapLayer        ],        view: new ol.View({            // 设置成都为地图中心            center: [114.3177223, 30.528461],            projection: 'EPSG:4326',            zoom: 10        }),        target: 'map4'  });</script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Earthquakes Heatmap（地震热力图）</title>
      <link href="/posts/ba114d01.html"/>
      <url>/posts/ba114d01.html</url>
      
        <content type="html"><![CDATA[<p>分析 Earthquakes Heatmap 这个 demo，官网介绍是：</p><blockquote><p>This example parses a KML file and renders the features as a <code>ol/layer/Heatmap</code> layer.</p></blockquote><blockquote><p>这个示例解析了 KML 格式文件并作为一个热力图来渲染要素。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/heatmap-earthquakes.html?q=hot" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Earthquakes Heatmap</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：3 地图操作（二） &gt; 实例 14.实现一个地震热力图</p><a id="more"></a></li></ul><p><img src="/posts/ba114d01/heat.gif" alt="Earthquakes Heatmap"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>这个示例比较简单，地图的基本结构如下所示，<code>raster</code> 图层使用的是普通的 <code>toner</code> 碳粉地图， <code>vector</code> 矢量图层的定义见下节。在 DOM 中，添加两个 <code>range</code> 类型的 <code>input</code> 标签，用于控制热力图的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Earthquakes Heatmap(地震热力图)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>半径大小<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"radius"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"50"</span> <span class="attr">step</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>模糊大小<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"blur"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"50"</span> <span class="attr">step</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"15"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> raster = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 碳粉</span></span></span><br><span class="line"><span class="actionscript">          layer: <span class="string">"toner"</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [raster, vector],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Heatmap-矢量图层"><a href="#Heatmap-矢量图层" class="headerlink" title="Heatmap 矢量图层"></a>Heatmap 矢量图层</h2><p>关于 <code>ol.layer.Heatmap</code> 对象的<a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Heatmap-Heatmap.html" target="_blank" rel="external nofollow noopener noreferrer">API</a>如下图所示：</p><p><img src="/posts/ba114d01/heatmap.jpg" alt></p><p>除了 <code>source</code> 属性外，设置热力图最关键的几个属性是 <code>blur</code>（热力圆圈的模糊大小）、<code>radius</code>（热力圆圈的半径），还有一个 <code>weight</code> 权重属性。<code>weight</code> 属性是一个回调函数，入参是 <code>feature</code> 要素，返回的结果应该是一个范围为<code>[0, 1]</code>的的权重值，权重越大就越热。</p><p><code>blur</code> 和 <code>radius</code> 取得是两个 <code>input</code> 标签中的值。<code>source</code> 属性中的<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.html" target="_blank" rel="external nofollow noopener noreferrer">ol.layer.Vector</a>读取的是 KML 格式的 2012 年世界 5 级地震数据，所以所有的震级都是五点几，减去 <code>5</code> 后，自然会返回一个<code>[0, 1]</code>的的权重值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取控制半径和模糊按钮的dom</span></span><br><span class="line"><span class="keyword">let</span> blur = <span class="built_in">document</span>.getElementById(<span class="string">"blur"</span>);</span><br><span class="line"><span class="keyword">let</span> radius = <span class="built_in">document</span>.getElementById(<span class="string">"radius"</span>);</span><br><span class="line"><span class="keyword">let</span> vector = <span class="keyword">new</span> ol.layer.Heatmap(&#123;</span><br><span class="line">  source: <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">    url:</span><br><span class="line">      <span class="string">"https://openlayers.org/en/latest/examples/data/kml/2012_Earthquakes_Mag5.kml"</span>,</span><br><span class="line">    format: <span class="keyword">new</span> ol.format.KML(&#123;</span><br><span class="line">      extractStyles: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 模糊</span></span><br><span class="line">  blur: <span class="built_in">parseInt</span>(blur.value, <span class="number">10</span>),</span><br><span class="line">  <span class="comment">// 半径</span></span><br><span class="line">  radius: <span class="built_in">parseInt</span>(radius.value, <span class="number">10</span>),</span><br><span class="line">  <span class="comment">// 权重,应当返回一个[0,1]的权重值</span></span><br><span class="line">  weight: <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name = feature.get(<span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">let</span> magnitude = <span class="built_in">parseFloat</span>(name.substr(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 因为都是五点几级的地震,减去五后则为0-1之间的权重值</span></span><br><span class="line">    <span class="keyword">return</span> magnitude - <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>这里就是普通的事件回调，给两个 <code>input</code> 标签设置两个 <code>input</code> 和 <code>change</code> 事件绑定，触发时就会调用<a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Heatmap-Heatmap.html#setBlur" target="_blank" rel="external nofollow noopener noreferrer">setBlur</a>和<a href="https://openlayers.org/en/latest/apidoc/module-ol_layer_Heatmap-Heatmap.html#setRadius" target="_blank" rel="external nofollow noopener noreferrer">setRadius</a>方法给 <code>Heatmap</code> 设置 <code>blur</code> 和 <code>radius</code> 值，并同步到地图中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模糊按钮的回调函数</span></span><br><span class="line"><span class="keyword">let</span> blurHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  vector.setBlur(<span class="built_in">parseInt</span>(blur.value, <span class="number">10</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 绑定</span></span><br><span class="line">blur.addEventListener(<span class="string">"input"</span>, blurHandler);</span><br><span class="line">blur.addEventListener(<span class="string">"change"</span>, blurHandler);</span><br><span class="line"><span class="comment">// 半径按钮的回调函数</span></span><br><span class="line"><span class="keyword">let</span> radiusHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  vector.setRadius(<span class="built_in">parseInt</span>(radius.value, <span class="number">10</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 绑定</span></span><br><span class="line">radius.addEventListener(<span class="string">"input"</span>, radiusHandler);</span><br><span class="line">radius.addEventListener(<span class="string">"change"</span>, radiusHandler);</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Earthquakes Heatmap(地震热力图)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>半径大小<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"radius"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"50"</span> <span class="attr">step</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>模糊大小<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"blur"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"50"</span> <span class="attr">step</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"15"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取控制半径和模糊按钮的dom</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> blur = <span class="built_in">document</span>.getElementById(<span class="string">"blur"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> radius = <span class="built_in">document</span>.getElementById(<span class="string">"radius"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vector = <span class="keyword">new</span> ol.layer.Heatmap(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line">          url:</span><br><span class="line"><span class="actionscript">            <span class="string">"https://openlayers.org/en/latest/examples/data/kml/2012_Earthquakes_Mag5.kml"</span>,</span></span><br><span class="line"><span class="actionscript">          format: <span class="keyword">new</span> ol.format.KML(&#123;</span></span><br><span class="line"><span class="actionscript">            extractStyles: <span class="literal">false</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 模糊</span></span></span><br><span class="line"><span class="javascript">        blur: <span class="built_in">parseInt</span>(blur.value, <span class="number">10</span>),</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 半径</span></span></span><br><span class="line"><span class="javascript">        radius: <span class="built_in">parseInt</span>(radius.value, <span class="number">10</span>),</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 权重,应当返回一个[0,1]的权重值</span></span></span><br><span class="line"><span class="javascript">        weight: <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> name = feature.get(<span class="string">"name"</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> magnitude = <span class="built_in">parseFloat</span>(name.substr(<span class="number">2</span>));</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 因为都是五点几级的地震,减去五后则为0-1之间的权重值</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> magnitude - <span class="number">5</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> raster = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 碳粉</span></span></span><br><span class="line"><span class="actionscript">          layer: <span class="string">"toner"</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [raster, vector],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 模糊按钮的回调函数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> blurHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        vector.setBlur(<span class="built_in">parseInt</span>(blur.value, <span class="number">10</span>));</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 绑定</span></span></span><br><span class="line"><span class="actionscript">      blur.addEventListener(<span class="string">"input"</span>, blurHandler);</span></span><br><span class="line"><span class="actionscript">      blur.addEventListener(<span class="string">"change"</span>, blurHandler);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 半径按钮的回调函数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> radiusHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        vector.setRadius(<span class="built_in">parseInt</span>(radius.value, <span class="number">10</span>));</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 绑定</span></span></span><br><span class="line"><span class="actionscript">      radius.addEventListener(<span class="string">"input"</span>, radiusHandler);</span></span><br><span class="line"><span class="actionscript">      radius.addEventListener(<span class="string">"change"</span>, radiusHandler);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Earthquake Clusters（地震点聚合）</title>
      <link href="/posts/7b5b0d8c.html"/>
      <url>/posts/7b5b0d8c.html</url>
      
        <content type="html"><![CDATA[<p>分析 Earthquake Clusters 这个 demo，官网介绍是：</p><blockquote><p>This example parses a KML file and renders the features as clusters on a vector layer. The styling in this example is quite involved. Single earthquake locations (rendered as stars) have a size relative to their magnitude. Clusters have an opacity relative to the number of features in the cluster, and a size that represents the extent of the features that make up the cluster. When clicking or hovering on a cluster, the individual features that make up the cluster will be shown.</p></blockquote><blockquote><p>To achieve this, we make heavy use of style functions.</p></blockquote><blockquote><p>本示例将解析 KML 文件并在矢量图层上将要素渲染成聚合点。在这个示例中的样式非常复杂。单个的地震点(被渲染成了星状)的大小与震级相关。聚合点的透明度与聚合点内要素的数量相关，并且聚合点的大小也代表着聚合点内要素的四至。当在聚合点上点击或者悬浮时，组成聚合点的各个要素就会被展示。</p></blockquote><blockquote><p>由于上述原因，我们大量使用了样式函数。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/earthquake-clusters.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Earthquake Clusters</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：6 要素 ol.feature 的使用 &gt; 实例 33.地震信息的要素聚合</p><a id="more"></a></li></ul><p><img src="/posts/7b5b0d8c/earthquake.gif" alt="Earthquake Clusters"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>地图的基本结构如下所示，<code>raster</code> 图层使用的是普通的 <code>toner</code> 碳粉地图，不一样的地方是 <code>vector</code> 矢量图层的定义。在 <code>source</code> 中使用了<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Cluster-Cluster.html" target="_blank" rel="external nofollow noopener noreferrer">ol.source.Cluster</a>，这个就是 OpenLayers 官方的点聚合源，<code>distance</code> 属性判定两个聚合点之间最小像素距离。在<code>source</code> 中的 <code>source</code> 属性里，<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.html" target="_blank" rel="external nofollow noopener noreferrer">ol.source.Vector</a>中 <code>url</code> 属性是数据源的链接，<code>format</code> 属性是根据数据源格式来设定。</p><p>这里最关键的是 <code>vector</code> 中 <code>style</code> 属性，样式是从 <code>styleFunction</code> 函数中返回的，这是整个地震点聚合的核心。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Earthquake Clusters(地震点聚合)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 矢量图层</span></span></span><br><span class="line"><span class="actionscript">      vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 数据源使用的是ol.source.Cluster</span></span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Cluster(&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 两个聚合点之间的最小像素距离</span></span></span><br><span class="line">          distance: 40,</span><br><span class="line"><span class="actionscript">          source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line">            url:</span><br><span class="line"><span class="actionscript">              <span class="string">"https://openlayers.org/en/latest/examples/data/kml/2012_Earthquakes_Mag5.kml"</span>,</span></span><br><span class="line"><span class="actionscript">            format: <span class="keyword">new</span> ol.format.KML(&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 不从KML文件中提取样式</span></span></span><br><span class="line"><span class="actionscript">              extractStyles: <span class="literal">false</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 样式从样式函数中返回</span></span></span><br><span class="line">        style: styleFunction</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 普通的碳粉地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> raster = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="actionscript">          layer: <span class="string">"toner"</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [raster, vector],</span><br><span class="line">        interactions: ol.interaction.defaults().extend([</span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="javascript">            condition: <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> evt.type == <span class="string">"pointermove"</span> || evt.type == <span class="string">"singleclick"</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 被选择到的要素的样式</span></span></span><br><span class="line">            style: selectStyleFunction</span><br><span class="line">          &#125;)</span><br><span class="line">        ]),</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>地图中还有一个不一样的地方是，数据源使用 KML 格式。KML 格式属于 XML 规范，文件里面是各种标签，笼统地说，在解析的时候标签名就是键名，标签里面的内容就是键值，如下所示，<code>name</code> 标签中存放就是地震震级、时间、地理位置等信息，<code>Point</code> 下的 <code>coordinates</code> 存放的是经纬度信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kml</span> <span class="attr">xmlns</span>=<span class="string">"http://earth.google.com/kml/2.0"</span> <span class="attr">xmlns:atom</span>=<span class="string">"http://www.w3.org/2005/Atom"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Document</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>2012 Earthquakes, Magnitude 5<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">atom:author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">atom:name</span>&gt;</span>U.S. Geological Survey<span class="tag">&lt;/<span class="name">atom:name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">atom:author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">atom:link</span> <span class="attr">href</span>=<span class="string">"http://earthquake.usgs.gov"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Folder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Magnitude 5<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Placemark</span> <span class="attr">id</span>=<span class="string">"2012 Jan 15 13:40:16.40 UTC"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>M 5.9 - 2012 Jan 15, SOUTH SHETLAND ISLANDS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">magnitude</span>&gt;</span>5.9<span class="tag">&lt;/<span class="name">magnitude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Point</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">coordinates</span>&gt;</span>-56.072,-60.975,0<span class="tag">&lt;/<span class="name">coordinates</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Point</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Placemark</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Placemark</span> <span class="attr">id</span>=<span class="string">"2012 Jan 19 06:48:48.75 UTC"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>M 5.9 - 2012 Jan 19, OFF W. COAST OF S. ISLAND, N.Z.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">magnitude</span>&gt;</span>5.9<span class="tag">&lt;/<span class="name">magnitude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Point</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">coordinates</span>&gt;</span>165.778,-46.686,0<span class="tag">&lt;/<span class="name">coordinates</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Point</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Placemark</span>&gt;</span></span><br><span class="line">            ...以下省略</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Folder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">kml</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="普通地震点样式"><a href="#普通地震点样式" class="headerlink" title="普通地震点样式"></a>普通地震点样式</h2><p>未聚合的普通地震点是一个五角星，五角星的尺寸与该点的地震震级大小正相关，如图所示。</p><p><img src="/posts/7b5b0d8c/star.jpg" alt="star"></p><p>具体实现时，是先创建好地震点的 <code>fill</code> 和 <code>stroke</code> 样式，再给每个点使用一个 <code>createEarthquakeStyle</code> 样式函数返回 <code>style</code>。通过裁剪字符串取到了地震震级后转换为 <code>radius</code>，震级越大，<code>radius</code> 越大。</p><p>最后返回<a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Style-Style.html" target="_blank" rel="external nofollow noopener noreferrer">ol.style.Style</a>的时候，<a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_Geometry-Geometry.html" target="_blank" rel="external nofollow noopener noreferrer">geometry</a>中存放位置信息，<a href="https://openlayers.org/en/latest/apidoc/module-ol_style_Image-ImageStyle.html" target="_blank" rel="external nofollow noopener noreferrer">image</a>中存放一个<a href="https://openlayers.org/en/latest/apidoc/module-ol_style_RegularShape-RegularShape.html" target="_blank" rel="external nofollow noopener noreferrer">ol.style.RegularShape</a>对象。这个 <code>RegularShape</code> 对象是 OpenLayers 为了便于快速绘制规则图形而加入的，把 <code>radius</code>、<code>earthquakeFill</code>、<code>earthquakeStroke</code> 传进去后就能返回一个完备的五角星 <code>style</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地震点fill样式</span></span><br><span class="line"><span class="keyword">let</span> earthquakeFill = <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">  color: <span class="string">"rgba(255, 153, 0, 0.8)"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 地震点stroke样式</span></span><br><span class="line"><span class="keyword">let</span> earthquakeStroke = <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">  color: <span class="string">"rgba(255, 204, 0, 0.2)"</span>,</span><br><span class="line">  width: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 创建地震点的样式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>feature 地震点的要素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: &#123;Object&#125; new ol.style.Style 地震点的样式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createEarthquakeStyle = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// name标签中存放的内容如下：&lt;name&gt;M 5.9 - 2012 Jan 19, OFF W. COAST OF S. ISLAND, N.Z.&lt;/name&gt;</span></span><br><span class="line">  <span class="comment">// 所以name存放的字符串如下：M 5.9 - 2012 Jan 19, OFF W. COAST OF S. ISLAND, N.Z.</span></span><br><span class="line">  <span class="keyword">let</span> name = feature.get(<span class="string">"name"</span>);</span><br><span class="line">  <span class="comment">// magnitude被转换成浮点数如下：5.9</span></span><br><span class="line">  <span class="keyword">let</span> magnitude = <span class="built_in">parseFloat</span>(name.substr(<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">let</span> radius = <span class="number">5</span> + <span class="number">20</span> * (magnitude - <span class="number">5</span>);</span><br><span class="line">  <span class="comment">// 该要素对应五角星的样式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    geometry: feature.getGeometry(),</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span><br><span class="line">      <span class="comment">// 内半径</span></span><br><span class="line">      radius1: radius,</span><br><span class="line">      <span class="comment">// 外半径</span></span><br><span class="line">      radius2: <span class="number">3</span>,</span><br><span class="line">      <span class="comment">// 5角形</span></span><br><span class="line">      points: <span class="number">5</span>,</span><br><span class="line">      <span class="comment">// 旋转角度</span></span><br><span class="line">      angle: <span class="built_in">Math</span>.PI,</span><br><span class="line">      <span class="comment">// fill和stroke样式</span></span><br><span class="line">      fill: earthquakeFill,</span><br><span class="line">      stroke: earthquakeStroke</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="计算地震点聚合信息"><a href="#计算地震点聚合信息" class="headerlink" title="计算地震点聚合信息"></a>计算地震点聚合信息</h2><p>先声明一个 <code>maxFeatureCount</code> 存放最多的聚合 <code>cluster</code> 中聚合地震点的数目，主要目的是用后后面计算聚合圆圈的透明度。获取到图层的的聚合点要素数组以后，迭代并在每个聚合点要素中获取原始的要素信息。</p><p>原始的要素信息主要有两个作用，一个是计算最大的聚合点中的原始要素数目，这个数目跟聚合点的透明度有关系，第二个是计算每个聚合点的<a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html" target="_blank" rel="external nofollow noopener noreferrer">四至</a>，利用这个四至和 <code>resolution</code>（每个像素代表多少米），就能计算聚合点的半径大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最多的聚合数，便于计算聚合圆圈的透明度</span></span><br><span class="line"><span class="keyword">let</span> maxFeatureCount;</span><br><span class="line"><span class="comment">// 矢量图层</span></span><br><span class="line"><span class="keyword">let</span> vector = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 计算聚合后的信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span>resolution 分辨率,一个像素代表多少米</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> calculateClusterInfo = <span class="function"><span class="params">resolution</span> =&gt;</span> &#123;</span><br><span class="line">  maxFeatureCount = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 获取图层中所有要素</span></span><br><span class="line">  <span class="keyword">let</span> features = vector.getSource().getFeatures();</span><br><span class="line">  <span class="keyword">let</span> feature, radius;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = features.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    feature = features[i];</span><br><span class="line">    <span class="comment">// 获取第i个要素中的所有features</span></span><br><span class="line">    <span class="keyword">let</span> originalFeatures = feature.get(<span class="string">"features"</span>);</span><br><span class="line">    <span class="comment">// 创建一个空的地图范围，四至，其实是一个数组</span></span><br><span class="line">    <span class="keyword">let</span> extent = ol.extent.createEmpty();</span><br><span class="line">    <span class="comment">// void 0 返回undefined</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="keyword">void</span> <span class="number">0</span>,</span><br><span class="line">      jj = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(j, jj);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>, jj = originalFeatures.length; j &lt; jj; ++j) &#123;</span><br><span class="line">      <span class="comment">// 不断地循环让四至变大</span></span><br><span class="line">      ol.extent.extend(extent, originalFeatures[j].getGeometry().getExtent());</span><br><span class="line">    &#125;</span><br><span class="line">    maxFeatureCount = <span class="built_in">Math</span>.max(maxFeatureCount, jj);</span><br><span class="line">    <span class="comment">// 半径是根据四至来算出来的</span></span><br><span class="line">    radius =</span><br><span class="line">      (<span class="number">0.25</span> * (ol.extent.getWidth(extent) + ol.extent.getHeight(extent))) /</span><br><span class="line">      resolution;</span><br><span class="line">    feature.set(<span class="string">"radius"</span>, radius);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="四至"><a href="#四至" class="headerlink" title="四至"></a>四至</h3><p>四至是地理学的名词，笼统说就是包含一个要素的最小矩形范围，可以用一个数组来表示<code>[minx, miny, maxx, maxy]</code>。</p><p>在迭代计算聚合点的四至时，是先<a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#.createEmpty" target="_blank" rel="external nofollow noopener noreferrer">ol.extent.createEmpty()</a>创建了一个空的四至，再使用<a href="https://openlayers.org/en/latest/apidoc/module-ol_extent.html#.extend" target="_blank" rel="external nofollow noopener noreferrer">ol.extent.extend()</a>使范围不断扩大，最终使 <code>extent</code> 中包含整个聚合点所有原始要素的四至。最后在计算半径的时候，获取 <code>extent</code> 的长度和宽度，除以 <code>resolution</code> 就能转变为像素数，就可以计算出像素半径。</p><h2 id="styleFunction-与-selectStyleFunction"><a href="#styleFunction-与-selectStyleFunction" class="headerlink" title="styleFunction 与 selectStyleFunction"></a>styleFunction 与 selectStyleFunction</h2><h3 id="styleFunction"><a href="#styleFunction" class="headerlink" title="styleFunction"></a>styleFunction</h3><p>做好了前文的各项准备之后，就能构造矢量图层的样式返回函数 <code>styleFunction</code>，这个函数可以获取到两个入参 <code>feature</code> 和 <code>resolution</code>。</p><p>resolution 使用的时候首先判断和之前保存的 <code>currentResolution</code> 是否一致，也就是判断有没有缩小或者放大地图。如果不一致需要调用 <code>calculateClusterInfo</code> 函数。重新来计算聚合点的原始要素数目和四至，也就是聚合点的透明度和半径大小。</p><p>feature 使用的时候首先要判断聚合点要素的原始要素数目。如果等于 1 就代表只有一个原始要素，就正常返回 <code>createEarthquakeStyle(originalFeature)</code>，也就是在地图上直接绘制一个五角星。</p><p>如果大于 1，就需要返回聚合点要素的样式，看代码可以发现，聚合点样式是使用<code>image</code> 和 <code>text</code> 来构造。<code>image</code> 构造出了一个圆圈，半径直接取 <code>calculateClusterInfo</code> 函数设置给要素的 <code>radius</code>，<code>rgba</code> 颜色中的透明度是使用 <code>maxFeatureCount</code> 计算得出。<code>text</code> 是圆圈上的文字，文字内容是每个聚合点要素的原始要素数目。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本fill样式</span></span><br><span class="line"><span class="keyword">let</span> textFill = <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">  color: <span class="string">"#fff"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 文本stroke样式</span></span><br><span class="line"><span class="keyword">let</span> textStroke = <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">  color: <span class="string">"rgba(0, 0, 0, 0.6)"</span>,</span><br><span class="line">  width: <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 保存上次调用时的resolution</span></span><br><span class="line"><span class="keyword">let</span> currentResolution;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 普通样式的返回函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature, resolution</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (resolution != currentResolution) &#123;</span><br><span class="line">    calculateClusterInfo(resolution);</span><br><span class="line">    currentResolution = resolution;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> style;</span><br><span class="line">  <span class="comment">// 这里的fill颜色的透明度通过当前要素的features数目size与maxFeatureCount的比值计算得到，越少越透明</span></span><br><span class="line">  <span class="keyword">let</span> size = feature.get(<span class="string">"features"</span>).length;</span><br><span class="line">  <span class="keyword">if</span> (size &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    style = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">      image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">        radius: feature.get(<span class="string">"radius"</span>),</span><br><span class="line">        fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">          color: [<span class="number">255</span>, <span class="number">153</span>, <span class="number">0</span>, <span class="built_in">Math</span>.min(<span class="number">0.8</span>, <span class="number">0.4</span> + size / maxFeatureCount)]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 文本样式</span></span><br><span class="line">      text: <span class="keyword">new</span> ol.style.Text(&#123;</span><br><span class="line">        text: size.toString(),</span><br><span class="line">        fill: textFill,</span><br><span class="line">        stroke: textStroke</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果只有一个要素,就返回普通地震点的样式</span></span><br><span class="line">    <span class="keyword">let</span> originalFeature = feature.get(<span class="string">"features"</span>)[<span class="number">0</span>];</span><br><span class="line">    style = createEarthquakeStyle(originalFeature);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> style;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="selectStyleFunction"><a href="#selectStyleFunction" class="headerlink" title="selectStyleFunction"></a>selectStyleFunction</h3><p>这个 <code>selectStyleFunction</code> 样式函数中返回的是当鼠标悬浮或者单击聚合点时的样式。在 <code>invisibleFill</code> 能够发现其实是把聚合点圆圈和文本的透明度设置成了 <code>0.01</code>，接近透明。</p><p>聚合点中原始要素的显示，是迭代每一个原始要素，使用 <code>createEarthquakeStyle</code> 函数 <code>push</code> 出一个 <code>style</code> 数组并返回，就能把聚合点中包含的所有五角星全都显示出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏状态时的fill样式</span></span><br><span class="line"><span class="keyword">let</span> invisibleFill = <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">  color: <span class="string">"rgba(255, 255, 255, 0.01)"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 地震聚合点被选中时的样式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>feature 要素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: styles 被选中后的样式数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> selectStyleFunction = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fill填充为透明</span></span><br><span class="line">  <span class="keyword">let</span> styles = [</span><br><span class="line">    <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">      image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">        radius: feature.get(<span class="string">"radius"</span>),</span><br><span class="line">        fill: invisibleFill</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> originalFeatures = feature.get(<span class="string">"features"</span>);</span><br><span class="line">  <span class="keyword">let</span> originalFeature;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = originalFeatures.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    originalFeature = originalFeatures[i];</span><br><span class="line">    <span class="comment">// 把每个feature点的样式push给数组</span></span><br><span class="line">    styles.push(createEarthquakeStyle(originalFeature));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> styles;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>最后贴存出全部代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Earthquake Clusters(地震点聚合)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 地震点fill样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> earthquakeFill = <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">        color: <span class="string">"rgba(255, 153, 0, 0.8)"</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 地震点stroke样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> earthquakeStroke = <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">        color: <span class="string">"rgba(255, 204, 0, 0.2)"</span>,</span></span><br><span class="line">        width: 1</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 文本fill样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> textFill = <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">        color: <span class="string">"#fff"</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 文本stroke样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> textStroke = <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">        color: <span class="string">"rgba(0, 0, 0, 0.6)"</span>,</span></span><br><span class="line">        width: 3</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 隐藏状态时的fill样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> invisibleFill = <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">        color: <span class="string">"rgba(255, 255, 255, 0.01)"</span></span></span><br><span class="line">      &#125;);</span><br><span class="line">      /**</span><br><span class="line">       * @description: 创建地震点的样式</span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Object</span>&#125; feature 地震点的要素</span></span><br><span class="line"><span class="javascript">       * @<span class="keyword">return</span>: &#123;<span class="built_in">Object</span>&#125; <span class="keyword">new</span> ol.style.Style 地震点的样式</span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> createEarthquakeStyle = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        // name标签中存放的内容如下：<span class="tag">&lt;<span class="name">name</span>&gt;</span>M 5.9 - 2012 Jan 19, OFF W. COAST OF S. ISLAND, N.Z.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 所以name存放的字符串如下：M 5.9 - 2012 Jan 19, OFF W. COAST OF S. ISLAND, N.Z.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> name = feature.get(<span class="string">"name"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// magnitude被转换成浮点数如下：5.9</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> magnitude = <span class="built_in">parseFloat</span>(name.substr(<span class="number">2</span>));</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> radius = <span class="number">5</span> + <span class="number">20</span> * (magnitude - <span class="number">5</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 该要素对应五角星的样式</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line">          geometry: feature.getGeometry(),</span><br><span class="line"><span class="actionscript">          image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span></span><br><span class="line">            radius1: radius,</span><br><span class="line">            radius2: 3,</span><br><span class="line">            points: 5,</span><br><span class="line"><span class="javascript">            angle: <span class="built_in">Math</span>.PI,</span></span><br><span class="line">            fill: earthquakeFill,</span><br><span class="line">            stroke: earthquakeStroke</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 最多的聚合数，便于计算聚合圆圈的透明度</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> maxFeatureCount;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 矢量图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vector = <span class="literal">null</span>;</span></span><br><span class="line">      /**</span><br><span class="line">       * @description: 计算聚合后的信息</span><br><span class="line">       * @param &#123;type&#125; resolution 分辨率,一个像素代表多少米</span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> calculateClusterInfo = <span class="function"><span class="params">resolution</span> =&gt;</span> &#123;</span></span><br><span class="line">        maxFeatureCount = 0;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取图层中所有要素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> features = vector.getSource().getFeatures();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> feature, radius;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = features.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span></span><br><span class="line">          feature = features[i];</span><br><span class="line"><span class="actionscript">          <span class="comment">// 获取第i个要素中的所有features</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> originalFeatures = feature.get(<span class="string">"features"</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 创建一个空的地图范围，四至，其实是一个数组</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> extent = ol.extent.createEmpty();</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// void 0 返回undefined</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> j = <span class="keyword">void</span> <span class="number">0</span>,</span></span><br><span class="line"><span class="actionscript">            jj = <span class="keyword">void</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(j, jj);</span></span><br><span class="line">          for (j = 0, jj = originalFeatures.length; j &lt; jj; ++j) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 不断地循环让四至变大</span></span></span><br><span class="line">            ol.extent.extend(</span><br><span class="line">              extent,</span><br><span class="line">              originalFeatures[j].getGeometry().getExtent()</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 取</span></span></span><br><span class="line"><span class="javascript">          maxFeatureCount = <span class="built_in">Math</span>.max(maxFeatureCount, jj);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(resolution);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 半径是根据四至来算出来的</span></span></span><br><span class="line">          radius =</span><br><span class="line">            (0.25 *</span><br><span class="line">              (ol.extent.getWidth(extent) + ol.extent.getHeight(extent))) /</span><br><span class="line">            resolution;</span><br><span class="line"><span class="actionscript">          feature.set(<span class="string">"radius"</span>, radius);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 保存上次调用时的resolution</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> currentResolution;</span></span><br><span class="line">      /**</span><br><span class="line">       * @description: 普通样式的返回函数</span><br><span class="line">       * @param &#123;type&#125;</span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>:</span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> styleFunction = <span class="function">(<span class="params">feature, resolution</span>) =&gt;</span> &#123;</span></span><br><span class="line">        if (resolution != currentResolution) &#123;</span><br><span class="line">          calculateClusterInfo(resolution);</span><br><span class="line">          currentResolution = resolution;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> style;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里的fill颜色的透明度通过当前要素的features数目size与maxFeatureCount的比值计算得到，越少越透明</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> size = feature.get(<span class="string">"features"</span>).length;</span></span><br><span class="line">        if (size &gt; 1) &#123;</span><br><span class="line"><span class="actionscript">          style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="actionscript">              radius: feature.get(<span class="string">"radius"</span>),</span></span><br><span class="line"><span class="actionscript">              fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line">                color: [</span><br><span class="line">                  255,</span><br><span class="line">                  153,</span><br><span class="line">                  0,</span><br><span class="line"><span class="javascript">                  <span class="built_in">Math</span>.min(<span class="number">0.8</span>, <span class="number">0.4</span> + size / maxFeatureCount)</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;),</span><br><span class="line"><span class="actionscript">            <span class="comment">// 文本样式</span></span></span><br><span class="line"><span class="actionscript">            text: <span class="keyword">new</span> ol.style.Text(&#123;</span></span><br><span class="line">              text: size.toString(),</span><br><span class="line">              fill: textFill,</span><br><span class="line">              stroke: textStroke</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果只有一个要素,就返回普通地震点的样式</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> originalFeature = feature.get(<span class="string">"features"</span>)[<span class="number">0</span>];</span></span><br><span class="line">          style = createEarthquakeStyle(originalFeature);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> style;</span></span><br><span class="line">      &#125;;</span><br><span class="line">      /**</span><br><span class="line">       * @description: 地震聚合点被选中时的样式</span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Object</span>&#125; feature 要素</span></span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: styles 被选中后的样式数组</span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> selectStyleFunction = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// fill填充为透明</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> styles = [</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="actionscript">              radius: feature.get(<span class="string">"radius"</span>),</span></span><br><span class="line">              fill: invisibleFill</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        ];</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> originalFeatures = feature.get(<span class="string">"features"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> originalFeature;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = originalFeatures.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span></span><br><span class="line">          originalFeature = originalFeatures[i];</span><br><span class="line"><span class="actionscript">          <span class="comment">// 把每个feature点的样式push给数组</span></span></span><br><span class="line">          styles.push(createEarthquakeStyle(originalFeature));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> styles;</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 矢量图层</span></span></span><br><span class="line"><span class="actionscript">      vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 数据源使用的是ol.source.Cluster</span></span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Cluster(&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 两个聚合点之间的最小像素距离</span></span></span><br><span class="line">          distance: 40,</span><br><span class="line"><span class="actionscript">          source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line">            url:</span><br><span class="line"><span class="actionscript">              <span class="string">"https://openlayers.org/en/latest/examples/data/kml/2012_Earthquakes_Mag5.kml"</span>,</span></span><br><span class="line"><span class="actionscript">            format: <span class="keyword">new</span> ol.format.KML(&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 不从KML文件中提取样式</span></span></span><br><span class="line"><span class="actionscript">              extractStyles: <span class="literal">false</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        <span class="comment">// 样式从样式函数中返回</span></span></span><br><span class="line">        style: styleFunction</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 普通的碳粉地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> raster = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="actionscript">          layer: <span class="string">"toner"</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [raster, vector],</span><br><span class="line">        interactions: ol.interaction.defaults().extend([</span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="javascript">            condition: <span class="function"><span class="params">evt</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> evt.type == <span class="string">"pointermove"</span> || evt.type == <span class="string">"singleclick"</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 被选择到的要素的样式</span></span></span><br><span class="line">            style: selectStyleFunction</span><br><span class="line">          &#125;)</span><br><span class="line">        ]),</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Magnify（放大镜）</title>
      <link href="/posts/560a199f.html"/>
      <url>/posts/560a199f.html</url>
      
        <content type="html"><![CDATA[<p>分析 Magnify 这个 demo，官网介绍是：</p><blockquote><p>This example makes use of the <code>postrender</code> event listener to oversample imagery in a circle around the pointer location. Listeners for this event have access to the Canvas context and can manipulate image data.<br>Move around the map to see the effect. Use the ↑ up and ↓ down arrow keys to the magnified circle size.</p></blockquote><blockquote><p>本示例使用的是 <code>postrender</code> 事件监听器，在图层中对鼠标位置处的圆圈进行过采样实现的，这个事件的监听器可以访问 <code>Canvas 上下文</code>并且可以处理图像数据。</p><p>在地图上移动鼠标来查看效果。使用 ↑ 上键 和 ↓ 下键来调整放大镜圆圈的大小。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/magnify.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>： Magnify</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：12 渲染器机制的使用 &gt; 实例 86.放大镜效果</p><a id="more"></a></li></ul><p><img src="/posts/560a199f/magnify.gif" alt="Magnify"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>在这里应用了必应地图的航拍地图（Aerial），必应地图的<code>source</code>定义多了一个必填的<code>key</code>，这个<code>key</code>是用 Bing 地图的开发者账号来申请的，申请链接：<a href="http://www.bingmapsportal.com/。" target="_blank" rel="external nofollow noopener noreferrer">http://www.bingmapsportal.com/。</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Magnify(放大镜)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 必应地图开发者key</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> key = <span class="string">"Your Bing Maps Key from http://www.bingmapsportal.com/ here"</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 必应地形图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> imagery = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.BingMaps(&#123; key: key, imagerySet: <span class="string">"Aerial"</span> &#125;)</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">"map"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [imagery],</span><br><span class="line">        target: container,</span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: ol.proj.fromLonLat([-109, 46.5]),</span><br><span class="line">          zoom: 6</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>map</code>中设置<code>view</code>中<code>center</code>的时候，使用了<a href="https://openlayers.org/en/latest/apidoc/module-ol_proj.html#.fromLonLat" target="_blank" rel="external nofollow noopener noreferrer">ol.proj.fromLonLat</a>，如下图所示，可以把经纬度转化为指定坐标系下的坐标，默认为<code>EPSG:3857</code>坐标系。</p><p><img src="/posts/560a199f/fromLonLat.jpg" alt></p><h2 id="监听鼠标和键盘事件"><a href="#监听鼠标和键盘事件" class="headerlink" title="监听鼠标和键盘事件"></a>监听鼠标和键盘事件</h2><h3 id="修改放大镜大小"><a href="#修改放大镜大小" class="headerlink" title="修改放大镜大小"></a>修改放大镜大小</h3><p>首先给放大镜设置一个初始大小 75px，然后监听键盘按下（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document#Keyboard_events" target="_blank" rel="external nofollow noopener noreferrer">keydown</a>）事件，同时通过被按下键<code>which</code>属性，也就是<code>keyCode</code>或者<code>charCode</code>来判断是哪一个键（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/which" target="_blank" rel="external nofollow noopener noreferrer">which</a>是一个已经从 web 标准中弃用的事件属性，推荐使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/key/Key_Values" target="_blank" rel="external nofollow noopener noreferrer">key</a>或者<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/code" target="_blank" rel="external nofollow noopener noreferrer">code</a>代替）。</p><p>在计算<code>radius</code>（半径）的时候，同时给<code>radius</code>限制了最大值和最小值。在修改了<code>radius</code>后重新渲染地图并阻止按键的默认事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键盘事件，控制圆圈的放大和缩小</span></span><br><span class="line"><span class="keyword">let</span> radius = <span class="number">75</span>;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"keydown"</span>, evt =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当按↑键时放大圆圈</span></span><br><span class="line">  <span class="keyword">if</span> (evt.which === <span class="number">38</span>) &#123;</span><br><span class="line">    radius = <span class="built_in">Math</span>.min(radius + <span class="number">5</span>, <span class="number">150</span>);</span><br><span class="line">    <span class="comment">// 重新渲染地图并阻止默认事件</span></span><br><span class="line">    map.render();</span><br><span class="line">    evt.preventDefault();</span><br><span class="line">    <span class="comment">// 当按↓键时缩小圆圈</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (evt.which === <span class="number">40</span>) &#123;</span><br><span class="line">    radius = <span class="built_in">Math</span>.max(radius - <span class="number">5</span>, <span class="number">25</span>);</span><br><span class="line">    map.render();</span><br><span class="line">    evt.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="保存鼠标位置"><a href="#保存鼠标位置" class="headerlink" title="保存鼠标位置"></a>保存鼠标位置</h3><p>因为需要让放大镜跟随鼠标移动，所以需要监听鼠标位置的变化。如代码所示，监听<code>mousemove</code>，同时利用<code>getEventPixel</code>来获取浏览器事件相对于视区的像素位置，也就是鼠标相对于地图的位置，最后再渲染地图。</p><p><img src="/posts/560a199f/getEventPixel.jpg" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标像素坐标</span></span><br><span class="line"><span class="keyword">let</span> mousePosition = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 鼠标事件，鼠标移动的时候保存鼠标像素坐标</span></span><br><span class="line">container.addEventListener(<span class="string">"mousemove"</span>, event =&gt; &#123;</span><br><span class="line">  mousePosition = map.getEventPixel(event);</span><br><span class="line">  <span class="comment">// 渲染地图</span></span><br><span class="line">  map.render();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 鼠标事件，鼠标移出地图时将mousePosition置空</span></span><br><span class="line">container.addEventListener(<span class="string">"mouseout"</span>, () =&gt; &#123;</span><br><span class="line">  mousePosition = <span class="literal">null</span>;</span><br><span class="line">  map.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="绘制放大镜"><a href="#绘制放大镜" class="headerlink" title="绘制放大镜"></a>绘制放大镜</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>如代码所示，首先给图层添加一个 <code>postrender</code> 事件，当图层渲染完毕时触发，此时若 <code>mousePosition</code> 有值，也就是鼠标在地图上时，执行放大镜逻辑。</p><p>使用<a href="https://openlayers.org/en/latest/apidoc/module-ol_render.html#.getRenderPixel" target="_blank" rel="external nofollow noopener noreferrer">ol.render.getRenderPixel()</a>函数，这个函数的功能是把传入的位置转换为 <code>event</code> 中的 <code>canvas 上下文</code>的对应位置，所以 <code>pixel</code> 是鼠标在 <code>canvas 上下文</code>中的位置，<code>offset</code> 是鼠标在 <code>x</code> 方向加上半径后在 <code>canvas 上下文</code>中的位置，<code>half</code> 就是两个位置之间的长度。</p><p>接下来获取 <code>canvas 上下文</code>，以鼠标为中心绘制一个正方形，<code>[centerX, centerY]</code>就是正方形的中心坐标，<code>[originX, originY]</code>是正方形左上角的坐标，<code>size</code>是正方形的取整边长。使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData" target="_blank" rel="external nofollow noopener noreferrer">getImageData(originX, originY, size, size).data</a>获取这个正方形的图像数据，存放到 <code>sourceData</code> 中，同样使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/createImageData" target="_blank" rel="external nofollow noopener noreferrer">createImageData(size, size)</a>新建一个边长为 size 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData" target="_blank" rel="external nofollow noopener noreferrer">ImageData</a>对象，对象数据存放到 <code>destData</code> 中。</p><p>接下来就是对每一个像素进行迭代处理。迭代处理完成后就开始进行 <code>canvas 上下文</code>的绘制，设置 <code>stroke</code> 的颜色和宽度，并使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/putImageData" target="_blank" rel="external nofollow noopener noreferrer">putImageData(dest, originX, originY)</a>把 <code>destData</code> 里的数据绘制到正方形中，这样就实现了放大镜。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给imagery添加一个postrender事件</span></span><br><span class="line">imagery.on(<span class="string">"postrender"</span>, event =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当mousePosition有值的时候才执行，所以鼠标移出地图后放大镜就消失</span></span><br><span class="line">  <span class="keyword">if</span> (mousePosition) &#123;</span><br><span class="line">    <span class="comment">// 把CSS坐标转化为event事件的canvas context的坐标</span></span><br><span class="line">    <span class="keyword">let</span> pixel = ol.render.getRenderPixel(event, mousePosition);</span><br><span class="line">    <span class="comment">// offset是x方向加上半径以后的context坐标</span></span><br><span class="line">    <span class="keyword">let</span> offset = ol.render.getRenderPixel(event, [</span><br><span class="line">      mousePosition[<span class="number">0</span>] + radius,</span><br><span class="line">      mousePosition[<span class="number">1</span>]</span><br><span class="line">    ]);</span><br><span class="line">    <span class="comment">// 计算出在context中的半径</span></span><br><span class="line">    <span class="keyword">let</span> half = <span class="built_in">Math</span>.sqrt(</span><br><span class="line">      <span class="built_in">Math</span>.pow(offset[<span class="number">0</span>] - pixel[<span class="number">0</span>], <span class="number">2</span>) + <span class="built_in">Math</span>.pow(offset[<span class="number">1</span>] - pixel[<span class="number">1</span>], <span class="number">2</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">let</span> context = event.context;</span><br><span class="line">    <span class="keyword">let</span> centerX = pixel[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> centerY = pixel[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 正方形左上角坐标[originX, originY]</span></span><br><span class="line">    <span class="keyword">let</span> originX = centerX - half;</span><br><span class="line">    <span class="keyword">let</span> originY = centerY - half;</span><br><span class="line">    <span class="comment">// 在context中的边长,加1是为了防止出现bug</span></span><br><span class="line">    <span class="keyword">let</span> size = <span class="built_in">Math</span>.round(<span class="number">2</span> * half + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// sourceData存放原正方形的数据，destData存放新正方形的数据</span></span><br><span class="line">    <span class="keyword">let</span> sourceData = context.getImageData(originX, originY, size, size).data;</span><br><span class="line">    <span class="keyword">let</span> dest = context.createImageData(size, size);</span><br><span class="line">    <span class="keyword">let</span> destData = dest.data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代每一个像素</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// 迭代每一个像素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    context.beginPath();</span><br><span class="line">    <span class="comment">// 画圆圈</span></span><br><span class="line">    context.arc(centerX, centerY, half, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    <span class="comment">// stroke的样式</span></span><br><span class="line">    context.lineWidth = (<span class="number">3</span> * half) / radius;</span><br><span class="line">    context.strokeStyle = <span class="string">"rgba(255,255,255,0.5)"</span>;</span><br><span class="line">    <span class="comment">// 把生成的dest对象绘制到context中</span></span><br><span class="line">    context.putImageData(dest, originX, originY);</span><br><span class="line">    context.stroke();</span><br><span class="line">    context.restore();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="逐像素处理"><a href="#逐像素处理" class="headerlink" title="逐像素处理"></a>逐像素处理</h3><p>迭代处理每一个像素的代码如下所示，其实就是使原正方形和新正方形内坐标产生一个对应关系，使原数据 <code>sourceOffset</code> 和新数据 <code>destOffset</code> 位置处的数据一致，产生一个过采样的放大效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代每一个像素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; size; ++j) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">let</span> dI = i - half;</span><br><span class="line">    <span class="keyword">let</span> dJ = j - half;</span><br><span class="line">    <span class="keyword">let</span> dist = <span class="built_in">Math</span>.sqrt(dI * dI + dJ * dJ);</span><br><span class="line">    <span class="keyword">let</span> sourceI = i;</span><br><span class="line">    <span class="keyword">let</span> sourceJ = j;</span><br><span class="line">    <span class="comment">// 半径范围内的进行原坐标和新坐标的对应</span></span><br><span class="line">    <span class="keyword">if</span> (dist &lt; half) &#123;</span><br><span class="line">      sourceI = <span class="built_in">Math</span>.round(half + dI / <span class="number">2</span>);</span><br><span class="line">      sourceJ = <span class="built_in">Math</span>.round(half + dJ / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> destOffset = (j * size + i) * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> sourceOffset = (sourceJ * size + sourceI) * <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 替换对应像素位置处的数据</span></span><br><span class="line">    destData[destOffset] = sourceData[sourceOffset];</span><br><span class="line">    destData[destOffset + <span class="number">1</span>] = sourceData[sourceOffset + <span class="number">1</span>];</span><br><span class="line">    destData[destOffset + <span class="number">2</span>] = sourceData[sourceOffset + <span class="number">2</span>];</span><br><span class="line">    destData[destOffset + <span class="number">3</span>] = sourceData[sourceOffset + <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Magnify(放大镜)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 必应地图开发者key</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> key = <span class="string">"Your Bing Maps Key from http://www.bingmapsportal.com/ here"</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 必应地形图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> imagery = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.BingMaps(&#123; key: key, imagerySet: <span class="string">"Aerial"</span> &#125;)</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">"map"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [imagery],</span><br><span class="line">        target: container,</span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: ol.proj.fromLonLat([-109, 46.5]),</span><br><span class="line">          zoom: 6</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 键盘事件，控制圆圈的放大和缩小</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> radius = <span class="number">75</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.addEventListener(<span class="string">"keydown"</span>, evt =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当按↑键时放大圆圈</span></span></span><br><span class="line">        if (evt.which === 38) &#123;</span><br><span class="line"><span class="javascript">          radius = <span class="built_in">Math</span>.min(radius + <span class="number">5</span>, <span class="number">150</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 重新渲染地图并阻止默认事件</span></span></span><br><span class="line">          map.render();</span><br><span class="line">          evt.preventDefault();</span><br><span class="line"><span class="actionscript">          <span class="comment">// 当按↓键时缩小圆圈</span></span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (evt.which === <span class="number">40</span>) &#123;</span></span><br><span class="line"><span class="javascript">          radius = <span class="built_in">Math</span>.max(radius - <span class="number">5</span>, <span class="number">25</span>);</span></span><br><span class="line">          map.render();</span><br><span class="line">          evt.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 鼠标像素坐标</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> mousePosition = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 鼠标事件，鼠标移动的时候保存鼠标像素坐标</span></span></span><br><span class="line"><span class="actionscript">      container.addEventListener(<span class="string">"mousemove"</span>, event =&gt; &#123;</span></span><br><span class="line">        mousePosition = map.getEventPixel(event);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 渲染地图</span></span></span><br><span class="line">        map.render();</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 鼠标事件，鼠标移出地图时将mousePosition置空</span></span></span><br><span class="line"><span class="actionscript">      container.addEventListener(<span class="string">"mouseout"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        mousePosition = <span class="literal">null</span>;</span></span><br><span class="line">        map.render();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 给imagery添加一个postrender事件</span></span></span><br><span class="line"><span class="actionscript">      imagery.on(<span class="string">"postrender"</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当mousePosition有值的时候才执行，所以鼠标移出地图后放大镜就消失</span></span></span><br><span class="line">        if (mousePosition) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 把CSS坐标转化为event事件的canvas context的坐标</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> pixel = ol.render.getRenderPixel(event, mousePosition);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// offset是x方向加上半径以后的context坐标</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> offset = ol.render.getRenderPixel(event, [</span></span><br><span class="line">            mousePosition[0] + radius,</span><br><span class="line">            mousePosition[1]</span><br><span class="line">          ]);</span><br><span class="line"><span class="actionscript">          <span class="comment">// 计算出在context中的半径</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> half = <span class="built_in">Math</span>.sqrt(</span></span><br><span class="line"><span class="javascript">            <span class="built_in">Math</span>.pow(offset[<span class="number">0</span>] - pixel[<span class="number">0</span>], <span class="number">2</span>) +</span></span><br><span class="line"><span class="javascript">              <span class="built_in">Math</span>.pow(offset[<span class="number">1</span>] - pixel[<span class="number">1</span>], <span class="number">2</span>)</span></span><br><span class="line">          );</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> context = event.context;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> centerX = pixel[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> centerY = pixel[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 正方形左上角坐标[originX, originY]</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> originX = centerX - half;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> originY = centerY - half;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 在context中的边长,加1是为了防止出现bug</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> size = <span class="built_in">Math</span>.round(<span class="number">2</span> * half + <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> sourceData = context.getImageData(originX, originY, size, size)</span></span><br><span class="line">            .data;</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> dest = context.createImageData(size, size);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> destData = dest.data;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 迭代每一个像素</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; size; ++j) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> dI = i - half;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> dJ = j - half;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> dist = <span class="built_in">Math</span>.sqrt(dI * dI + dJ * dJ);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> sourceI = i;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> sourceJ = j;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 半径范围内的进行原坐标和新坐标的对应</span></span></span><br><span class="line">              if (dist &lt; half) &#123;</span><br><span class="line"><span class="javascript">                sourceI = <span class="built_in">Math</span>.round(half + dI / <span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">                sourceJ = <span class="built_in">Math</span>.round(half + dJ / <span class="number">2</span>);</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> destOffset = (j * size + i) * <span class="number">4</span>;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> sourceOffset = (sourceJ * size + sourceI) * <span class="number">4</span>;</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 替换对应像素位置处的数据</span></span></span><br><span class="line">              destData[destOffset] = sourceData[sourceOffset];</span><br><span class="line">              destData[destOffset + 1] = sourceData[sourceOffset + 1];</span><br><span class="line">              destData[destOffset + 2] = sourceData[sourceOffset + 2];</span><br><span class="line">              destData[destOffset + 3] = sourceData[sourceOffset + 3];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 开始绘制</span></span></span><br><span class="line">          context.beginPath();</span><br><span class="line"><span class="actionscript">          <span class="comment">// 画圆圈</span></span></span><br><span class="line"><span class="javascript">          context.arc(centerX, centerY, half, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// stroke的样式</span></span></span><br><span class="line">          context.lineWidth = (3 * half) / radius;</span><br><span class="line"><span class="actionscript">          context.strokeStyle = <span class="string">"rgba(255,255,255,0.5)"</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 把生成的dest对象绘制到context中</span></span></span><br><span class="line">          context.putImageData(dest, originX, originY);</span><br><span class="line">          context.stroke();</span><br><span class="line">          context.restore();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Marker Animation（标记动画）</title>
      <link href="/posts/a6c6a36c.html"/>
      <url>/posts/a6c6a36c.html</url>
      
        <content type="html"><![CDATA[<p>分析 Marker Animation 这个 demo，官网介绍是：</p><blockquote><p>This example shows how to use postrender events and a vector context to animate a marker feature along a line. In this example an encoded polyline is being used.<br>此示例展示了如何使用 postrender 事件和矢量上下文使一个标记要素沿着线移动。在这个实例中使用了一个经过编码的折线。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/feature-move-animation.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Marker Animation</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：12 渲染器机制的使用 &gt; 实例 85.路径回放</p><a id="more"></a></li></ul><p><img src="/posts/a6c6a36c/marker.gif" alt="Marker Animation"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>先展示地图基本结构，地图的样式使用的是<code>AerialWithLabelsOnDemand</code>（按需加载的带标签的航拍图）。在这里的 <code>vectorLayer</code>是动画显示的图层，要素和动画逻辑都在此层上执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Marker Animation(标记动画)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"speed"</span>&gt;</span></span><br><span class="line">      速度:<span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"speed"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"10"</span> <span class="attr">max</span>=<span class="string">"999"</span> <span class="attr">step</span>=<span class="string">"10"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start-animation"</span>&gt;</span>开始动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 基本地图设置</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> center = [<span class="number">-5639523.95</span>, <span class="number">-3501274.52</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">        target: <span class="built_in">document</span>.getElementById(<span class="string">"map"</span>),</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: center,</span><br><span class="line">          zoom: 10,</span><br><span class="line">          minZoom: 2,</span><br><span class="line">          maxZoom: 19</span><br><span class="line">        &#125;),</span><br><span class="line">        layers: [</span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">            source: <span class="keyword">new</span> ol.source.BingMaps(&#123;</span></span><br><span class="line"><span class="actionscript">              imagerySet: <span class="string">"AerialWithLabelsOnDemand"</span>,</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// 需要填写必应地图的开发者key，申请网址http://www.bingmapsportal.com/</span></span></span><br><span class="line"><span class="actionscript">              key: <span class="string">"Your Bing Maps Key from http://www.bingmapsportal.com/ here"</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;),</span><br><span class="line">          vectorLayer</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置-vectorLayer"><a href="#设置-vectorLayer" class="headerlink" title="设置 vectorLayer"></a>设置 vectorLayer</h2><h3 id="加载数据并生成要素"><a href="#加载数据并生成要素" class="headerlink" title="加载数据并生成要素"></a>加载数据并生成要素</h3><p>猜测这个 demo 可能是 OpenLayers 官方摘自<a href="https://jsfiddle.net/" target="_blank" rel="external nofollow noopener noreferrer">jsFiddle</a>，jsFiddle 加载外部数据时有限制，所以使用字符串数组 join 一下合并成长字符串当数据源。</p><p>使用<a href="https://openlayers.org/en/latest/apidoc/module-ol_format_Polyline-Polyline.html" target="_blank" rel="external nofollow noopener noreferrer">ol.format.Polyline</a>新建一个 openlayers 折线<code>polyline</code>，使用<code>readGeometry</code>方法读取<code>polyline</code>，并把投影从 4326 转到 3857 的 web 标准格式，返回了一个几何体对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通常使用AJAX方式加载数据，但由于jsFiddle的限制，所以这里使用长字符串来替代</span></span><br><span class="line"><span class="keyword">const</span> polyline = [</span><br><span class="line">  <span class="string">"hldhx@lnau`BCG_EaC??cFjAwDjF??uBlKMd@&#125;@z@??aC^yk@z_@se@b[wFdE??wFfE&#125;N"</span>,</span><br><span class="line">  <span class="string">"fIoGxB_I\\gG&#125;@eHoCyTmPqGaBaHOoD\\??yVrGotA|N??o[N_STiwAtEmHGeHcAkiA&#125;^"</span>,</span><br><span class="line">  <span class="string">"aMyBiHOkFNoI`CcVvM??gG^gF_@iJwC??eCcA]OoL&#125;DwFyCaCgCcCwDcGwHsSoX??wI_E"</span>,</span><br><span class="line">  <span class="string">"kUFmq@hBiOqBgTwS??iYse@gYq\\cp@ce@&#123;vA&#125;s@csJqaE&#125;&#123;@iRaqE&#123;lBeRoIwd@_T&#123;]_"</span>,</span><br><span class="line">  <span class="string">"Ngn@&#123;PmhEwaA&#123;SeF_u@kQuyAw]wQeEgtAsZ&#125;LiCarAkVwI&#125;D??_&#125;RcjEinPspDwSqCgs@"</span>,</span><br><span class="line">  <span class="string">"sPua@_OkXaMeT_Nwk@ob@gV&#125;TiYs[uTwXoNmT&#123;Uyb@wNg]&#123;Nqa@oDgNeJu_@_G&#125;YsFw]k"</span>,</span><br><span class="line">  <span class="string">"DuZyDmm@i_@uyIJe~@jCg|@nGiv@zUi_BfNqaAvIow@dEed@dCcf@r@qz@Egs@&#123;Acu@mC"</span>,</span><br><span class="line">  <span class="string">"um@yIey@gGig@cK_m@aSku@qRil@we@&#123;mAeTej@&#125;Tkz@cLgr@aHko@qOmcEaJw~C&#123;w@ka"</span>,</span><br><span class="line">  <span class="string">"i@qBchBq@kmBS&#123;kDnBscBnFu_Dbc@_~QHeU`IuyDrC_&#125;@bByp@fCyoA?qMbD&#125;&#123;AIkeAgB"</span>,</span><br><span class="line">  <span class="string">"k_A_A&#123;UsDke@gFej@qH&#123;o@qGgb@qH&#123;`@mMgm@uQus@kL&#123;_@yOmd@ymBgwE&#125;x@ouBwtA__"</span>,</span><br><span class="line">  <span class="string">"DuhEgaKuWct@gp@cnBii@mlBa_@&#125;|Asj@qrCg^eaC&#125;L&#123;dAaJ_aAiOyjByH&#123;nAuYu`GsAw"</span>,</span><br><span class="line">  <span class="string">"Xyn@ywMyOyqD&#123;_@cfIcDe&#125;@y@aeBJmwA`CkiAbFkhBlTgdDdPyiB`W&#125;xDnSa&#125;DbJyhCrX"</span>,</span><br><span class="line">  <span class="string">"itAhT&#125;x@bE&#125;Z_@qW_Kwv@qKaaAiBgXvIm&#125;A~JovAxCqW~WanB`XewBbK&#123;_A`K&#125;fBvAmi@"</span>,</span><br><span class="line">  <span class="string">"xBycBeCauBoF&#125;&#125;@qJioAww@gjHaPopA_NurAyJku@uGmi@cDs[eRaiBkQstAsQkcByNma"</span>,</span><br><span class="line">  <span class="string">"CsK_uBcJgbEw@gkB_@ypEqDoqSm@eZcDwjBoGw`BoMegBaU_`Ce_@_uBqb@ytBwkFqiT_"</span>,</span><br><span class="line">  <span class="string">"fAqfEwe@mfCka@_eC_UmlB&#125;MmaBeWkkDeHwqAoX&#125;~DcBsZmLcxBqOwqE_DkyAuJmrJ\\o"</span>,</span><br><span class="line">  <span class="string">"~CfIewG|YibQxBssB?es@qGciA&#125;RorAoVajA_nAodD&#123;[y`AgPqp@mKwr@ms@umEaW&#123;dAm"</span>,</span><br><span class="line">  <span class="string">"b@umAw|@ojBwzDaaJsmBwbEgdCsrFqhAihDquAi`Fux@&#125;_Dui@_eB_u@guCuyAuiHukA_"</span>,</span><br><span class="line">  <span class="string">"lKszAu|OmaA&#123;wKm&#125;@clHs_A_rEahCssKo\\sgBsSglAqk@yvDcS_wAyTwpBmPc|BwZknF"</span>,</span><br><span class="line">  <span class="string">"oFscB_GsaDiZmyMyLgtHgQonHqT&#123;hKaPg&#125;Dqq@m~Hym@c`EuiBudIabB&#123;hF&#123;pWifx@snA"</span>,</span><br><span class="line">  <span class="string">"w`GkFyVqf@y~BkoAi&#125;Lel@wtc@&#125;`@oaXi_C&#125;pZsi@eqGsSuqJ|Lqeb@e]kgPcaAu&#125;SkDw"</span>,</span><br><span class="line">  <span class="string">"zGhn@gjYh\\qlNZovJieBqja@ed@siO&#123;[ol\\kCmjMe\\isHorCmec@uLebB&#125;EqiBaCg&#125;"</span>,</span><br><span class="line">  <span class="string">"@m@qwHrT_vFps@kkI`uAszIrpHuzYxx@e&#123;Crw@kpDhN&#123;wBtQarDy@knFgP_yCu\\wyCwy"</span>,</span><br><span class="line">  <span class="string">"A&#123;kHo~@omEoYmoDaEcPiuAosDagD&#125;rO&#123;&#123;AsyEihCayFilLaiUqm@_bAumFo&#125;DgqA_uByi"</span>,</span><br><span class="line">  <span class="string">"@swC~AkzDlhA&#125;xEvcBa&#125;Cxk@ql@`rAo|@~bBq&#123;@``Bye@djDww@z_C_cAtn@ye@nfC_eC"</span>,</span><br><span class="line">  <span class="string">"|gGahH~s@w&#125;@``Fi~FpnAooC|u@wlEaEedRlYkrPvKerBfYs&#125;Arg@m&#125;AtrCkzElw@gjBb"</span>,</span><br><span class="line">  <span class="string">"h@woBhR&#123;gCwGkgCc[wtCuOapAcFoh@uBy[yBgr@c@iq@o@wvEv@sp@`FajBfCaq@fIipA"</span>,</span><br><span class="line">  <span class="string">"dy@ewJlUc`ExGuaBdEmbBpBssArAuqBBg&#125;@s@g&#123;AkB&#123;bBif@_bYmC&#125;r@kDgm@sPq_BuJ_"</span>,</span><br><span class="line">  <span class="string">"s@&#123;X_&#123;AsK_d@eM&#123;d@wVgx@oWcu@??aDmOkNia@wFoSmDyMyCkPiBePwAob@XcQ|@oNdCo"</span>,</span><br><span class="line">  <span class="string">"SfFwXhEmOnLi\\lbAulB`X_d@|k@au@bc@oc@bqC&#125;&#123;BhwDgcD`l@ed@??bL&#123;G|a@eTje@"</span>,</span><br><span class="line">  <span class="string">"oS~]cLr~Bgh@|b@&#125;Jv&#125;EieAlv@sPluD&#123;z@nzA_]`|KchCtd@sPvb@wSb&#123;@ko@f`RooQ~e"</span>,</span><br><span class="line">  <span class="string">"[upZbuIolI|gFafFzu@iq@nMmJ|OeJn^&#123;Qjh@yQhc@uJ~j@iGdd@kAp~BkBxO&#123;@|QsAfY"</span>,</span><br><span class="line">  <span class="string">"gEtYiGd]&#125;Jpd@wRhVoNzNeK`j@ce@vgK&#125;cJnSoSzQkVvUm^rSgc@`Uql@xIq\\vIgg@~k"</span>,</span><br><span class="line">  <span class="string">"Dyq[nIir@jNoq@xNwc@fYik@tk@su@neB&#125;uBhqEesFjoGeyHtCoD|D&#125;Ed|@ctAbIuOzqB"</span>,</span><br><span class="line">  <span class="string">"_&#125;D~NgY`\\um@v[gm@v&#123;Cw`G`w@o&#123;AdjAwzBh&#123;C&#125;`Gpp@ypAxn@&#125;mAfz@&#123;bBbNia@??jI"</span>,</span><br><span class="line">  <span class="string">"ab@`CuOlC&#125;YnAcV`@_^m@aeB&#125;@yk@YuTuBg^uCkZiGk\\yGeY&#125;Lu_@oOsZiTe[uWi[sl@"</span>,</span><br><span class="line">  <span class="string">"mo@soAauAsrBgzBqgAglAyd@ig@asAcyAklA&#125;qAwHkGi&#123;@s~@goAmsAyDeEirB_&#123;B&#125;IsJ"</span>,</span><br><span class="line">  <span class="string">"uEeFymAssAkdAmhAyTcVkFeEoKiH&#125;l@kp@wg@sj@ku@ey@uh@kj@&#125;EsFmG&#125;Jk^_r@_f@m"</span>,</span><br><span class="line">  <span class="string">"~@ym@yjA??a@cFd@kBrCgDbAUnAcBhAyAdk@et@??kF&#125;D??OL"</span></span><br><span class="line">].join(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> route = <span class="keyword">new</span> ol.format.Polyline(&#123;</span><br><span class="line">  factor: <span class="number">1e6</span></span><br><span class="line">  <span class="comment">// 返回一个geometry</span></span><br><span class="line">&#125;).readGeometry(polyline, &#123;</span><br><span class="line">  <span class="comment">// 数据源的投影格式和生成要素的投影格式</span></span><br><span class="line">  dataProjection: <span class="string">"EPSG:4326"</span>,</span><br><span class="line">  featureProjection: <span class="string">"EPSG:3857"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取路线的坐标</span></span><br><span class="line"><span class="keyword">let</span> routeCoords = route.getCoordinates();</span><br><span class="line"><span class="keyword">let</span> routeLength = routeCoords.length;</span><br><span class="line"><span class="comment">// 每个要素分别设置一个type,用于设置样式</span></span><br><span class="line"><span class="comment">// 路线的要素</span></span><br><span class="line"><span class="keyword">let</span> routeFeature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">  type: <span class="string">"route"</span>,</span><br><span class="line">  geometry: route</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 运动点的要素</span></span><br><span class="line"><span class="keyword">let</span> geoMarker = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">  type: <span class="string">"geoMarker"</span>,</span><br><span class="line">  geometry: <span class="keyword">new</span> ol.geom.Point(routeCoords[<span class="number">0</span>])</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开始点标志的要素</span></span><br><span class="line"><span class="keyword">let</span> startMarker = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">  type: <span class="string">"icon"</span>,</span><br><span class="line">  geometry: <span class="keyword">new</span> ol.geom.Point(routeCoords[<span class="number">0</span>])</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结束点标志的要素</span></span><br><span class="line"><span class="keyword">let</span> endMarker = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">  type: <span class="string">"icon"</span>,</span><br><span class="line">  geometry: <span class="keyword">new</span> ol.geom.Point(routeCoords[routeLength - <span class="number">1</span>])</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取到了路线的<code>geometry</code>以后，新建一个<a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html" target="_blank" rel="external nofollow noopener noreferrer">ol.Feature</a>对象，对象中定义一个属性<code>type</code>为<code>route</code>，最后返回一个路线的要素<code>routeFeature</code>。同样的方式生成运动点的要素（<code>type</code>为<code>geoMarker</code>）、开始点标志的要素<code>startMarker</code>（<code>type</code>为<code>icon</code>）、结束点标志的要素<code>endMarker</code>（<code>type</code>为<code>icon</code>），此处的<code>type</code>主要是为应用不同的<code>style</code>做的准备。</p><h3 id="生成样式和图层"><a href="#生成样式和图层" class="headerlink" title="生成样式和图层"></a>生成样式和图层</h3><p>定义一个<code>styles</code>对象，键名为<code>route</code>的时路线的样式，键名为<code>icon</code>的起始点和终止点的图标样式，键名为<code>geoMarker</code>为运动点的样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应各type的样式</span></span><br><span class="line"><span class="keyword">let</span> styles = &#123;</span><br><span class="line">  route: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">      width: <span class="number">6</span>,</span><br><span class="line">      color: [<span class="number">237</span>, <span class="number">212</span>, <span class="number">0</span>, <span class="number">0.8</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  icon: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">      anchor: [<span class="number">0.5</span>, <span class="number">1</span>],</span><br><span class="line">      src: <span class="string">"../data/icon.png"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  geoMarker: <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">      radius: <span class="number">7</span>,</span><br><span class="line">      fill: <span class="keyword">new</span> ol.style.Fill(&#123; <span class="attr">color</span>: <span class="string">"black"</span> &#125;),</span><br><span class="line">      stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">        color: <span class="string">"white"</span>,</span><br><span class="line">        width: <span class="number">2</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 是否处于运动状态的标志</span></span><br><span class="line"><span class="keyword">let</span> animating = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 移动速度,当前时间戳</span></span><br><span class="line"><span class="keyword">let</span> speed, now;</span><br><span class="line"><span class="comment">// 速度输入框和开始按钮</span></span><br><span class="line"><span class="keyword">let</span> speedInput = <span class="built_in">document</span>.getElementById(<span class="string">"speed"</span>);</span><br><span class="line"><span class="keyword">let</span> startButton = <span class="built_in">document</span>.getElementById(<span class="string">"start-animation"</span>);</span><br><span class="line"><span class="comment">// 添加这些要素的图层</span></span><br><span class="line"><span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">  source: <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">    features: [routeFeature, geoMarker, startMarker, endMarker]</span><br><span class="line">  &#125;),</span><br><span class="line">  style: <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当正在运动时隐藏初始位置标志点</span></span><br><span class="line">    <span class="keyword">if</span> (animating &amp;&amp; feature.get(<span class="string">"type"</span>) === <span class="string">"geoMarker"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据类型返回样式</span></span><br><span class="line">    <span class="keyword">return</span> styles[feature.get(<span class="string">"type"</span>)];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接着设置一个运动状态的标志<code>animating</code>为<code>false</code>，然后在添加<code>vectorLayer</code>图层的时候，把<code>routeFeature</code>、<code>geoMarker</code>、 <code>startMarker</code>、 <code>endMarker</code>添加到<code>features</code>中。</p><p>有一个关键的地方就是在设置<code>style</code>的时候使用了函数返回，对应不同的<code>type</code>使用之前预定义好的不同的样式。如果<code>animating</code>为<code>true</code>（正在运动）并且<code>type</code>为<code>geoMarker</code>（初始位置标志点），就返回<code>null</code>（隐藏初始位置标志点）。</p><h2 id="按钮点击的回调函数"><a href="#按钮点击的回调函数" class="headerlink" title="按钮点击的回调函数"></a>按钮点击的回调函数</h2><h3 id="startAnimation"><a href="#startAnimation" class="headerlink" title="startAnimation"></a>startAnimation</h3><p>button 按钮上绑定的是<code>startAnimation</code>回调函数，这个函数名义上叫<code>start</code>，但实际上这个同时控制开始和取消动画。该函数执行时，如果<code>animating</code>是<code>true</code>，就去执行停止动画的函数<code>stopAnimation</code>。</p><p>如果<code>animating</code>为<code>false</code>，就去执行<code>else</code>中的代码，最关键的地方是给<code>vectorLayer</code>添加了<code>postrender</code>回调，执行<code>moveFeature</code>，形成动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 按钮点击的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> <span class="variable">null</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> startAnimation = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (animating) &#123;</span><br><span class="line">    <span class="comment">// 如果animating为true就执行停止动画的函数</span></span><br><span class="line">    stopAnimation(<span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 把animating改为true，设置时间戳，取到初始速度，把按钮文字设为取消动画</span></span><br><span class="line">    animating = <span class="literal">true</span>;</span><br><span class="line">    now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    speed = speedInput.value;</span><br><span class="line">    startButton.textContent = <span class="string">"取消动画"</span>;</span><br><span class="line">    <span class="comment">// 隐藏标记</span></span><br><span class="line">    geoMarker.setStyle(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 防止平移了地图，重新设置地图中心</span></span><br><span class="line">    map.getView().setCenter(center);</span><br><span class="line">    <span class="comment">// 添加postrender回调</span></span><br><span class="line">    vectorLayer.on(<span class="string">"postrender"</span>, moveFeature);</span><br><span class="line">    <span class="comment">// 渲染地图</span></span><br><span class="line">    map.render();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 给按钮绑定点击事件</span></span><br><span class="line">startButton.addEventListener(<span class="string">"click"</span>, startAnimation, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>最后给按钮绑定<code>click</code>事件，回调函数为<code>startAnimation</code>。</p><h3 id="stopAnimation"><a href="#stopAnimation" class="headerlink" title="stopAnimation"></a>stopAnimation</h3><p>停止动画的回调函数<code>stopAnimation</code>接收一个<code>ended</code>参数，这个函数的关键就是对<code>ended</code>的判断。如果<code>ended</code>为<code>ture</code>的时候，也就是动画正常运行完，这时就把运动点放到最后一点；反之，就是动画并没有运行完而是被中途取消，就把运动点重置在起点处。</p><p>最后，解绑<code>vectorLayers</code>的<code>postrender</code>回调，取消动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 停止动画</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>ended 为true的时候也就是正常结束，所以标记在最后；为false的时候是主动取消，所以标记在最前。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> stopAnimation = <span class="function"><span class="params">ended</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 把aniamting设为false，把按钮文字改为开始动画</span></span><br><span class="line">  animating = <span class="literal">false</span>;</span><br><span class="line">  startButton.textContent = <span class="string">"开始动画"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果点击取消动画，在开始的地方设置标记</span></span><br><span class="line">  <span class="comment">// 如果ended为true，就把点放到最后一个；如果ended为false，就把点放第一个。</span></span><br><span class="line">  <span class="keyword">let</span> coord = ended ? routeCoords[routeLength - <span class="number">1</span>] : routeCoords[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 给geoMaker设为coords</span></span><br><span class="line">  <span class="keyword">let</span> geometry = geoMarker.getGeometry();</span><br><span class="line">  geometry.setCoordinates(coord);</span><br><span class="line">  <span class="comment">// 解绑postrender事件监听</span></span><br><span class="line">  vectorLayer.un(<span class="string">"postrender"</span>, moveFeature);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="移动要素的回调函数"><a href="#移动要素的回调函数" class="headerlink" title="移动要素的回调函数"></a>移动要素的回调函数</h2><p>最核心的移动要素的函数<code>moveFeature</code>如下，获取矢量上下文和当前帧以后，判断只有在<code>animating</code>为<code>true</code>的时候，才执行运动的代码。控制速度是利用动画运行时间<code>elapsedTime</code>和速度<code>speed</code>计算得到每次运动该跳过的索引数，同时，最近的一个点拿出来使用<code>drawFeature</code>函数绘制在地图上，这样在不断<code>render</code>的过程中就形成了动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动要素的回调函数</span></span><br><span class="line"><span class="keyword">let</span> moveFeature = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span><br><span class="line">  <span class="keyword">let</span> frameState = event.frameState;</span><br><span class="line">  <span class="comment">// 当animating为true的时候才执行</span></span><br><span class="line">  <span class="keyword">if</span> (animating) &#123;</span><br><span class="line">    <span class="keyword">let</span> elapsedTime = frameState.time - now;</span><br><span class="line">    <span class="comment">// 这里提升速度的技巧时在lineString的坐标上跳过几个索引</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">Math</span>.round((speed * elapsedTime) / <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 当索引大过总数的时候就结束</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= routeLength) &#123;</span><br><span class="line">      stopAnimation(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把最近的一个点拿出来做成要素，形成动画效果</span></span><br><span class="line">    <span class="keyword">let</span> currentPoint = <span class="keyword">new</span> ol.geom.Point(routeCoords[index]);</span><br><span class="line">    <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(currentPoint);</span><br><span class="line">    vectorContext.drawFeature(feature, styles.geoMarker);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 继续渲染动画</span></span><br><span class="line">  map.render();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>全部代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Marker Animation(标记动画)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"speed"</span>&gt;</span></span><br><span class="line">      速度:<span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"speed"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"10"</span> <span class="attr">max</span>=<span class="string">"999"</span> <span class="attr">step</span>=<span class="string">"10"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start-animation"</span>&gt;</span>开始动画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 通常使用AJAX方式加载数据，但由于jsFiddle的限制，所以这里使用长字符串来替代</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> polyline = [</span></span><br><span class="line"><span class="actionscript">        <span class="string">"hldhx@lnau`BCG_EaC??cFjAwDjF??uBlKMd@&#125;@z@??aC^yk@z_@se@b[wFdE??wFfE&#125;N"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"fIoGxB_I\\gG&#125;@eHoCyTmPqGaBaHOoD\\??yVrGotA|N??o[N_STiwAtEmHGeHcAkiA&#125;^"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"aMyBiHOkFNoI`CcVvM??gG^gF_@iJwC??eCcA]OoL&#125;DwFyCaCgCcCwDcGwHsSoX??wI_E"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"kUFmq@hBiOqBgTwS??iYse@gYq\\cp@ce@&#123;vA&#125;s@csJqaE&#125;&#123;@iRaqE&#123;lBeRoIwd@_T&#123;]_"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"Ngn@&#123;PmhEwaA&#123;SeF_u@kQuyAw]wQeEgtAsZ&#125;LiCarAkVwI&#125;D??_&#125;RcjEinPspDwSqCgs@"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"sPua@_OkXaMeT_Nwk@ob@gV&#125;TiYs[uTwXoNmT&#123;Uyb@wNg]&#123;Nqa@oDgNeJu_@_G&#125;YsFw]k"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"DuZyDmm@i_@uyIJe~@jCg|@nGiv@zUi_BfNqaAvIow@dEed@dCcf@r@qz@Egs@&#123;Acu@mC"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"um@yIey@gGig@cK_m@aSku@qRil@we@&#123;mAeTej@&#125;Tkz@cLgr@aHko@qOmcEaJw~C&#123;w@ka"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"i@qBchBq@kmBS&#123;kDnBscBnFu_Dbc@_~QHeU`IuyDrC_&#125;@bByp@fCyoA?qMbD&#125;&#123;AIkeAgB"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"k_A_A&#123;UsDke@gFej@qH&#123;o@qGgb@qH&#123;`@mMgm@uQus@kL&#123;_@yOmd@ymBgwE&#125;x@ouBwtA__"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"DuhEgaKuWct@gp@cnBii@mlBa_@&#125;|Asj@qrCg^eaC&#125;L&#123;dAaJ_aAiOyjByH&#123;nAuYu`GsAw"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"Xyn@ywMyOyqD&#123;_@cfIcDe&#125;@y@aeBJmwA`CkiAbFkhBlTgdDdPyiB`W&#125;xDnSa&#125;DbJyhCrX"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"itAhT&#125;x@bE&#125;Z_@qW_Kwv@qKaaAiBgXvIm&#125;A~JovAxCqW~WanB`XewBbK&#123;_A`K&#125;fBvAmi@"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"xBycBeCauBoF&#125;&#125;@qJioAww@gjHaPopA_NurAyJku@uGmi@cDs[eRaiBkQstAsQkcByNma"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"CsK_uBcJgbEw@gkB_@ypEqDoqSm@eZcDwjBoGw`BoMegBaU_`Ce_@_uBqb@ytBwkFqiT_"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"fAqfEwe@mfCka@_eC_UmlB&#125;MmaBeWkkDeHwqAoX&#125;~DcBsZmLcxBqOwqE_DkyAuJmrJ\\o"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"~CfIewG|YibQxBssB?es@qGciA&#125;RorAoVajA_nAodD&#123;[y`AgPqp@mKwr@ms@umEaW&#123;dAm"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"b@umAw|@ojBwzDaaJsmBwbEgdCsrFqhAihDquAi`Fux@&#125;_Dui@_eB_u@guCuyAuiHukA_"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"lKszAu|OmaA&#123;wKm&#125;@clHs_A_rEahCssKo\\sgBsSglAqk@yvDcS_wAyTwpBmPc|BwZknF"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"oFscB_GsaDiZmyMyLgtHgQonHqT&#123;hKaPg&#125;Dqq@m~Hym@c`EuiBudIabB&#123;hF&#123;pWifx@snA"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"w`GkFyVqf@y~BkoAi&#125;Lel@wtc@&#125;`@oaXi_C&#125;pZsi@eqGsSuqJ|Lqeb@e]kgPcaAu&#125;SkDw"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"zGhn@gjYh\\qlNZovJieBqja@ed@siO&#123;[ol\\kCmjMe\\isHorCmec@uLebB&#125;EqiBaCg&#125;"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"@m@qwHrT_vFps@kkI`uAszIrpHuzYxx@e&#123;Crw@kpDhN&#123;wBtQarDy@knFgP_yCu\\wyCwy"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"A&#123;kHo~@omEoYmoDaEcPiuAosDagD&#125;rO&#123;&#123;AsyEihCayFilLaiUqm@_bAumFo&#125;DgqA_uByi"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"@swC~AkzDlhA&#125;xEvcBa&#125;Cxk@ql@`rAo|@~bBq&#123;@``Bye@djDww@z_C_cAtn@ye@nfC_eC"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"|gGahH~s@w&#125;@``Fi~FpnAooC|u@wlEaEedRlYkrPvKerBfYs&#125;Arg@m&#125;AtrCkzElw@gjBb"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"h@woBhR&#123;gCwGkgCc[wtCuOapAcFoh@uBy[yBgr@c@iq@o@wvEv@sp@`FajBfCaq@fIipA"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"dy@ewJlUc`ExGuaBdEmbBpBssArAuqBBg&#125;@s@g&#123;AkB&#123;bBif@_bYmC&#125;r@kDgm@sPq_BuJ_"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"s@&#123;X_&#123;AsK_d@eM&#123;d@wVgx@oWcu@??aDmOkNia@wFoSmDyMyCkPiBePwAob@XcQ|@oNdCo"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"SfFwXhEmOnLi\\lbAulB`X_d@|k@au@bc@oc@bqC&#125;&#123;BhwDgcD`l@ed@??bL&#123;G|a@eTje@"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"oS~]cLr~Bgh@|b@&#125;Jv&#125;EieAlv@sPluD&#123;z@nzA_]`|KchCtd@sPvb@wSb&#123;@ko@f`RooQ~e"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"[upZbuIolI|gFafFzu@iq@nMmJ|OeJn^&#123;Qjh@yQhc@uJ~j@iGdd@kAp~BkBxO&#123;@|QsAfY"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"gEtYiGd]&#125;Jpd@wRhVoNzNeK`j@ce@vgK&#125;cJnSoSzQkVvUm^rSgc@`Uql@xIq\\vIgg@~k"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"Dyq[nIir@jNoq@xNwc@fYik@tk@su@neB&#125;uBhqEesFjoGeyHtCoD|D&#125;Ed|@ctAbIuOzqB"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"_&#125;D~NgY`\\um@v[gm@v&#123;Cw`G`w@o&#123;AdjAwzBh&#123;C&#125;`Gpp@ypAxn@&#125;mAfz@&#123;bBbNia@??jI"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"ab@`CuOlC&#125;YnAcV`@_^m@aeB&#125;@yk@YuTuBg^uCkZiGk\\yGeY&#125;Lu_@oOsZiTe[uWi[sl@"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"mo@soAauAsrBgzBqgAglAyd@ig@asAcyAklA&#125;qAwHkGi&#123;@s~@goAmsAyDeEirB_&#123;B&#125;IsJ"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"uEeFymAssAkdAmhAyTcVkFeEoKiH&#125;l@kp@wg@sj@ku@ey@uh@kj@&#125;EsFmG&#125;Jk^_r@_f@m"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"~@ym@yjA??a@cFd@kBrCgDbAUnAcBhAyAdk@et@??kF&#125;D??OL"</span></span></span><br><span class="line"><span class="actionscript">      ].join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// https://openlayers.org/en/latest/apidoc/module-ol_format_Polyline-Polyline.html</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> route = <span class="keyword">new</span> ol.format.Polyline(&#123;</span></span><br><span class="line">        factor: 1e6</span><br><span class="line"><span class="actionscript">        <span class="comment">// 返回一个geometry</span></span></span><br><span class="line">      &#125;).readGeometry(polyline, &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 数据源的投影格式和生成要素的投影格式</span></span></span><br><span class="line"><span class="actionscript">        dataProjection: <span class="string">"EPSG:4326"</span>,</span></span><br><span class="line"><span class="actionscript">        featureProjection: <span class="string">"EPSG:3857"</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 获取路线的坐标</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> routeCoords = route.getCoordinates();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> routeLength = routeCoords.length;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 每个要素分别设置一个type,用于设置样式</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 路线的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> routeFeature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">        type: <span class="string">"route"</span>,</span></span><br><span class="line">        geometry: route</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 运动点的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> geoMarker = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">        type: <span class="string">"geoMarker"</span>,</span></span><br><span class="line"><span class="actionscript">        geometry: <span class="keyword">new</span> ol.geom.Point(routeCoords[<span class="number">0</span>])</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 开始点标志的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> startMarker = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">        type: <span class="string">"icon"</span>,</span></span><br><span class="line"><span class="actionscript">        geometry: <span class="keyword">new</span> ol.geom.Point(routeCoords[<span class="number">0</span>])</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 结束点标志的要素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> endMarker = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">        type: <span class="string">"icon"</span>,</span></span><br><span class="line"><span class="actionscript">        geometry: <span class="keyword">new</span> ol.geom.Point(routeCoords[routeLength - <span class="number">1</span>])</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 对应各type的样式</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> styles = &#123;</span></span><br><span class="line"><span class="actionscript">        route: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line">            width: 6,</span><br><span class="line">            color: [237, 212, 0, 0.8]</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        icon: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          image: <span class="keyword">new</span> ol.style.Icon(&#123;</span></span><br><span class="line">            anchor: [0.5, 1],</span><br><span class="line"><span class="actionscript">            src: <span class="string">"../data/icon.png"</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="actionscript">        geoMarker: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line">            radius: 7,</span><br><span class="line"><span class="actionscript">            fill: <span class="keyword">new</span> ol.style.Fill(&#123; color: <span class="string">"black"</span> &#125;),</span></span><br><span class="line"><span class="actionscript">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">              color: <span class="string">"white"</span>,</span></span><br><span class="line">              width: 2</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 是否出于运动状态的标志</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> animating = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 移动速度,当前时间戳</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> speed, now;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 速度输入框和开始按钮</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> speedInput = <span class="built_in">document</span>.getElementById(<span class="string">"speed"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> startButton = <span class="built_in">document</span>.getElementById(<span class="string">"start-animation"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 添加这些要素的图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line">          features: [routeFeature, geoMarker, startMarker, endMarker]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="javascript">        style: <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 当正在运动时隐藏初始位置标志点</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (animating &amp;&amp; feature.get(<span class="string">"type"</span>) === <span class="string">"geoMarker"</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 根据类型返回样式</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> styles[feature.get(<span class="string">"type"</span>)];</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 基本地图设置</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> center = [<span class="number">-5639523.95</span>, <span class="number">-3501274.52</span>];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="javascript">        target: <span class="built_in">document</span>.getElementById(<span class="string">"map"</span>),</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: center,</span><br><span class="line">          zoom: 10,</span><br><span class="line">          minZoom: 2,</span><br><span class="line">          maxZoom: 19</span><br><span class="line">        &#125;),</span><br><span class="line">        layers: [</span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">            source: <span class="keyword">new</span> ol.source.BingMaps(&#123;</span></span><br><span class="line"><span class="actionscript">              imagerySet: <span class="string">"AerialWithLabelsOnDemand"</span>,</span></span><br><span class="line"><span class="actionscript">              key: <span class="string">"Your Bing Maps Key from http://www.bingmapsportal.com/ here"</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;),</span><br><span class="line">          vectorLayer</span><br><span class="line">        ]</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 移动要素的回调函数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> moveFeature = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> frameState = event.frameState;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当animating为true的时候才执行</span></span></span><br><span class="line">        if (animating) &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> elapsedTime = frameState.time - now;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 这里提升速度的技巧时在lineString的坐标上跳过几个索引</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> index = <span class="built_in">Math</span>.round((speed * elapsedTime) / <span class="number">1000</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 当索引大过总数的时候就结束</span></span></span><br><span class="line">          if (index &gt;= routeLength) &#123;</span><br><span class="line"><span class="actionscript">            stopAnimation(<span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 把最近的一个点拿出来做成要素，形成动画效果</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> currentPoint = <span class="keyword">new</span> ol.geom.Point(routeCoords[index]);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(currentPoint);</span></span><br><span class="line">          vectorContext.drawFeature(feature, styles.geoMarker);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 继续渲染动画</span></span></span><br><span class="line">        map.render();</span><br><span class="line">      &#125;;</span><br><span class="line">      /**</span><br><span class="line">       * @description: 按钮点击的回调函数</span><br><span class="line"><span class="actionscript">       * @param &#123;type&#125; <span class="literal">null</span></span></span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> startAnimation = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">        if (animating) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果animating为true就执行停止动画的函数</span></span></span><br><span class="line"><span class="actionscript">          stopAnimation(<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 把animating改为true，设置时间戳，取到初始速度，把按钮文字设为取消动画</span></span></span><br><span class="line"><span class="actionscript">          animating = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">          now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line">          speed = speedInput.value;</span><br><span class="line"><span class="actionscript">          startButton.textContent = <span class="string">"取消动画"</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 隐藏标记</span></span></span><br><span class="line"><span class="actionscript">          geoMarker.setStyle(<span class="literal">null</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 防止平移了地图，重新设置地图中心</span></span></span><br><span class="line">          map.getView().setCenter(center);</span><br><span class="line"><span class="actionscript">          <span class="comment">// 添加postrender回调</span></span></span><br><span class="line"><span class="actionscript">          vectorLayer.on(<span class="string">"postrender"</span>, moveFeature);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 渲染地图</span></span></span><br><span class="line">          map.render();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * @description: 停止动画</span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Boolean</span>&#125; ended 为<span class="literal">true</span>的时候也就是正常结束，所以标记在最后；为<span class="literal">false</span>的时候是主动取消，所以标记在最前。</span></span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> stopAnimation = <span class="function"><span class="params">ended</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 把aniamting设为false，把按钮文字改为开始动画</span></span></span><br><span class="line"><span class="actionscript">        animating = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">        startButton.textContent = <span class="string">"开始动画"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果点击取消动画，在开始的地方设置标记</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果ended为true，就把点放到最后一个；如果ended为false，就把点放第一个。</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> coord = ended ? routeCoords[routeLength - <span class="number">1</span>] : routeCoords[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 给geoMaker设为coords</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> geometry = geoMarker.getGeometry();</span></span><br><span class="line">        geometry.setCoordinates(coord);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 解绑postrender事件监听</span></span></span><br><span class="line"><span class="actionscript">        vectorLayer.un(<span class="string">"postrender"</span>, moveFeature);</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 给按钮绑定点击事件</span></span></span><br><span class="line"><span class="actionscript">      startButton.addEventListener(<span class="string">"click"</span>, startAnimation, <span class="literal">false</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Layer Spy（图层探查）</title>
      <link href="/posts/345abd9.html"/>
      <url>/posts/345abd9.html</url>
      
        <content type="html"><![CDATA[<p>分析 Layer Spy 这个 demo，官网介绍是：</p><blockquote><p>Layer rendering can be manipulated in <code>prerender</code> and <code>postrender</code> event listeners. These listeners get an event with a reference to the Canvas rendering context. In this example, the prerender listener sets a clipping mask around the most recent mouse position, giving you a spyglass effect for viewing one layer over another.<br>Move around the map to see the effect. Use the ↑ up and ↓ down arrow keys to adjust the spyglass size.</p></blockquote><blockquote><p>图层渲染是被<code>prerender</code>和<code>postrender</code>事件监听器控制的。这些监听器获得一个带有 Canvas 渲染上下文引用的事件。在这个例子中，<code>prerender</code>事件监听器在最近的鼠标位置处设置一个剪贴蒙版，这个剪贴蒙版能让你用看望远镜的感觉来观察普通地图图层上面的航拍图层。</p><p>在地图上移动鼠标来查看效果。使用 ↑ 上键 和 ↓ 下键来调整望远镜的大小。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/layer-spy.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Layer Spy</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：12 渲染器机制的使用 &gt; 实例 84.图层遮罩</p><a id="more"></a></li></ul><p><img src="/posts/345abd9/spy.gif" alt="Layer Spy"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>在这里应用了必应地图的普通带道路地图（RoadOnDemand）和航拍地图（Aerial），可以发现跟之前地图的<code>source</code>定义相比，多了一个必填的<code>key</code>，这个<code>key</code>是用 bing 地图的开发者账号来申请的，申请链接：<a href="http://www.bingmapsportal.com/。" target="_blank" rel="external nofollow noopener noreferrer">http://www.bingmapsportal.com/。</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layer Spy(图层探查)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 必应地图的申请的key</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> key = <span class="string">"Your Bing Maps Key from http://www.bingmapsportal.com/ here"</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 带道路的普通地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> roads = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.BingMaps(&#123; key: key, imagerySet: <span class="string">"RoadOnDemand"</span> &#125;)</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 航拍地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> imagery = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.BingMaps(&#123; key: key, imagerySet: <span class="string">"Aerial"</span> &#125;)</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">"map"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [roads, imagery],</span><br><span class="line">        target: container,</span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 设定视图中心</span></span></span><br><span class="line">          center: ol.proj.fromLonLat([-109, 46.5]),</span><br><span class="line">          zoom: 6</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>map</code>中设置<code>view</code>中<code>center</code>的时候，使用了<a href="https://openlayers.org/en/latest/apidoc/module-ol_proj.html#.fromLonLat" target="_blank" rel="external nofollow noopener noreferrer">ol.proj.fromLonLat</a>，如下图所示，可以把经纬度转化为指定坐标系下的坐标，默认为<code>EPSG:3857</code>坐标系。</p><p><img src="/posts/345abd9/fromLonLat.jpg" alt></p><h2 id="监听鼠标和键盘事件"><a href="#监听鼠标和键盘事件" class="headerlink" title="监听鼠标和键盘事件"></a>监听鼠标和键盘事件</h2><h3 id="修改望远镜大小"><a href="#修改望远镜大小" class="headerlink" title="修改望远镜大小"></a>修改望远镜大小</h3><p>首先给望远镜设置一个初始大小 75px，然后监听键盘按下（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document#Keyboard_events" target="_blank" rel="external nofollow noopener noreferrer">keydown</a>）事件，同时通过被按下键<code>which</code>属性，也就是<code>keyCode</code>或者<code>charCode</code>来判断是哪一个键（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/which" target="_blank" rel="external nofollow noopener noreferrer">which</a>是一个已经从 web 标准中弃用的事件属性，推荐使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/key/Key_Values" target="_blank" rel="external nofollow noopener noreferrer">key</a>或者<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/code" target="_blank" rel="external nofollow noopener noreferrer">code</a>代替）。</p><p>在计算<code>radius</code>（半径）的时候，同时给<code>radius</code>限制了最大值和最小值。在修改了<code>radius</code>后重新渲染地图并阻止按键的默认事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定圆圈的半径</span></span><br><span class="line"><span class="keyword">let</span> radius = <span class="number">75</span>;</span><br><span class="line"><span class="comment">// 当按上方向键时放大圆圈，按下方向键时缩小圆圈，同时渲染地图并阻止按键默认事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"keydown"</span>, evt =&gt; &#123;</span><br><span class="line">  <span class="comment">// 38为↑键</span></span><br><span class="line">  <span class="keyword">if</span> (evt.which === <span class="number">38</span>) &#123;</span><br><span class="line">    <span class="comment">// 最大半径150</span></span><br><span class="line">    radius = <span class="built_in">Math</span>.min(radius + <span class="number">5</span>, <span class="number">150</span>);</span><br><span class="line">    map.render();</span><br><span class="line">    evt.preventDefault();</span><br><span class="line">    <span class="comment">// 40为↓键</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (evt.which === <span class="number">40</span>) &#123;</span><br><span class="line">    <span class="comment">// 最小半径25</span></span><br><span class="line">    radius = <span class="built_in">Math</span>.max(radius - <span class="number">5</span>, <span class="number">25</span>);</span><br><span class="line">    map.render();</span><br><span class="line">    evt.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="保存鼠标位置"><a href="#保存鼠标位置" class="headerlink" title="保存鼠标位置"></a>保存鼠标位置</h3><p>因为需要让望远镜跟随鼠标移动，所以需要监听鼠标位置的变化。如代码所示，监听<code>mousemove</code>，同时利用<code>getEventPixel</code>来获取浏览器事件相对于视区的像素位置，也就是鼠标相对于地图的位置，最后再渲染地图。</p><p><img src="/posts/345abd9/getEventPixel.jpg" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存放鼠标的像素位置</span></span><br><span class="line"><span class="keyword">let</span> mousePosition = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 鼠标移动时把位置传给mousePosition并渲染</span></span><br><span class="line">container.addEventListener(<span class="string">"mousemove"</span>, event =&gt; &#123;</span><br><span class="line">  <span class="comment">// https://openlayers.org/en/latest/apidoc/module-ol_Map-Map.html#getEventPixel</span></span><br><span class="line">  mousePosition = map.getEventPixel(event);</span><br><span class="line">  map.render();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 鼠标离开地图时清空mouserPosition并渲染</span></span><br><span class="line">container.addEventListener(<span class="string">"mouseout"</span>, () =&gt; &#123;</span><br><span class="line">  mousePosition = <span class="literal">null</span>;</span><br><span class="line">  map.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="绘制望远镜"><a href="#绘制望远镜" class="headerlink" title="绘制望远镜"></a>绘制望远镜</h2><p>绘制望远镜圆圈的代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在渲染图层之前，做一些clipping</span></span><br><span class="line">imagery.on(<span class="string">"prerender"</span>, event =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> ctx = event.context;</span><br><span class="line">  <span class="comment">// 获取像素比,普通屏幕应该为1</span></span><br><span class="line">  <span class="keyword">let</span> pixelRatio = event.frameState.pixelRatio;</span><br><span class="line">  ctx.save();</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  <span class="comment">// 当mousePosition不为null时才执行</span></span><br><span class="line">  <span class="keyword">if</span> (mousePosition) &#123;</span><br><span class="line">    <span class="comment">// canvas绘制圆圈</span></span><br><span class="line">    ctx.arc(</span><br><span class="line">      mousePosition[<span class="number">0</span>] * pixelRatio,</span><br><span class="line">      mousePosition[<span class="number">1</span>] * pixelRatio,</span><br><span class="line">      radius * pixelRatio,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">2</span> * <span class="built_in">Math</span>.PI</span><br><span class="line">    );</span><br><span class="line">    ctx.lineWidth = <span class="number">5</span> * pixelRatio;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"rgba(0,0,0,0.5)"</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 仅显示imagery中画圆圈的部分</span></span><br><span class="line">  <span class="comment">// https://www.w3school.com.cn/tiy/t.asp?f=html5_canvas_clip</span></span><br><span class="line">  ctx.clip();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在图层渲染之后，重置canvas上下文</span></span><br><span class="line">imagery.on(<span class="string">"postrender"</span>, event =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> ctx = event.context;</span><br><span class="line">  ctx.restore();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>imagery</code>图层上监听事件<a href="https://openlayers.org/en/latest/apidoc/module-ol_render_Event-RenderEvent.html#event:prerender" target="_blank" rel="external nofollow noopener noreferrer">prerender</a>和<a href="https://openlayers.org/en/latest/apidoc/module-ol_render_Event-RenderEvent.html#event:postrender" target="_blank" rel="external nofollow noopener noreferrer">postrender</a>，<code>prerender</code>是图层渲染之前触发，<code>postrender</code>是图层渲染之后触发。</p><p>在<code>prerender</code>事件中，首先拿到<code>pixelRatio</code>，通过<a href="https://openlayers.org/en/latest/apidoc/module-ol_PluggableMap.html#~FrameState" target="_blank" rel="external nofollow noopener noreferrer">API</a>可以发现实际上是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/devicePixelRatio" target="_blank" rel="external nofollow noopener noreferrer">window.devicePixelRatio</a>，简单点说，就是一个渲染出来的像素大小与设备像素的大小比值，一般情况下，普通屏幕都是<code>1</code>，高清屏幕为<code>2</code>。</p><p>再获取上下文<code>context</code>，熟悉 canvas 绘制的同志们肯定很熟悉。这里需要先<code>save</code>，然后再开始绘制，绘制完成以后还需要<code>clip</code>一下，才会把绘制好的圆圈截取出来（关于<code>clip</code>的作用可以看<a href="https://www.w3school.com.cn/tiy/t.asp?f=html5_canvas_clip" target="_blank" rel="external nofollow noopener noreferrer">这里</a>）。</p><p>最后的时候，还需要在<code>postrender</code>的时候使用<code>restore</code>重置上下文环境到<code>save</code>的位置，清空 canvas，为下一次渲染做准备。不断循环渲染就能实现了跟随鼠标的望远镜效果。</p><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>最后贴上全部代码，<code>key</code>需要自己申请。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layer Spy(图层探查)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 必应地图的申请的key</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> key = <span class="string">"Your Bing Maps Key from http://www.bingmapsportal.com/ here"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 带道路的普通地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> roads = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.BingMaps(&#123; key: key, imagerySet: <span class="string">"RoadOnDemand"</span> &#125;)</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 航拍地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> imagery = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.BingMaps(&#123; key: key, imagerySet: <span class="string">"Aerial"</span> &#125;)</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">"map"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [roads, imagery],</span><br><span class="line">        target: container,</span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 设定视图中心</span></span></span><br><span class="line">          center: ol.proj.fromLonLat([-109, 46.5]),</span><br><span class="line">          zoom: 6</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 设定圆圈的半径</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> radius = <span class="number">75</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 当按上方向键时放大圆圈，按下方向键时缩小圆圈，同时渲染地图并阻止按键默认事件</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.addEventListener(<span class="string">"keydown"</span>, evt =&gt; &#123;</span></span><br><span class="line">        if (evt.which === 38) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 最大半径150</span></span></span><br><span class="line"><span class="javascript">          radius = <span class="built_in">Math</span>.min(radius + <span class="number">5</span>, <span class="number">150</span>);</span></span><br><span class="line">          map.render();</span><br><span class="line">          evt.preventDefault();</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (evt.which === <span class="number">40</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 最小半径25</span></span></span><br><span class="line"><span class="javascript">          radius = <span class="built_in">Math</span>.max(radius - <span class="number">5</span>, <span class="number">25</span>);</span></span><br><span class="line">          map.render();</span><br><span class="line">          evt.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 存放鼠标的像素位置</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> mousePosition = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 鼠标移动时把位置传给mousePosition并渲染</span></span></span><br><span class="line"><span class="actionscript">      container.addEventListener(<span class="string">"mousemove"</span>, event =&gt; &#123;</span></span><br><span class="line">        mousePosition = map.getEventPixel(event);</span><br><span class="line">        map.render();</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 鼠标离开地图时清空mouserPosition并渲染</span></span></span><br><span class="line"><span class="actionscript">      container.addEventListener(<span class="string">"mouseout"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        mousePosition = <span class="literal">null</span>;</span></span><br><span class="line">        map.render();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 在渲染图层之前，做一些clipping</span></span></span><br><span class="line"><span class="actionscript">      imagery.on(<span class="string">"prerender"</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ctx = event.context;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取像素比,普通屏幕应该为1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pixelRatio = event.frameState.pixelRatio;</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.beginPath();</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当mousePosition不为null时才执行</span></span></span><br><span class="line">        if (mousePosition) &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// canvas绘制圆圈</span></span></span><br><span class="line">          ctx.arc(</span><br><span class="line">            mousePosition[0] * pixelRatio,</span><br><span class="line">            mousePosition[1] * pixelRatio,</span><br><span class="line">            radius * pixelRatio,</span><br><span class="line">            0,</span><br><span class="line"><span class="javascript">            <span class="number">2</span> * <span class="built_in">Math</span>.PI</span></span><br><span class="line">          );</span><br><span class="line">          ctx.lineWidth = 5 * pixelRatio;</span><br><span class="line"><span class="actionscript">          ctx.strokeStyle = <span class="string">"rgba(0,0,0,0.5)"</span>;</span></span><br><span class="line">          ctx.stroke();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 仅显示imagery中画圆圈的部分</span></span></span><br><span class="line">        ctx.clip();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 在图层渲染之后，重置canvas上下文</span></span></span><br><span class="line"><span class="actionscript">      imagery.on(<span class="string">"postrender"</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ctx = event.context;</span></span><br><span class="line">        ctx.restore();</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Flight Animation（动态航线）</title>
      <link href="/posts/c5398f0a.html"/>
      <url>/posts/c5398f0a.html</url>
      
        <content type="html"><![CDATA[<p>分析 Flight Animation 这个 demo，官网介绍是：</p><blockquote><p>This example shows how to use postrender and vectorContext to animate flights. A great circle arc between two airports is calculated using arc.js and then the flight paths are animated with postrender. The flight data is provided by OpenFlights (a simplified data set from the Mapbox.js documentation is used).<br>此示例展示了如何使用 postrender 和 vectorContext 模拟航线动画。使用 arc.js 来计算了两个机场之间的弧线并使用 postrender 模拟航线路径动画。航线的数据来自于 OpenFlights（Mapbox.js 文档里面也使用了这个简单的数据）。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/flight-animation.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Flight Animation</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：12 渲染器机制的使用 &gt; 实例 83.航班轨迹</p><a id="more"></a></li></ul><p><img src="/posts/c5398f0a/flight.gif" alt="Flight Animation"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>先展示地图基本结构，与之前的主要区别是引入了一个 <a href="https://docs.mapbox.com/mapbox.js/example/v1.0.0/arcjs/" target="_blank" rel="external nofollow noopener noreferrer">arc.js</a>，用来生成弧线：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://api.mapbox.com/mapbox.js/plugins/arc.js/v0.1.0/arc.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flight Animation(航线动画)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tileLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用了Stamen源</span></span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="actionscript">          layer: <span class="string">"toner"</span> <span class="comment">// 碳粉样式</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [tileLayer],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生成航线"><a href="#生成航线" class="headerlink" title="生成航线"></a>生成航线</h2><p>生成航线的方式与常规一致，生成<code>style</code>、<code>source</code>和<code>layer</code>对象，然后再<code>map.addLayer()</code>把图层添加给地图。与之前 demo 的主要区别在于<code>flightsSource</code>中的<code>loader</code>属性：</p><p>关于<code>loader</code>的<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.html" target="_blank" rel="external nofollow noopener noreferrer">介绍</a>：</p><blockquote><p>The loader function used to load features, from a remote source for example. If this is not set and <code>url</code> is set, the source will create and use an XHR feature loader.</p><p>loader 函数被用来从远程资源处加载要素，如果 loader 属性没有设置但是 url 属性已设置，source 就会创建并使用一个 XHR 要素加载器。</p></blockquote><p>在使用的时候如代码所示，就是在回调函数中：请求数据源=&gt;处理数据=&gt;设置逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">  stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">    color: <span class="string">"#EAE911"</span>,</span><br><span class="line">    width: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flightsSource = <span class="keyword">new</span> ol.source.Vector(&#123;</span><br><span class="line">  wrapX: <span class="literal">false</span>,</span><br><span class="line">  attributions:</span><br><span class="line">    <span class="string">"Flight data by "</span> +</span><br><span class="line">    <span class="string">'&lt;a href="http://openflights.org/data.html"&gt;OpenFlights&lt;/a&gt;,'</span>,</span><br><span class="line">  <span class="comment">// 异步请求数据源</span></span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求数据源</span></span><br><span class="line">    <span class="keyword">let</span> url =</span><br><span class="line">      <span class="string">"https://openlayers.org/en/latest/examples/data/openflights/flights.json"</span>;</span><br><span class="line">    fetch(url)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> response.json();</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 处理数据</span></span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> flightsData = json.flights;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; flightsData.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 分解出每个航线的起止点</span></span><br><span class="line">          <span class="keyword">let</span> flight = flightsData[i];</span><br><span class="line">          <span class="keyword">let</span> <span class="keyword">from</span> = flight[<span class="number">0</span>];</span><br><span class="line">          <span class="keyword">let</span> to = flight[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 用arcjs在起止点之间生成一个弧对象生成器</span></span><br><span class="line">          <span class="keyword">let</span> arcGenerator = <span class="keyword">new</span> arc.GreatCircle(</span><br><span class="line">            &#123; <span class="attr">x</span>: <span class="keyword">from</span>[<span class="number">1</span>], <span class="attr">y</span>: <span class="keyword">from</span>[<span class="number">0</span>] &#125;,</span><br><span class="line">            &#123; <span class="attr">x</span>: to[<span class="number">1</span>], <span class="attr">y</span>: to[<span class="number">0</span>] &#125;</span><br><span class="line">          );</span><br><span class="line">          <span class="comment">// 用弧对象生成器来生成弧线</span></span><br><span class="line">          <span class="keyword">let</span> arcLine = arcGenerator.Arc(<span class="number">100</span>, &#123; <span class="attr">offset</span>: <span class="number">10</span> &#125;);</span><br><span class="line">          <span class="keyword">if</span> (arcLine.geometries.length === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 利用弧对象生成一个LineString对象并转化到3857坐标系</span></span><br><span class="line">            <span class="keyword">let</span> line = <span class="keyword">new</span> ol.geom.LineString(arcLine.geometries[<span class="number">0</span>].coords);</span><br><span class="line">            line.transform(<span class="string">"EPSG:4326"</span>, <span class="string">"EPSG:3857"</span>);</span><br><span class="line">            <span class="comment">// 把LineString对象转化为要素，finished设为false</span></span><br><span class="line">            <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">              geometry: line,</span><br><span class="line">              finished: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 让不同的航线每隔50ms开始发射</span></span><br><span class="line">            addLater(feature, i * <span class="number">50</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tileLayer.on(<span class="string">"postrender"</span>, animateFlights);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建一个绘制飞行轨迹的图层</span></span><br><span class="line"><span class="keyword">let</span> flightsLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span><br><span class="line">  source: flightsSource,</span><br><span class="line">  style: <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果这个要素的动画依然是活动的，就不用预定义的样式渲染这个要素</span></span><br><span class="line">    <span class="keyword">if</span> (feature.get(<span class="string">"finished"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> style;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">map.addLayer(flightsLayer);</span><br></pre></td></tr></table></figure><h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><p>请求数据时使用的是 ES6 中的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="external nofollow noopener noreferrer">fetch</a>，使用<code>Promise</code>封装请求，请求到的数据格式如下所示，只截取了前三个示例，数据结构非常清晰，<code>flights</code>是一个航线数组，每个里面都包含起点和终点的经纬度：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"flights"</span>: [</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">43.449928</span>, <span class="number">39.956589</span>],</span><br><span class="line">      [<span class="number">55.606186</span>, <span class="number">49.278728</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">55.34</span>, <span class="number">52.06</span>],</span><br><span class="line">      [<span class="number">45.034689</span>, <span class="number">39.170539</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">55.012622</span>, <span class="number">82.650656</span>],</span><br><span class="line">      [<span class="number">52.268028</span>, <span class="number">104.388975</span>]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成-LineString-对象"><a href="#生成-LineString-对象" class="headerlink" title="生成 LineString 对象"></a>生成 LineString 对象</h3><p>拿到数据之后利用<a href="https://docs.mapbox.com/mapbox.js/example/v1.0.0/arcjs/" target="_blank" rel="external nofollow noopener noreferrer">arc.js</a>来生成弧线，打印一下<code>arcGenerator</code>和<code>arcLine</code>，如下图所示，<code>arcGenerator</code>中包含了弧线的起点和终点的经纬度和屏幕坐标，<code>arcLine</code>生成了一个集合体对象。在<code>arcLine</code>生成的对象中可以看到，<code>LineString</code>的<code>coords</code>是一个长度为 100 的数组，<code>arcGenerator.Arc(100, { offset: 10 })</code>中的 100 就是代表把弧线分成 100 个直线来实现。</p><p><img src="/posts/c5398f0a/arc.jpg" alt></p><p>把<code>arcLine</code>生成的几何体对象转化为<code>ol.geom.LineString</code>对象并改为 3857 坐标系，接下来生成要素的时候同时赋值一个<code>finished</code>属性为<code>false</code> 。</p><p>然后执行<code>addLater(feature, i * 50)</code>和<code>tileLayer.on(&quot;postrender&quot;, animateFlights)</code>，这两句中的<code>addLater</code>和<code>animateFlights</code>两个函数是为了航线的动画实现而构建的。</p><h2 id="核心动画逻辑函数"><a href="#核心动画逻辑函数" class="headerlink" title="核心动画逻辑函数"></a>核心动画逻辑函数</h2><h3 id="addLater"><a href="#addLater" class="headerlink" title="addLater"></a>addLater</h3><p><code>addLater</code>是添加要素的方法，代码如下所示，利用<code>setTimeOut</code>分时间差逐次添加航线的轨迹，营造出一种航线非同步发出的的真实感。并给每个要素设置一个<code>start</code>起始时间，用来给后面的逻辑计算动画用时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 添加要素的函数，</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span>feature 要素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>timeout 延迟时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> addLater = <span class="function">(<span class="params">feature, timeout</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设定一个start初始时间</span></span><br><span class="line">    feature.set(<span class="string">"start"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">    flightsSource.addFeature(feature);</span><br><span class="line">  &#125;, timeout);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="animateFlights"><a href="#animateFlights" class="headerlink" title="animateFlights"></a>animateFlights</h3><p><code>animateFlights</code>是动画执行逻辑的方法。如下所示，首先定义了一个常量<code>pointsPerMs</code>，这个常量的意义是没 ms 走过多少个点。前面已经把弧线分成了 100 段，<code>pointsPerMs</code>为 0.1 就是代表着 1ms 走 0.1 段，也就是 1s 走 100 段，所以动画正好 1s 完成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pointsPerMs = <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 绘制航线动画的核心函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span>event 回调参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> animateFlights = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取矢量上下文和当前帧，然后设定一个样式</span></span><br><span class="line">  <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span><br><span class="line">  <span class="keyword">let</span> frameState = event.frameState;</span><br><span class="line">  vectorContext.setStyle(style);</span><br><span class="line">  <span class="comment">// 获取source中的要素</span></span><br><span class="line">  <span class="keyword">let</span> features = flightsSource.getFeatures();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; features.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> feature = features[i];</span><br><span class="line">    <span class="comment">// 如果这个要素的动画没有执行完再执行</span></span><br><span class="line">    <span class="keyword">if</span> (!feature.get(<span class="string">"finished"</span>)) &#123;</span><br><span class="line">      <span class="keyword">let</span> coords = feature.getGeometry().getCoordinates();</span><br><span class="line">      <span class="comment">// 计算已执行时间</span></span><br><span class="line">      <span class="keyword">let</span> elapsedTime = frameState.time - feature.get(<span class="string">"start"</span>);</span><br><span class="line">      <span class="comment">// 计算已执行的点数</span></span><br><span class="line">      <span class="keyword">let</span> elapsedPoints = elapsedTime * pointsPerMs;</span><br><span class="line">      <span class="comment">// 如果执行完成就设置finished为true</span></span><br><span class="line">      <span class="keyword">if</span> (elapsedPoints &gt;= coords.length) &#123;</span><br><span class="line">        feature.set(<span class="string">"finished"</span>, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建当前帧的线</span></span><br><span class="line">      <span class="keyword">let</span> maxIndex = <span class="built_in">Math</span>.min(elapsedPoints, coords.length);</span><br><span class="line">      <span class="keyword">let</span> currentLine = <span class="keyword">new</span> ol.geom.LineString(coords.slice(<span class="number">0</span>, maxIndex));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 绘制</span></span><br><span class="line">      vectorContext.drawGeometry(currentLine);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 继续渲染地图</span></span><br><span class="line">  map.render();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>动画实现的方式也和之前几个实例基本一致，获取了矢量上下文和当前帧以后，先判断要素的<code>finished</code>属性是否为<code>false</code>，然后用当前帧时间和要素的<code>start</code>属性来计算动画已执行时间和已执行的段数（此时如果 100 段都执行完就设置<code>finished</code>为<code>true</code>），最后把当前帧的应该显示到的线段绘制出来并执行<code>map.render()</code>继续渲染地图。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>最后展示一下源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://api.mapbox.com/mapbox.js/plugins/arc.js/v0.1.0/arc.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flight Animation(航线动画)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tileLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="actionscript">          layer: <span class="string">"toner"</span> <span class="comment">// 碳粉</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [tileLayer],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">"#EAE911"</span>,</span></span><br><span class="line">          width: 2</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> flightsSource = <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        wrapX: <span class="literal">false</span>,</span></span><br><span class="line">        attributions:</span><br><span class="line"><span class="actionscript">          <span class="string">"Flight data by "</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">          '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://openflights.org/data.html"</span>&gt;</span>OpenFlights<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,',</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 异步请求数据源</span></span></span><br><span class="line"><span class="javascript">        loader: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> url =</span></span><br><span class="line"><span class="actionscript">            <span class="string">"https://openlayers.org/en/latest/examples/data/openflights/flights.json"</span>;</span></span><br><span class="line">          fetch(url)</span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> response.json();</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> flightsData = json.flights;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; flightsData.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 分解出每个航线的起止点</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> flight = flightsData[i];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> <span class="keyword">from</span> = flight[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> to = flight[<span class="number">1</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 用arcjs在起止点之间生成一个弧对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> arcGenerator = <span class="keyword">new</span> arc.GreatCircle(</span></span><br><span class="line"><span class="javascript">                  &#123; <span class="attr">x</span>: <span class="keyword">from</span>[<span class="number">1</span>], <span class="attr">y</span>: <span class="keyword">from</span>[<span class="number">0</span>] &#125;,</span></span><br><span class="line">                  &#123; x: to[1], y: to[0] &#125;</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> arcLine = arcGenerator.Arc(<span class="number">100</span>, &#123; <span class="attr">offset</span>: <span class="number">10</span> &#125;);</span></span><br><span class="line"></span><br><span class="line">                if (arcLine.geometries.length === 1) &#123;</span><br><span class="line"><span class="actionscript">                  <span class="comment">// 利用弧对象生成一个LineString对象并转化到3857坐标系</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">let</span> line = <span class="keyword">new</span> ol.geom.LineString(</span></span><br><span class="line">                    arcLine.geometries[0].coords</span><br><span class="line">                  );</span><br><span class="line"><span class="actionscript">                  line.transform(<span class="string">"EPSG:4326"</span>, <span class="string">"EPSG:3857"</span>);</span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// 把LineString对象转化为要素，finished设为false</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line">                    geometry: line,</span><br><span class="line"><span class="actionscript">                    finished: <span class="literal">false</span></span></span><br><span class="line">                  &#125;);</span><br><span class="line"><span class="actionscript">                  <span class="comment">// 让不同的航线每隔50ms开始发射</span></span></span><br><span class="line">                  addLater(feature, i * 50);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line"><span class="actionscript">              tileLayer.on(<span class="string">"postrender"</span>, animateFlights);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 创建一个绘制飞行轨迹的图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> flightsLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">        source: flightsSource,</span><br><span class="line"><span class="javascript">        style: <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果这个要素的动画依然是活动的，就不用预定义的样式渲染这个要素</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (feature.get(<span class="string">"finished"</span>)) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> style;</span></span><br><span class="line"><span class="actionscript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      map.addLayer(flightsLayer);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> pointsPerMs = <span class="number">0.1</span>;</span></span><br><span class="line">      /**</span><br><span class="line">       * @description: 绘制航线动画的核心函数</span><br><span class="line">       * @param &#123;type&#125; event 回调参数</span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> animateFlights = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取矢量上下文和当前帧，然后设定一个样式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> frameState = event.frameState;</span></span><br><span class="line">        vectorContext.setStyle(style);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取source中的要素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> features = flightsSource.getFeatures();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; features.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> feature = features[i];</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 如果这个要素的动画没有执行完再执行</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (!feature.get(<span class="string">"finished"</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> coords = feature.getGeometry().getCoordinates();</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 计算已执行时间</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> elapsedTime = frameState.time - feature.get(<span class="string">"start"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 计算已执行的点数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> elapsedPoints = elapsedTime * pointsPerMs;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 如果执行完成就设置finished为true</span></span></span><br><span class="line">            if (elapsedPoints &gt;= coords.length) &#123;</span><br><span class="line"><span class="actionscript">              feature.set(<span class="string">"finished"</span>, <span class="literal">true</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 创建当前帧的线</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> maxIndex = <span class="built_in">Math</span>.min(elapsedPoints, coords.length);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> currentLine = <span class="keyword">new</span> ol.geom.LineString(coords.slice(<span class="number">0</span>, maxIndex));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 绘制</span></span></span><br><span class="line">            vectorContext.drawGeometry(currentLine);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 继续渲染地图</span></span></span><br><span class="line">        map.render();</span><br><span class="line">      &#125;;</span><br><span class="line">      /**</span><br><span class="line">       * @description: 添加要素的函数，</span><br><span class="line">       * @param &#123;type&#125; feature 要素</span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Number</span>&#125; timeout 延迟时间</span></span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> addLater = <span class="function">(<span class="params">feature, timeout</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 设定一个start初始时间</span></span></span><br><span class="line"><span class="javascript">          feature.set(<span class="string">"start"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span></span><br><span class="line">          flightsSource.addFeature(feature);</span><br><span class="line">        &#125;, timeout);</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Custom Animation（水波扩散）</title>
      <link href="/posts/911be51e.html"/>
      <url>/posts/911be51e.html</url>
      
        <content type="html"><![CDATA[<p>分析 Custom Animation 这个 demo，官网介绍是：</p><blockquote><p>This example shows how to use postrender and vectorContext to animate features. Here we choose to do a flash animation each time a feature is added to the layer.<br>此示例演示如何使用 postrender 和 vectorContext 对要素进行动画处理。 做法是当一个要素被添加到图层时给它添加闪烁效果。</p></blockquote><ul><li><p><a href="https://openlayers.org/en/latest/examples/feature-animation.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Custom Animation</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例讲解</a>：12 渲染器机制的使用 &gt; 实例 82.水纹效果</p><a id="more"></a></li></ul><p><img src="/posts/911be51e/custom.gif" alt="custom"></p><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>先展示地图基本结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Custom Animation(自定义动画)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 定义一个瓦片图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tileLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM(&#123;</span></span><br><span class="line"><span class="actionscript">          wrapX: <span class="literal">false</span> <span class="comment">// 是否水平循环</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 定义一个地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [tileLayer],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 1,</span><br><span class="line"><span class="actionscript">          multiWorld: <span class="literal">true</span> <span class="comment">// 视图是否只能看到一个世界</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> source = <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        wrapX: <span class="literal">false</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">        source: source</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 给map添加一个图层vector</span></span></span><br><span class="line">      map.addLayer(vector);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在地图定义这里跟前一篇的区别主要是<code>map.addLayer(vector)</code>，这里的图层是通过<code>addLayer</code>方法加入到<code>map</code>中的，github 中的<a href="https://github.com/openlayers/openlayers/blob/v6.1.1/src/ol/PluggableMap.js#L490" target="_blank" rel="external nofollow noopener noreferrer">源码</a>如下，看注释可以看出，新加的图层显示在最上层：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds the given layer to the top of this map. If you want to add a layer</span></span><br><span class="line"><span class="comment"> * elsewhere in the stack, use `getLayers()` and the methods available on</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link </span>module:ol/Collection~Collection&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;import("./layer/Base.js").default&#125;</span> </span>layer Layer.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">addLayer(layer) &#123;</span><br><span class="line">  <span class="keyword">const</span> layers = <span class="keyword">this</span>.getLayerGroup().getLayers();</span><br><span class="line">  layers.push(layer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成随机要素"><a href="#生成随机要素" class="headerlink" title="生成随机要素"></a>生成随机要素</h2><p>做动画之前，首先添加需要展示动画的要素，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 给source添加随机位置的要素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;null&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addRandomFeature = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="built_in">Math</span>.random() * <span class="number">360</span> - <span class="number">180</span>; <span class="comment">// 随机区间[-180, 180]</span></span><br><span class="line">  <span class="keyword">let</span> y = <span class="built_in">Math</span>.random() * <span class="number">180</span> - <span class="number">90</span>; <span class="comment">// 随机区间[-90, 90]</span></span><br><span class="line">  <span class="comment">// ol.proj.fromLonLat(coordinate,[projection：默认3857])，转化经纬度为投影下坐标</span></span><br><span class="line">  <span class="comment">// new ol.geom.Point(coordinates, opt_layout) 生成一个点对象</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">let</span> geom = <span class="keyword">new</span> ol.geom.Point(ol.proj.fromLonLat([x, y]));</span><br><span class="line">  <span class="comment">// new ol.Feature(opt_geometryOrProperties) 生成一个要素</span></span><br><span class="line">  <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(geom);</span><br><span class="line">  source.addFeature(feature); <span class="comment">// 把要素添加给vectorSource</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"><span class="comment">// 每1000ms执行一次addRandomFeature，添加一个随机要素</span></span><br><span class="line"><span class="built_in">window</span>.setInterval(addRandomFeature, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="addRandomFeature"><a href="#addRandomFeature" class="headerlink" title="addRandomFeature"></a>addRandomFeature</h3><p>该方法是用来创建随机位置的要素，并添加到<code>source</code>中。首先用随机数模拟了地球上的随机经度[-180, 180]和随机纬度[-90, 90]。然后使用<code>ol.proj.fromLonLat</code>方法将经纬度转化为 3857 坐标系下的坐标，<a href="https://openlayers.org/en/latest/apidoc/module-ol_proj.html#.fromLonLat" target="_blank" rel="external nofollow noopener noreferrer">fromLonLat</a>方法的<a href="https://github.com/openlayers/openlayers/blob/v6.1.1/src/ol/proj.js#L365" target="_blank" rel="external nofollow noopener noreferrer">源码</a>如下，输入一个经纬度，转化为指定坐标系下的坐标（默认 EPSG:3857）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms a coordinate from longitude/latitude to a different projection.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;import("./coordinate.js").Coordinate&#125;</span> </span>coordinate Coordinate as longitude and latitude, i.e.</span></span><br><span class="line"><span class="comment"> *     an array with longitude as 1st and latitude as 2nd element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ProjectionLike=&#125;</span> </span>opt_projection Target projection. The</span></span><br><span class="line"><span class="comment"> *     default is Web Mercator, i.e. 'EPSG:3857'.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;import("./coordinate.js").Coordinate&#125;</span> </span>Coordinate projected to the target projection.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fromLonLat</span>(<span class="params">coordinate, opt_projection</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> transform(</span><br><span class="line">    coordinate,</span><br><span class="line">    <span class="string">"EPSG:4326"</span>,</span><br><span class="line">    opt_projection !== <span class="literal">undefined</span> ? opt_projection : <span class="string">"EPSG:3857"</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="什么是EPSG-3857坐标系？"><a href="#什么是EPSG-3857坐标系？" class="headerlink" title="什么是EPSG:3857坐标系？"></a>什么是<a href="https://github.com/penouc/blog/issues/1" target="_blank" rel="external nofollow noopener noreferrer">EPSG:3857</a>坐标系？</h4><h5 id="EPSG-4326-WGS84"><a href="#EPSG-4326-WGS84" class="headerlink" title="EPSG:4326 (WGS84)"></a>EPSG:4326 (WGS84)</h5><blockquote><p>世界大地测量系统 1984 （World Geodetic System of 1984) 是 GPS 用来描述地球上位置的地理学坐标系统（三维）。WGS84 通常使用 GeoJSON 作为坐标系统的单位，GeoJSON 中使用数字作为经度和纬度的单位。大部分时候，当你描述一个经纬度坐标的时候，它就是基于 EPSG:4326 坐标系统的。</p></blockquote><h5 id="EPSG-3857-Pseudo-Mercator"><a href="#EPSG-3857-Pseudo-Mercator" class="headerlink" title="EPSG: 3857 (Pseudo-Mercator)"></a>EPSG: 3857 (Pseudo-Mercator)</h5><blockquote><p>Pseudo-Mercator 投影系统将 WGS84 坐标系统投影在平面上（这个投影规则也被称之为球面墨卡托或者 web 墨卡托）。但是这个投影系统并不是包含地球上所有的位置，北纬和南纬的 85.06 度以上的地区不会展示。这个投影首次是被使用在 Google 地图上，加上几乎所有的 Web 地图，但是有趣的一点是，这些投影（EPSG:3857）内部都是使用的 WGS84 坐标系统 – 即使用的 WGS84 椭球体构建，但是将它们（EPSG:3857）的坐标是投射在一个球面上。</p></blockquote><p>得到了 3857 坐标系下的坐标以后，需要用<a href="https://openlayers.org/en/latest/apidoc/module-ol_geom_Point-Point.html" target="_blank" rel="external nofollow noopener noreferrer">ol.geom.Point</a>来生成一个点集合体对象，保存着几何体的形状。再用<a href="https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html" target="_blank" rel="external nofollow noopener noreferrer">ol.Feature</a>来生成一个要素，最后把要素添加给<code>source</code>，完成了添加一个点的操作。同时，在代码的最后，设置了一个<code>setInterval</code>，每一秒执行一次<code>addRandomFeature</code>添加一个随机位置点。</p><h3 id="addfeature-事件"><a href="#addfeature-事件" class="headerlink" title="addfeature 事件"></a>addfeature 事件</h3><p>下面的代码就是为在添加要素的时候能够触发动画，<code>duration</code>是提前设置好的每个动画的持续时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> duration = <span class="number">3000</span>; <span class="comment">// 每个点动画持续时间 ms</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 当添加要素时，对该要素执行的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;feature&#125;</span> </span>要素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> flash = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 每当触发添加要素的事件时，执行flash()</span></span><br><span class="line">source.on(<span class="string">"addfeature"</span>, e =&gt; &#123;</span><br><span class="line">  flash(e.feature);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>ol.source.Vector</code>的<a href="https://openlayers.org/en/latest/apidoc/module-ol_source_Vector.VectorSourceEvent.html#event:addfeature" target="_blank" rel="external nofollow noopener noreferrer">事件</a>如下图所示，<code>addfeature</code>事件是当给<code>source</code>添加<code>feature</code>时触发，然后把<code>event.feature</code>传给用来处理动画的 flash 函数。</p><hr><p><img src="/posts/911be51e/vectorsource.jpg" alt></p><hr><h2 id="水纹动画实现"><a href="#水纹动画实现" class="headerlink" title="水纹动画实现"></a>水纹动画实现</h2><p>水波扩散的效果使用<code>postrender</code>事件实现。如代码所示，在<code>flash</code>函数中又定义了一个新的回调函数<code>animate</code>，代码最后的时候把<code>animate</code>绑定给<code>postrender</code>事件，并且保存了一个<code>key</code>，便于在动画结束后及时解除绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flash = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>: 当postrender事件发生时执行的回调函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;event&#125;</span> </span>: 事件对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>: null</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> animate = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span><br><span class="line">    <span class="keyword">let</span> frameState = event.frameState;</span><br><span class="line">    <span class="keyword">let</span> flashGeom = feature.getGeometry().clone(); <span class="comment">//拿到几何体对象</span></span><br><span class="line">    <span class="keyword">let</span> elapsed = frameState.time - start; <span class="comment">// 计算出当前帧所经历的时间</span></span><br><span class="line">    <span class="keyword">let</span> elapsedRatio = elapsed / duration;</span><br><span class="line">    <span class="comment">// 半径从5开始。到30结束</span></span><br><span class="line">    <span class="keyword">let</span> radius = ol.easing.easeOut(elapsedRatio) * <span class="number">25</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 透明度时从有到无</span></span><br><span class="line">    <span class="keyword">let</span> opacity = ol.easing.easeOut(<span class="number">1</span> - elapsedRatio);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">      image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">        radius: radius,</span><br><span class="line">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">          color: <span class="string">"rgba(255, 0, 0, "</span> + opacity + <span class="string">")"</span>, <span class="comment">// 逐渐变得透明</span></span><br><span class="line">          width: <span class="number">0.25</span> + opacity <span class="comment">// 边框变细</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    vectorContext.setStyle(style);</span><br><span class="line">    vectorContext.drawGeometry(flashGeom);</span><br><span class="line">    <span class="comment">// 当持续时间超过了duration后，取消绑定的postrender事件</span></span><br><span class="line">    <span class="keyword">if</span> (elapsed &gt; duration) &#123;</span><br><span class="line">      ol.Observable.unByKey(listenerKey);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map.render();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  <span class="comment">// 保存住postrender事件绑定的key，方便以后解除</span></span><br><span class="line">  <span class="keyword">let</span> listenerKey = tileLayer.on(<span class="string">"postrender"</span>, animate);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="缓动函数"><a href="#缓动函数" class="headerlink" title="缓动函数"></a>缓动函数</h3><p>动画实现在逻辑上最核心的部分如下所示，首先计算出当前已经历的时间与设定的动画时间长度的比例<code>elapsedRatio</code>，这个比例一定是小于 1 的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> elapsed = frameState.time - start; <span class="comment">// 计算出当前帧所经历的时间</span></span><br><span class="line"><span class="keyword">let</span> elapsedRatio = elapsed / duration; <span class="comment">// 计算已经历时间与设定时间长度的比例</span></span><br><span class="line"><span class="comment">// 半径从5开始。到30结束</span></span><br><span class="line"><span class="keyword">let</span> radius = ol.easing.easeOut(elapsedRatio) * <span class="number">25</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 透明度时从有到无</span></span><br><span class="line"><span class="keyword">let</span> opacity = ol.easing.easeOut(<span class="number">1</span> - elapsedRatio);</span><br></pre></td></tr></table></figure><p>计算出<code>elapsedRatio</code>这个比例是有原因的，用过 jQuery 的同学应该更熟悉这里的<code>easing</code>，也就是缓动函数。缓动函数本质上就是传入一个 0-1 之间的值，传出另一个 0-1 之间的值。不同的缓动函数传出的值是不同的，如下图所示，<code>x</code>轴是传入的值，<code>y</code>轴是传出的值。</p><p><img src="/posts/911be51e/easing.png" alt></p><p>在 OpenLayers 中，没有这么多的预置缓动函数类型，主要是下面<a href="https://github.com/openlayers/openlayers/blob/v6.1.1/src/ol/easing.js#L12" target="_blank" rel="external nofollow noopener noreferrer">几种</a>，当然也可以自定义缓动函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@module </span>ol/easing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Start slow and speed up.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>t Input between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span> </span>Output between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">easeIn</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.pow(t, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Start fast and slow down.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>t Input between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span> </span>Output between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">easeOut</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> - easeIn(<span class="number">1</span> - t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Start slow, speed up, and then slow down again.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>t Input between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span> </span>Output between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">inAndOut</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span> * t * t - <span class="number">2</span> * t * t * t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Maintain a constant speed over time.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>t Input between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span> </span>Output between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">linear</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Start slow, speed up, and at the very end slow down again.  This has the</span></span><br><span class="line"><span class="comment"> * same general behavior as &#123;<span class="doctag">@link </span>module:ol/easing~inAndOut&#125;, but the final</span></span><br><span class="line"><span class="comment"> * slowdown is delayed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>t Input between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span> </span>Output between 0 and 1.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">upAndDown</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (t &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> inAndOut(<span class="number">2</span> * t);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - inAndOut(<span class="number">2</span> * (t - <span class="number">0.5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信看完源码，就很轻松的理解缓动函数的实现了，在这个 demo 中，主要是利用<code>easeOut</code>这个缓动函数，实现越扩散越慢的一种波纹视觉效果，本质实际上是随着时间的增长，让半径逐渐变大同时越来越透明。</p><h3 id="解除事件绑定"><a href="#解除事件绑定" class="headerlink" title="解除事件绑定"></a>解除事件绑定</h3><p>之前 demo 中没有见到的 API 还有<code>ol.Observable.unByKey</code>，这个 API 很奇怪，不知道为什么在官网查询 API 的时候查不到，但是在<a href="https://github.com/openlayers/openlayers/blob/v6.1.1/src/ol/Observable.js#L101" target="_blank" rel="external nofollow noopener noreferrer">源码</a>中却能看到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes an event listener using the key returned by `on()` or `once()`.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;import("./events.js").EventsKey|Array&lt;import("./events.js").EventsKey&gt;&#125;</span> </span>key The key returned by `on()`</span></span><br><span class="line"><span class="comment"> *     or `once()` (or an array of keys).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">unByKey</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(key)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, ii = key.length; i &lt; ii; ++i) &#123;</span><br><span class="line">      unlistenByKey(key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    unlistenByKey(<span class="comment">/** @type &#123;import("./events.js").EventsKey&#125; */</span> (key));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是利用<code>key</code>来解除事件绑定。当动画经历的时间已经大于设定的<code>duration</code>了以后，就把这个<code>postrender</code>事件取消掉，这样一次完整的动画就完成了。每添加一个<code>feature</code>时触发一次<code>addfeature</code>，回调函数里都会新加一个<code>postrender</code>的动画事件，最后实现了 demo 中所示的不断有波纹产生的效果。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>最后贴出完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Custom Animation(自定义动画)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      html,</span><br><span class="line">      body,</span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 定义一个瓦片图层</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tileLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM(&#123;</span></span><br><span class="line"><span class="actionscript">          wrapX: <span class="literal">false</span> <span class="comment">// 是否水平循环</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 定义一个地图</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">        layers: [tileLayer],</span><br><span class="line"><span class="actionscript">        target: <span class="string">"map"</span>,</span></span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: [0, 0],</span><br><span class="line">          zoom: 1,</span><br><span class="line"><span class="actionscript">          multiWorld: <span class="literal">true</span> <span class="comment">// 视图是否只能看到一个世界</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> source = <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        wrapX: <span class="literal">false</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line">        source: source</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 给map添加一个图层vector</span></span></span><br><span class="line">      map.addLayer(vector);</span><br><span class="line">      /**</span><br><span class="line">       * @description: 给source添加随机位置的要素</span><br><span class="line"><span class="actionscript">       * @param &#123;<span class="literal">null</span>&#125;</span></span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> addRandomFeature = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> x = <span class="built_in">Math</span>.random() * <span class="number">360</span> - <span class="number">180</span>; <span class="comment">// 随机区间[-180, 180]</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> y = <span class="built_in">Math</span>.random() * <span class="number">180</span> - <span class="number">90</span>; <span class="comment">// 随机区间[-90, 90]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ol.proj.fromLonLat(coordinate,[projection：默认3857])，转化经纬度为投影下坐标</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// new ol.geom.Point(coordinates, opt_layout) 生成一个点对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> geom = <span class="keyword">new</span> ol.geom.Point(ol.proj.fromLonLat([x, y]));</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// new ol.Feature(opt_geometryOrProperties) 生成一个要素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> feature = <span class="keyword">new</span> ol.Feature(geom);</span></span><br><span class="line"><span class="actionscript">        source.addFeature(feature); <span class="comment">// 把要素添加给vectorSource</span></span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> duration = <span class="number">3000</span>; <span class="comment">// 每个点动画持续时间 ms</span></span></span><br><span class="line">      /**</span><br><span class="line">       * @description: 当添加要素时，对该要素执行的回调函数</span><br><span class="line">       * @param &#123;feature&#125; 要素</span><br><span class="line"><span class="actionscript">       * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> flash = <span class="function"><span class="params">feature</span> =&gt;</span> &#123;</span></span><br><span class="line">        /**</span><br><span class="line">         * @description: 当postrender事件发生时执行的回调函数</span><br><span class="line">         * @param &#123;event&#125; : 事件对象</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span>: <span class="literal">null</span></span></span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> animate = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> frameState = event.frameState;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> flashGeom = feature.getGeometry().clone();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> elapsed = frameState.time - start;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> elapsedRatio = elapsed / duration;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 半径从5开始,到30结束</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> radius = ol.easing.easeOut(elapsedRatio) * <span class="number">25</span> + <span class="number">5</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 透明度时从有到无</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> opacity = ol.easing.easeOut(<span class="number">1</span> - elapsedRatio);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line">              radius: radius,</span><br><span class="line"><span class="actionscript">              stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"rgba(255, 0, 0, "</span> + opacity + <span class="string">")"</span>, <span class="comment">// 逐渐变得透明</span></span></span><br><span class="line"><span class="actionscript">                width: <span class="number">0.25</span> + opacity <span class="comment">// 边框变细</span></span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          vectorContext.setStyle(style);</span><br><span class="line">          vectorContext.drawGeometry(flashGeom);</span><br><span class="line"><span class="actionscript">          <span class="comment">// 当持续时间超过了duration后，取消绑定的postrender事件</span></span></span><br><span class="line">          if (elapsed &gt; duration) &#123;</span><br><span class="line">            ol.Observable.unByKey(listenerKey);</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// tell OpenLayers to continue postrender animation</span></span></span><br><span class="line">          map.render();</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 保存住postrender事件绑定的key，方便以后解除</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> listenerKey = tileLayer.on(<span class="string">"postrender"</span>, animate);</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 每当触发添加要素的事件时，执行flash()</span></span></span><br><span class="line"><span class="actionscript">      source.on(<span class="string">"addfeature"</span>, e =&gt; &#123;</span></span><br><span class="line">        flash(e.feature);</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// 每1000ms执行一次addRandomFeature，添加一个随机要素</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.setInterval(addRandomFeature, <span class="number">1000</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：Dynamic Data（动态数据）</title>
      <link href="/posts/ce282862.html"/>
      <url>/posts/ce282862.html</url>
      
        <content type="html"><![CDATA[<p>按照课程顺序，应该先分析Dynamic Data这个demo，对应如下：</p><ul><li><p><a href="https://openlayers.org/en/latest/examples/dynamic-data.html" target="_blank" rel="external nofollow noopener noreferrer">官网实例</a>：Dynamic Data</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学OpenLayers——基础实例讲解</a>：12 渲染器机制的使用 &gt; 实例80.动态点的效果</p><a id="more"></a></li></ul><h2 id="定义基本结构"><a href="#定义基本结构" class="headerlink" title="定义基本结构"></a>定义基本结构</h2><p>先把地图基本结构展示出来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>       <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dynamic Data(动态数据)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义一个使用OSM源的瓦片图层</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> tileLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">            source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 初始化地图</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">            layers: [tileLayer],</span><br><span class="line"><span class="actionscript">            target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">            view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">                center: [0, 0],</span><br><span class="line">                zoom: 2</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义圆圈样式"><a href="#定义圆圈样式" class="headerlink" title="定义圆圈样式"></a>定义圆圈样式</h2><p>接下来是定义几种不同的样式，如下图所示，普通圆点的边框为红色，填充为黄色，打头第一个圆点的边框为蓝色，填充为黑色。</p><p><img src="/posts/ce282862/style.jpg" alt></p><p>通过ol.style来定义这几种不同的样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// imageStyle：每个普通圆</span></span><br><span class="line"><span class="comment">// headInnerImageStyle：第一个的圆的内圈</span></span><br><span class="line"><span class="comment">// headOuterImageStyle：第一个圆的外圈</span></span><br><span class="line"><span class="keyword">let</span> imageStyle = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">        radius: <span class="number">5</span>,</span><br><span class="line">        fill: <span class="keyword">new</span> ol.style.Fill(&#123; <span class="attr">color</span>: <span class="string">'yellow'</span> &#125;),</span><br><span class="line">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">width</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> headInnerImageStyle = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">        radius: <span class="number">2</span>,</span><br><span class="line">        fill: <span class="keyword">new</span> ol.style.Fill(&#123; <span class="attr">color</span>: <span class="string">'blue'</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> headOuterImageStyle = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">    image: <span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">        radius: <span class="number">5</span>,</span><br><span class="line">        fill: <span class="keyword">new</span> ol.style.Fill(&#123; <span class="attr">color</span>: <span class="string">'black'</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="postrender事件"><a href="#postrender事件" class="headerlink" title="postrender事件"></a>postrender事件</h2><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><hr><p>在实例中不断运动的动画是利用<code>ol.layer.Tile</code>的<code>postrender</code>事件回调来完成的，通过官网查询我们可以发现<code>ol.layer.Tile</code>有如下几个事件：</p><p><img src="/posts/ce282862/postrender.jpg" alt></p><p>如标红所示，<a href="https://openlayers.org/en/latest/apidoc/module-ol_render_Event-RenderEvent.html#event:postrender" target="_blank" rel="external nofollow noopener noreferrer">postrender</a>事件是在layer渲染完成后触发，并且带有矢量上下文，所以是可以利用矢量上下文来自由绘制Canvas的。</p><h3 id="矢量上下文"><a href="#矢量上下文" class="headerlink" title="矢量上下文"></a>矢量上下文</h3><p>在OpenLayers6中，<a href="https://openlayers.org/en/latest/apidoc/module-ol_render.html#.getVectorContext" target="_blank" rel="external nofollow noopener noreferrer">ol.render.getVectorContext()</a>是可以获取事件的矢量上下文的，API和源码如下图所示：</p><hr><p><img src="/posts/ce282862/getVectorContext.jpg" alt title="OpenLayers官方API"></p><hr><p><img src="/posts/ce282862/getVectorContext_github.jpg" alt></p><hr><p>很明显可以得知，输入参数是个event，得到的是矢量上下文，也就是一个<a href="https://openlayers.org/en/latest/apidoc/module-ol_render_canvas_Immediate-CanvasImmediateRenderer.html" target="_blank" rel="external nofollow noopener noreferrer">CanvasImmediateRenderer</a>对象。该对象有四个方法<code>drawCircle</code>、<code>drawFeature</code> 、<code>drawGeometry</code> 、<code>setStyle</code>：</p><hr><p><img src="/posts/ce282862/vectorContext.jpg" alt></p><hr><p>在这个demo中利用到了最后的两个方法<code>drawGeometry</code>和<code>setStyle</code>，熟悉Canvas的同学们应该都知道，Canvas在绘制时需要先设置绘制的各种参数，再进行绘制，该对象中的这几个方法的思路与Canvas很相似，所以再demo中是先<code>setStyle</code>，后给全部圆点<code>drawGeometry</code>，然后再<code>setStyle</code>，再单独给第一个点<code>drawGeometry</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tileLayer.on(<span class="string">'postrender'</span>, event =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取矢量上下文和当前帧</span></span><br><span class="line">    <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span><br><span class="line">    <span class="keyword">let</span> frameState = event.frameState;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    <span class="comment">// 中间省略圆点位置计算过程</span></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    vectorContext.setStyle(imageStyle);</span><br><span class="line">    vectorContext.drawGeometry(<span class="keyword">new</span> ol.geom.MultiPoint(coordinates));</span><br><span class="line">    <span class="comment">// 单独给取出第一个点</span></span><br><span class="line">    <span class="keyword">let</span> headPoint = <span class="keyword">new</span> ol.geom.Point(coordinates[coordinates.length - <span class="number">1</span>]);</span><br><span class="line">    vectorContext.setStyle(headOuterImageStyle);</span><br><span class="line">    vectorContext.drawGeometry(headPoint);</span><br><span class="line">    vectorContext.setStyle(headInnerImageStyle);</span><br><span class="line">    vectorContext.drawGeometry(headPoint);</span><br><span class="line">    map.render();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>在绘制完成以后，调取<code>map</code>对象的<code>render</code>方法，绘制下一帧。同样当下一帧绘制完成以后，又会触发    <code>postrender</code>的事件继续绘制然后<code>render</code>。由于每一帧的<code>frameState.time</code>不同，所以圆点的位置也不同，最终实现了动画的效果。</p><h2 id="圆点位置计算"><a href="#圆点位置计算" class="headerlink" title="圆点位置计算"></a>圆点位置计算</h2><p>前面写的都是OpenLayers相关的内容，在圆点位置计算方面，就是一个纯数学过程了。如下所示，最开始是先定义了几个变量。在这几个变量中，最关键的是<code>theta</code>，它代表的是当前帧的第一个点的弧度，说起来比较拗口，其实是先用<code>event.frameState.time</code>求出当前帧的时间戳，然后除以<code>omegaTheta</code>（旋转一个周期的时间长度），得到的就是当前帧是第多少个周期，再乘<code>2 * Math.PI</code>，就得到了当前帧的弧度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">200</span>; <span class="comment">// 旋转点的个数</span></span><br><span class="line"><span class="keyword">const</span> omegaTheta = <span class="number">60000</span>; <span class="comment">// 旋转一个周期用的时间，ms</span></span><br><span class="line"><span class="comment">// 几个长度 m</span></span><br><span class="line"><span class="keyword">const</span> R = <span class="number">7e6</span>; <span class="comment">// 类似公转</span></span><br><span class="line"><span class="keyword">const</span> r = <span class="number">2e6</span>; <span class="comment">// 类似自转</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="number">2e6</span>; <span class="comment">// 一个基本长度常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> theta = <span class="number">2</span> * <span class="built_in">Math</span>.PI * frameState.time / omegaTheta; <span class="comment">// 计算当前帧弧度</span></span><br><span class="line"><span class="keyword">let</span> coordinates = []; <span class="comment">// 存放每个点位置的数组</span></span><br></pre></td></tr></table></figure><p>在demo代码中的数组是像下面这样循环出来的，首先t不难理解，<code>theta</code>是当前帧的弧度，加上<code>2 * Math.PI * i / n</code>以后，也就是每一个点都偏移一定的弧度，形成一条连线。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = theta + <span class="number">2</span> * <span class="built_in">Math</span>.PI * i / n;</span><br><span class="line">    <span class="keyword">let</span> x = (R + r) * <span class="built_in">Math</span>.cos(t) + p * <span class="built_in">Math</span>.cos((R + r) * t / r);</span><br><span class="line">    <span class="keyword">let</span> y = (R + r) * <span class="built_in">Math</span>.sin(t) + p * <span class="built_in">Math</span>.sin((R + r) * t / r);</span><br><span class="line">    coordinates.push([x, y]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一块代码最难理解的地方是<code>x</code>和<code>y</code>，所以可以把他分开来理解，先只取<code>x</code>和<code>y</code>的前半部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = theta + <span class="number">2</span> * <span class="built_in">Math</span>.PI * i / n;</span><br><span class="line">    <span class="keyword">let</span> x = (R + r) * <span class="built_in">Math</span>.cos(t); <span class="comment">// 只保留前半部分</span></span><br><span class="line">    <span class="keyword">let</span> y = (R + r) * <span class="built_in">Math</span>.sin(t); <span class="comment">// 只保留前半部分</span></span><br><span class="line">    coordinates.push([x, y]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果的到的图片如下所示，可以发现，圆点排列组合成了一个很大的圆，类似于一种公转的效果：</p><p><img src="/posts/ce282862/left.jpg" alt></p><p>接下来，再只取<code>x</code>和<code>y</code>的后半部分:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = theta + <span class="number">2</span> * <span class="built_in">Math</span>.PI * i / n;</span><br><span class="line">    <span class="keyword">let</span> x = p * <span class="built_in">Math</span>.cos((R + r) * t / r); <span class="comment">// 只保留后半部分</span></span><br><span class="line">    <span class="keyword">let</span> y = p * <span class="built_in">Math</span>.sin((R + r) * t / r); <span class="comment">// 只保留后半部分</span></span><br><span class="line">    coordinates.push([x, y]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果如下所示，跟保留前半部分不同的是，圆点虽然也排列成了圆圈，但是半径比较小，类似于一种自转的效果。所以当两者一结合，就会组合出demo中所示的混乱旋转的效果。<br><img src="/posts/ce282862/right.jpg" alt></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>最后贴出代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/css/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.1.1/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dynamic Data(动态数据)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body,</span><br><span class="line"><span class="css">        <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">            height: 100%;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义一个使用OSM源的瓦片图层</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> tileLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">            source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 初始化地图</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line">            layers: [tileLayer],</span><br><span class="line"><span class="actionscript">            target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">            view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">                center: [0, 0],</span><br><span class="line">                zoom: 2</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义几种不同的样式</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// imageStyle：每个普通圆</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// headInnerImageStyle：开头的圆的内圈</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// headOuterImageStyle：开头圆的外圈</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imageStyle = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line">                radius: 5,</span><br><span class="line"><span class="actionscript">                fill: <span class="keyword">new</span> ol.style.Fill(&#123; color: <span class="string">'yellow'</span> &#125;),</span></span><br><span class="line"><span class="actionscript">                stroke: <span class="keyword">new</span> ol.style.Stroke(&#123; color: <span class="string">'red'</span>, width: <span class="number">1</span> &#125;)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> headInnerImageStyle = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line">                radius: 2,</span><br><span class="line"><span class="actionscript">                fill: <span class="keyword">new</span> ol.style.Fill(&#123; color: <span class="string">'blue'</span> &#125;)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> headOuterImageStyle = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line">                radius: 5,</span><br><span class="line"><span class="actionscript">                fill: <span class="keyword">new</span> ol.style.Fill(&#123; color: <span class="string">'black'</span> &#125;)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 定义几个常量</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> n = <span class="number">200</span>; <span class="comment">// 200个点</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> omegaTheta = <span class="number">60000</span>; <span class="comment">// 旋转时间，ms</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 几个长度 m</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> R = <span class="number">7e6</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> r = <span class="number">2e6</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> p = <span class="number">2e6</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 回调</span></span></span><br><span class="line"><span class="actionscript">        tileLayer.on(<span class="string">'postrender'</span>, event =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取矢量上下文和当前帧</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> vectorContext = ol.render.getVectorContext(event);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> frameState = event.frameState;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> theta = <span class="number">2</span> * <span class="built_in">Math</span>.PI * frameState.time / omegaTheta;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(frameState.time, theta)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> coordinates = [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> t = theta + <span class="number">2</span> * <span class="built_in">Math</span>.PI * i / n;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> x = (R + r) * <span class="built_in">Math</span>.cos(t) + p * <span class="built_in">Math</span>.cos((R + r) * t / r);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> y = (R + r) * <span class="built_in">Math</span>.sin(t) + p * <span class="built_in">Math</span>.sin((R + r) * t / r);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// var x = (R + r) * Math.cos(t)</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// var y = (R + r) * Math.sin(t)</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// var x = p * Math.cos((R + r) * t / r);</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// var y = p * Math.sin((R + r) * t / r);</span></span></span><br><span class="line">                coordinates.push([x, y]);</span><br><span class="line">            &#125;</span><br><span class="line">            vectorContext.setStyle(imageStyle);</span><br><span class="line"><span class="actionscript">            vectorContext.drawGeometry(<span class="keyword">new</span> ol.geom.MultiPoint(coordinates));</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> headPoint = <span class="keyword">new</span> ol.geom.Point(coordinates[coordinates.length - <span class="number">1</span>]);</span></span><br><span class="line">            vectorContext.setStyle(headOuterImageStyle);</span><br><span class="line">            vectorContext.drawGeometry(headPoint);</span><br><span class="line">            vectorContext.setStyle(headInnerImageStyle);</span><br><span class="line">            vectorContext.drawGeometry(headPoint);</span><br><span class="line">            map.render();</span><br><span class="line">        &#125;);</span><br><span class="line">        map.render();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLayers6实例分析：简介</title>
      <link href="/posts/afca5f67.html"/>
      <url>/posts/afca5f67.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://openlayers.org" target="_blank" rel="external nofollow noopener noreferrer">OpenLayers</a>是一个在 WebGIS 方向功能非常完备的的库，用官网的话来说就是“一个高性能、功能丰富的能满足所有地图绘制需求的前端库”。由于最近在公司的业务在地图方面有很多需求，所以从零开始学 Openlayers，一边完成业务一边补充技术栈，顺便写几篇文章沉淀一下。</p><p>推荐初学者学习以下两个教程：</p><ol><li><p><a href="http://anzhihun.coding.me/ol3-primer/" target="_blank" rel="external nofollow noopener noreferrer">Openlayers 入门指南</a>：虽然讲的是 Openlayers3 的入门，但是新版本整体上换汤不换药，基本只是新功能和 API 的区别，而且这个教程讲了很多 GIS 方面的基础知识，对非专业人员理解 WebGIS 有很大的帮助。推荐了解完 Openlayers 以后首先看完这个教程。</p></li><li><p><a href="https://ke.qq.com/course/449937" target="_blank" rel="external nofollow noopener noreferrer">跟我学 OpenLayers——基础实例详解</a>：这个是对 OpenLayers5 版本官网的实例进行了总结和讲解的视频教程。作者老胡对实例由浅入深的总结和分析，讲的很不错，适合英文水平跟我一样菜，对 API 和 Demo 看的一头雾水的同学可以跟着学一下，听说视频作者年后还要出对 API 的讲解课程。</p><a id="more"></a><p>再列出几个链接：</p></li><li><p><a href="https://openlayers.org" target="_blank" rel="external nofollow noopener noreferrer">OpenLayers 官网</a>：最下面有安装教程和各版本的文件、API 文档和实例。</p></li><li><p><a href="https://openlayers.org/en/latest/apidoc/" target="_blank" rel="external nofollow noopener noreferrer">API</a>：最新版本的 API 文档，可以按照类似”ol.layer.Tile“这种格式搜索。</p></li><li><p><a href="https://openlayers.org/en/latest/examples/" target="_blank" rel="external nofollow noopener noreferrer">实例</a>：最新版本的实例。</p></li></ol><p>两种引入方式：</p><ul><li><a href="https://openlayers.org/en/latest/doc/quickstart.html" target="_blank" rel="external nofollow noopener noreferrer">普通标签引入</a>：最简单的快速开始的方式。</li><li><a href="https://openlayers.org/en/latest/doc/tutorials/bundle.html" target="_blank" rel="external nofollow noopener noreferrer">模块引入</a>：官方推荐的引入方式。</li></ul><p>两种方式的主要区别就是第二种可以分模块引入所需的部分，更现代化的开发方式。</p><p>在接下来的实例分析中，我主要总结《跟我学 OpenLayers》中胡老师总结的 Demo，配合官网对应实例，用最新的 OpenLayers6 的 API 来实现。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
          <category> 地图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLayers </tag>
            
            <tag> 可视化 </tag>
            
            <tag> 地图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
